






Started logging.

>>>
Content-Length: 3115

{"jsonrpc":"2.0","id":"1","method":"initialize","params":{"processId":15564,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"C:\\Users\\krys-\\AppData\\Local\\Temp\\arduino-language-server1389484002\\sketch","rootUri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server1389484002/sketch","initializationOptions":{},"capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"isPreferredSupport":true},"codeLens":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"colorProvider":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"publishDiagnostics":{"relatedInformation":true,"tagSupport":{"valueSet":[1,2]}},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/krys-/OneDrive/Escritorio/doom-nano-master/doom-nano","name":"doom-nano"}]}}
<<<
Content-Length: 1905

{"id":"1","jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"clangdInlayHintsProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/","*"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":["declaration","deprecated","deduced","readonly","static","abstract","virtual","dependentName","defaultLibrary","usedAsMutableReference","functionScope","classScope","fileScope","globalScope"],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","interface","enum","enumMember","type","type","unknown","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",")","{","}","<",">",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeDefinitionProvider":true,"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 14.0.0 windows x86_64-pc-windows-msvc"}}}
>>>
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 28833

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server1389484002/sketch/doom-nano.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}}}Content-Length: 303

{"jsonrpc":"2.0","id":"2","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server1389484002/sketch/doom-nano.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 180

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server1389484002/.clangd"}}Content-Length: 180

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server1389484002/.clangd"}}Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/27","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/27","percentage":3}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14}}}Content-Length: 55604

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"'constants.h' file not found","range":{"end":{"character":22,"line":2},"start":{"character":9,"line":2}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":21,"line":16},"start":{"character":16,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Player'","range":{"end":{"character":6,"line":23},"start":{"character":0,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Entity'","range":{"end":{"character":6,"line":24},"start":{"character":0,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":26,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'StaticEntity'","range":{"end":{"character":12,"line":25},"start":{"character":0,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_STATIC_ENTITIES'","range":{"end":{"character":46,"line":25},"start":{"character":27,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":18,"line":38},"start":{"character":15,"line":38}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":17,"line":40},"start":{"character":14,"line":40}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":27,"line":46},"start":{"character":24,"line":46}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":6,"line":56},"start":{"character":0,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":31,"line":56},"start":{"character":25,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'setupDisplay'","range":{"end":{"character":14,"line":75},"start":{"character":2,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_setup'","range":{"end":{"character":13,"line":76},"start":{"character":2,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sound_init'","range":{"end":{"character":12,"line":77},"start":{"character":2,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":31,"line":88},"start":{"character":19,"line":88}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":39,"line":89},"start":{"character":28,"line":89}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_PLAYER'","range":{"end":{"character":27,"line":92},"start":{"character":19,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'create_player'","range":{"end":{"character":30,"line":93},"start":{"character":17,"line":93}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":31,"line":103},"start":{"character":20,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":61,"line":103},"start":{"character":49,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_FLOOR'","range":{"end":{"character":18,"line":104},"start":{"character":11,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":46,"line":108},"start":{"character":34,"line":108}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":69,"line":108},"start":{"character":58,"line":108}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":18,"line":113},"start":{"character":15,"line":113}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":17,"line":121},"start":{"character":14,"line":121}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":34,"line":131},"start":{"character":22,"line":131}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_ENEMY'","range":{"end":{"character":16,"line":138},"start":{"character":9,"line":138}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'create_enemy'","range":{"end":{"character":41,"line":139},"start":{"character":29,"line":139}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_KEY'","range":{"end":{"character":14,"line":143},"start":{"character":9,"line":143}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'create_key'","range":{"end":{"character":39,"line":144},"start":{"character":29,"line":144}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_MEDIKIT'","range":{"end":{"character":18,"line":148},"start":{"character":9,"line":148}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'create_medikit'","range":{"end":{"character":43,"line":149},"start":{"character":29,"line":149}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":34,"line":157},"start":{"character":22,"line":157}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":5,"line":161},"start":{"character":2,"line":161}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_FIREBALL'","range":{"end":{"character":33,"line":161},"start":{"character":23,"line":161}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":31,"line":166},"start":{"character":16,"line":166}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":98,"line":166},"start":{"character":83,"line":166}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":37,"line":167},"start":{"character":22,"line":167}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'create_fireball'","range":{"end":{"character":40,"line":168},"start":{"character":25,"line":168}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":21,"line":172},"start":{"character":18,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":27,"line":192},"start":{"character":24,"line":192}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":3,"line":211},"start":{"character":0,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":49,"line":211},"start":{"character":43,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_WALL'","range":{"end":{"character":21,"line":217},"start":{"character":15,"line":217}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'hit_wall_snd'","range":{"end":{"character":26,"line":218},"start":{"character":14,"line":218}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HIT_WALL_SND_LEN'","range":{"end":{"character":44,"line":218},"start":{"character":28,"line":218}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'create_uid'","range":{"end":{"character":21,"line":219},"start":{"character":11,"line":219}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'UID_null'","range":{"end":{"character":19,"line":223},"start":{"character":11,"line":223}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_ENEMY'","range":{"end":{"character":23,"line":236},"start":{"character":16,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_DEAD'","range":{"end":{"character":52,"line":236},"start":{"character":46,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_HIDDEN'","range":{"end":{"character":83,"line":236},"start":{"character":75,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":10,"line":240},"start":{"character":4,"line":240}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_COLLIDER_DIST'","range":{"end":{"character":38,"line":244},"start":{"character":19,"line":244}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'UID_null'","range":{"end":{"character":17,"line":249},"start":{"character":9,"line":249}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'shoot_snd'","range":{"end":{"character":21,"line":254},"start":{"character":12,"line":254}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SHOOT_SND_LEN'","range":{"end":{"character":36,"line":254},"start":{"character":23,"line":254}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_ENEMY'","range":{"end":{"character":46,"line":258},"start":{"character":39,"line":258}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_DEAD'","range":{"end":{"character":75,"line":258},"start":{"character":69,"line":258}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_HIDDEN'","range":{"end":{"character":106,"line":258},"start":{"character":98,"line":258}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":10,"line":262},"start":{"character":4,"line":262}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_MAX_DAMAGE'","range":{"end":{"character":50,"line":264},"start":{"character":36,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_MAX_DAMAGE'","range":{"end":{"character":66,"line":264},"start":{"character":52,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_HIT'","range":{"end":{"character":31,"line":267},"start":{"character":26,"line":267}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":3,"line":275},"start":{"character":0,"line":275}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":48,"line":275},"start":{"character":42,"line":275}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":5,"line":276},"start":{"character":2,"line":276}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":5,"line":277},"start":{"character":2,"line":277}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'UID_null'","range":{"end":{"character":43,"line":282},"start":{"character":35,"line":282}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITY_DISTANCE'","range":{"end":{"character":48,"line":296},"start":{"character":29,"line":296}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_HIDDEN'","range":{"end":{"character":35,"line":303},"start":{"character":27,"line":303}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_ENEMY'","range":{"end":{"character":18,"line":311},"start":{"character":11,"line":311}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_DEAD'","range":{"end":{"character":41,"line":314},"start":{"character":35,"line":314}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_DEAD'","range":{"end":{"character":38,"line":315},"start":{"character":32,"line":315}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_HIT'","range":{"end":{"character":46,"line":318},"start":{"character":41,"line":318}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_ALERT'","range":{"end":{"character":39,"line":321},"start":{"character":32,"line":321}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_FIRING'","range":{"end":{"character":48,"line":324},"start":{"character":40,"line":324}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_ALERT'","range":{"end":{"character":39,"line":327},"start":{"character":32,"line":327}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DIST'","range":{"end":{"character":53,"line":332},"start":{"character":37,"line":332}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENEMY_VIEW'","range":{"end":{"character":92,"line":332},"start":{"character":78,"line":332}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_ALERT'","range":{"end":{"character":44,"line":333},"start":{"character":37,"line":333}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_ALERT'","range":{"end":{"character":41,"line":334},"start":{"character":34,"line":334}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_FIRING'","range":{"end":{"character":44,"line":340},"start":{"character":36,"line":340}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_SPEED'","range":{"end":{"character":69,"line":347},"start":{"character":58,"line":347}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'delta'","range":{"end":{"character":77,"line":347},"start":{"character":72,"line":347}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_SPEED'","range":{"end":{"character":69,"line":348},"start":{"character":58,"line":348}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'delta'","range":{"end":{"character":77,"line":348},"start":{"character":72,"line":348}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DIST'","range":{"end":{"character":61,"line":353},"start":{"character":45,"line":353}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_MELEE'","range":{"end":{"character":44,"line":354},"start":{"character":37,"line":354}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_MELEE'","range":{"end":{"character":41,"line":356},"start":{"character":34,"line":356}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DAMAGE'","range":{"end":{"character":73,"line":360},"start":{"character":55,"line":360}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_STAND'","range":{"end":{"character":39,"line":367},"start":{"character":32,"line":367}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_FIREBALL'","range":{"end":{"character":21,"line":373},"start":{"character":11,"line":373}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_COLLIDER_DIST'","range":{"end":{"character":57,"line":374},"start":{"character":35,"line":374}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_FIREBALL_DAMAGE'","range":{"end":{"character":72,"line":376},"start":{"character":51,"line":376}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":15,"line":384},"start":{"character":12,"line":384}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":61,"line":387},"start":{"character":46,"line":387}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_SPEED'","range":{"end":{"character":84,"line":387},"start":{"character":70,"line":387}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":61,"line":388},"start":{"character":46,"line":388}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_SPEED'","range":{"end":{"character":84,"line":388},"start":{"character":70,"line":388}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_MEDIKIT'","range":{"end":{"character":20,"line":400},"start":{"character":11,"line":400}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ITEM_COLLIDER_DIST'","range":{"end":{"character":53,"line":401},"start":{"character":35,"line":401}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'medkit_snd'","range":{"end":{"character":32,"line":403},"start":{"character":22,"line":403}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MEDKIT_SND_LEN'","range":{"end":{"character":48,"line":403},"start":{"character":34,"line":403}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_HIDDEN'","range":{"end":{"character":38,"line":404},"start":{"character":30,"line":404}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_KEY'","range":{"end":{"character":16,"line":412},"start":{"character":11,"line":412}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ITEM_COLLIDER_DIST'","range":{"end":{"character":53,"line":413},"start":{"character":35,"line":413}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'get_key_snd'","range":{"end":{"character":33,"line":415},"start":{"character":22,"line":415}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GET_KEY_SND_LEN'","range":{"end":{"character":50,"line":415},"start":{"character":35,"line":415}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_HIDDEN'","range":{"end":{"character":38,"line":416},"start":{"character":30,"line":416}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":5,"line":431},"start":{"character":2,"line":431}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":38,"line":433},"start":{"character":26,"line":433}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RES_DIVIDER'","range":{"end":{"character":56,"line":433},"start":{"character":45,"line":433}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":51,"line":434},"start":{"character":39,"line":434}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":10,"line":439},"start":{"character":4,"line":439}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_RENDER_DEPTH'","range":{"end":{"character":43,"line":468},"start":{"character":27,"line":468}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_WALL'","range":{"end":{"character":25,"line":481},"start":{"character":19,"line":481}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_ENEMY'","range":{"end":{"character":28,"line":487},"start":{"character":21,"line":487}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITY_DISTANCE'","range":{"end":{"character":79,"line":489},"start":{"character":60,"line":489}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'UID'","range":{"end":{"character":15,"line":490},"start":{"character":12,"line":490}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'create_uid'","range":{"end":{"character":32,"line":490},"start":{"character":22,"line":490}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'zbuffer'","range":{"end":{"character":13,"line":512},"start":{"character":6,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Z_RES_DIVIDER'","range":{"end":{"character":31,"line":512},"start":{"character":18,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":69,"line":512},"start":{"character":50,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":41,"line":515},"start":{"character":28,"line":515}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":64,"line":519},"start":{"character":51,"line":519}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":64,"line":520},"start":{"character":51,"line":520}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":22,"line":521},"start":{"character":8,"line":521}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_RENDER_DEPTH'","range":{"end":{"character":56,"line":521},"start":{"character":40,"line":521}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":73,"line":521},"start":{"character":59,"line":521}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":6,"line":549},"start":{"character":0,"line":549}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":31,"line":549},"start":{"character":25,"line":549}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"excess_initializers","message":"Excess elements in scalar initializer","range":{"end":{"character":10,"line":559},"start":{"character":9,"line":559}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_HIDDEN'","range":{"end":{"character":35,"line":566},"start":{"character":27,"line":566}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'Coords'","range":{"end":{"character":10,"line":568},"start":{"character":4,"line":568}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_SPRITE_DEPTH'","range":{"end":{"character":60,"line":571},"start":{"character":44,"line":571}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":40,"line":575},"start":{"character":30,"line":575}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":42,"line":576},"start":{"character":29,"line":576}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":38,"line":582},"start":{"character":28,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":72,"line":582},"start":{"character":60,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":85,"line":582},"start":{"character":75,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_ENEMY'","range":{"end":{"character":18,"line":587},"start":{"character":11,"line":587}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_ALERT'","range":{"end":{"character":40,"line":589},"start":{"character":33,"line":589}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_FIRING'","range":{"end":{"character":48,"line":592},"start":{"character":40,"line":592}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_HIT'","range":{"end":{"character":45,"line":595},"start":{"character":40,"line":595}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_MELEE'","range":{"end":{"character":47,"line":598},"start":{"character":40,"line":598}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'S_DEAD'","range":{"end":{"character":46,"line":601},"start":{"character":40,"line":601}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_IMP_WIDTH'","range":{"end":{"character":43,"line":610},"start":{"character":30,"line":610}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_imp_bits'","range":{"end":{"character":24,"line":612},"start":{"character":12,"line":612}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_imp_mask'","range":{"end":{"character":24,"line":613},"start":{"character":12,"line":613}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_IMP_WIDTH'","range":{"end":{"character":25,"line":614},"start":{"character":12,"line":614}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_IMP_HEIGHT'","range":{"end":{"character":26,"line":615},"start":{"character":12,"line":615}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_FIREBALL'","range":{"end":{"character":21,"line":622},"start":{"character":11,"line":622}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_FIREBALL_WIDTH'","range":{"end":{"character":48,"line":624},"start":{"character":30,"line":624}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_FIREBALL_HEIGHT'","range":{"end":{"character":49,"line":625},"start":{"character":30,"line":625}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_fireball_bits'","range":{"end":{"character":29,"line":626},"start":{"character":12,"line":626}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_fireball_mask'","range":{"end":{"character":29,"line":627},"start":{"character":12,"line":627}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_FIREBALL_WIDTH'","range":{"end":{"character":30,"line":628},"start":{"character":12,"line":628}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_FIREBALL_HEIGHT'","range":{"end":{"character":31,"line":629},"start":{"character":12,"line":629}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_MEDIKIT'","range":{"end":{"character":20,"line":636},"start":{"character":11,"line":636}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_ITEMS_WIDTH'","range":{"end":{"character":45,"line":638},"start":{"character":30,"line":638}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_items_bits'","range":{"end":{"character":26,"line":640},"start":{"character":12,"line":640}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_items_mask'","range":{"end":{"character":26,"line":641},"start":{"character":12,"line":641}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_ITEMS_WIDTH'","range":{"end":{"character":27,"line":642},"start":{"character":12,"line":642}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_ITEMS_HEIGHT'","range":{"end":{"character":28,"line":643},"start":{"character":12,"line":643}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'E_KEY'","range":{"end":{"character":16,"line":650},"start":{"character":11,"line":650}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_ITEMS_WIDTH'","range":{"end":{"character":45,"line":652},"start":{"character":30,"line":652}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_items_bits'","range":{"end":{"character":26,"line":654},"start":{"character":12,"line":654}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_items_mask'","range":{"end":{"character":26,"line":655},"start":{"character":12,"line":655}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_ITEMS_WIDTH'","range":{"end":{"character":27,"line":656},"start":{"character":12,"line":656}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_ITEMS_HEIGHT'","range":{"end":{"character":28,"line":657},"start":{"character":12,"line":657}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":53,"line":669},"start":{"character":40,"line":669}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":24,"line":670},"start":{"character":11,"line":670}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":78,"line":670},"start":{"character":65,"line":670}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_SHOT_POS'","range":{"end":{"character":28,"line":672},"start":{"character":16,"line":672}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":11,"line":674},"start":{"character":4,"line":674}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_fire_bits'","range":{"end":{"character":51,"line":674},"start":{"character":38,"line":674}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_FIRE_WIDTH'","range":{"end":{"character":67,"line":674},"start":{"character":53,"line":674}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_FIRE_HEIGHT'","range":{"end":{"character":84,"line":674},"start":{"character":69,"line":674}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_GUN_HEIGHT'","range":{"end":{"character":53,"line":678},"start":{"character":39,"line":678}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":68,"line":678},"start":{"character":55,"line":678}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":9,"line":681},"start":{"character":2,"line":681}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_gun_mask'","range":{"end":{"character":39,"line":681},"start":{"character":27,"line":681}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_GUN_WIDTH'","range":{"end":{"character":54,"line":681},"start":{"character":41,"line":681}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":9,"line":682},"start":{"character":2,"line":682}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_gun_bits'","range":{"end":{"character":39,"line":682},"start":{"character":27,"line":682}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_GUN_WIDTH'","range":{"end":{"character":54,"line":682},"start":{"character":41,"line":682}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'drawText'","range":{"end":{"character":10,"line":687},"start":{"character":2,"line":687}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'drawText'","range":{"end":{"character":10,"line":688},"start":{"character":2,"line":688}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":9,"line":694},"start":{"character":2,"line":694}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":9,"line":695},"start":{"character":2,"line":695}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":9,"line":703},"start":{"character":2,"line":703}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getActualFps'","range":{"end":{"character":36,"line":704},"start":{"character":24,"line":704}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'drawText'","range":{"end":{"character":10,"line":704},"start":{"character":2,"line":704}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'drawText'","range":{"end":{"character":10,"line":705},"start":{"character":2,"line":705}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":9,"line":711},"start":{"character":2,"line":711}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":17,"line":712},"start":{"character":5,"line":712}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_LOGO_WIDTH'","range":{"end":{"character":34,"line":712},"start":{"character":20,"line":712}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":18,"line":713},"start":{"character":5,"line":713}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_LOGO_HEIGHT'","range":{"end":{"character":36,"line":713},"start":{"character":21,"line":713}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_logo_bits'","range":{"end":{"character":17,"line":714},"start":{"character":4,"line":714}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_LOGO_WIDTH'","range":{"end":{"character":18,"line":715},"start":{"character":4,"line":715}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'BMP_LOGO_HEIGHT'","range":{"end":{"character":19,"line":716},"start":{"character":4,"line":716}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":23,"line":721},"start":{"character":11,"line":721}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":47,"line":721},"start":{"character":34,"line":721}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":9,"line":722},"start":{"character":2,"line":722}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_fire'","range":{"end":{"character":18,"line":729},"start":{"character":8,"line":729}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GAME_PLAY'","range":{"end":{"character":38,"line":729},"start":{"character":29,"line":729}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":31,"line":742},"start":{"character":17,"line":742}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sto_level_1'","range":{"end":{"character":29,"line":744},"start":{"character":18,"line":744}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'fps'","range":{"end":{"character":7,"line":747},"start":{"character":4,"line":747}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display_buf'","range":{"end":{"character":22,"line":750},"start":{"character":11,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":39,"line":750},"start":{"character":27,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":56,"line":750},"start":{"character":43,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_up'","range":{"end":{"character":18,"line":759},"start":{"character":10,"line":759}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED'","range":{"end":{"character":37,"line":760},"start":{"character":28,"line":760}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":761},"start":{"character":41,"line":761}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_down'","range":{"end":{"character":27,"line":762},"start":{"character":17,"line":762}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED'","range":{"end":{"character":39,"line":763},"start":{"character":30,"line":763}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":764},"start":{"character":41,"line":764}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":767},"start":{"character":41,"line":767}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_right'","range":{"end":{"character":21,"line":771},"start":{"character":10,"line":771}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ROT_SPEED'","range":{"end":{"character":29,"line":772},"start":{"character":20,"line":772}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'delta'","range":{"end":{"character":37,"line":772},"start":{"character":32,"line":772}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_left'","range":{"end":{"character":27,"line":779},"start":{"character":17,"line":779}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ROT_SPEED'","range":{"end":{"character":29,"line":780},"start":{"character":20,"line":780}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'delta'","range":{"end":{"character":37,"line":780},"start":{"character":32,"line":780}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":61,"line":789},"start":{"character":48,"line":789}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sound'","range":{"end":{"character":16,"line":792},"start":{"character":11,"line":792}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'walk1_snd'","range":{"end":{"character":31,"line":794},"start":{"character":22,"line":794}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'WALK1_SND_LEN'","range":{"end":{"character":46,"line":794},"start":{"character":33,"line":794}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'walk2_snd'","range":{"end":{"character":31,"line":797},"start":{"character":22,"line":797}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'WALK2_SND_LEN'","range":{"end":{"character":46,"line":797},"start":{"character":33,"line":797}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_TARGET_POS'","range":{"end":{"character":34,"line":803},"start":{"character":20,"line":803}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_TARGET_POS'","range":{"end":{"character":41,"line":806},"start":{"character":27,"line":806}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_fire'","range":{"end":{"character":41,"line":809},"start":{"character":31,"line":809}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_SHOT_POS'","range":{"end":{"character":30,"line":811},"start":{"character":18,"line":811}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_fire'","range":{"end":{"character":41,"line":814},"start":{"character":31,"line":814}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_fire'","range":{"end":{"character":25,"line":821},"start":{"character":15,"line":821}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":41,"line":821},"start":{"character":36,"line":821}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sto_level_1'","range":{"end":{"character":19,"line":829},"start":{"character":8,"line":829}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'delta'","range":{"end":{"character":46,"line":831},"start":{"character":41,"line":831}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'delta'","range":{"end":{"character":46,"line":832},"start":{"character":41,"line":832}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sto_level_1'","range":{"end":{"character":30,"line":839},"start":{"character":19,"line":839}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sto_level_1'","range":{"end":{"character":25,"line":842},"start":{"character":14,"line":842}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'fadeScreen'","range":{"end":{"character":16,"line":848},"start":{"character":6,"line":848}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":11,"line":868},"start":{"character":4,"line":868}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":11,"line":869},"start":{"character":4,"line":869}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_left'","range":{"end":{"character":18,"line":875},"start":{"character":8,"line":875}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'input_right'","range":{"end":{"character":35,"line":875},"start":{"character":24,"line":875}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":18,"line":877},"start":{"character":13,"line":877}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":14,"line":884},"start":{"character":9,"line":884}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GAME_PLAY'","range":{"end":{"character":18,"line":888},"start":{"character":9,"line":888}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":36,"line":895},"start":{"character":22,"line":895}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'fadeScreen'","range":{"end":{"character":14,"line":896},"start":{"character":4,"line":896}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":11,"line":897},"start":{"character":4,"line":897}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server1389484002/sketch/doom-nano.ino.cpp","version":1}}Content-Length: 38

{"id":"2","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 204

{"jsonrpc":"2.0","id":"3","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server1389484002/sketch/doom-nano.ino.cpp"}}}
<<<
Content-Length: 12536

{"id":"3","jsonrpc":"2.0","result":[{"detail":"uint8_t","kind":13,"name":"scene","range":{"end":{"character":21,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":16},"start":{"character":8,"line":16}}},{"detail":"bool","kind":13,"name":"exit_scene","range":{"end":{"character":23,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":15,"line":17},"start":{"character":5,"line":17}}},{"detail":"bool","kind":13,"name":"invert_screen","range":{"end":{"character":26,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":18,"line":18},"start":{"character":5,"line":18}}},{"detail":"uint8_t","kind":13,"name":"flash_screen","range":{"end":{"character":24,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":20,"line":19},"start":{"character":8,"line":19}}},{"detail":"int","kind":13,"name":"player","range":{"end":{"character":13,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":13,"line":23},"start":{"character":7,"line":23}}},{"detail":"int","kind":13,"name":"entity","range":{"end":{"character":13,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":13,"line":24},"start":{"character":7,"line":24}}},{"detail":"int","kind":13,"name":"static_entity","range":{"end":{"character":26,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":26,"line":25},"start":{"character":13,"line":25}}},{"detail":"uint8_t","kind":13,"name":"num_entities","range":{"end":{"character":24,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":20,"line":26},"start":{"character":8,"line":26}}},{"detail":"uint8_t","kind":13,"name":"num_static_entities","range":{"end":{"character":31,"line":27},"start":{"character":0,"line":27}},"selectionRange":{"end":{"character":27,"line":27},"start":{"character":8,"line":27}}},{"detail":"void ()","kind":12,"name":"setup","range":{"end":{"character":16,"line":30},"start":{"character":0,"line":30}},"selectionRange":{"end":{"character":10,"line":30},"start":{"character":5,"line":30}}},{"detail":"void (uint8_t)","kind":12,"name":"jumpTo","range":{"end":{"character":33,"line":32},"start":{"character":0,"line":32}},"selectionRange":{"end":{"character":11,"line":32},"start":{"character":5,"line":32}}},{"detail":"void (const uint8_t *)","kind":12,"name":"initializeLevel","range":{"end":{"character":43,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":20,"line":34},"start":{"character":5,"line":34}}},{"detail":"uint8_t (const uint8_t *, uint8_t, uint8_t)","kind":12,"name":"getBlockAt","range":{"end":{"character":63,"line":36},"start":{"character":0,"line":36}},"selectionRange":{"end":{"character":18,"line":36},"start":{"character":8,"line":36}}},{"detail":"bool (int)","kind":12,"name":"isSpawned","range":{"end":{"character":23,"line":38},"start":{"character":0,"line":38}},"selectionRange":{"end":{"character":14,"line":38},"start":{"character":5,"line":38}}},{"detail":"bool (int)","kind":12,"name":"isStatic","range":{"end":{"character":22,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":13,"line":40},"start":{"character":5,"line":40}}},{"detail":"void (uint8_t, uint8_t, uint8_t)","kind":12,"name":"spawnEntity","range":{"end":{"character":52,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":5,"line":42}}},{"detail":"void (double, double)","kind":12,"name":"spawnFireball","range":{"end":{"character":38,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":18,"line":44},"start":{"character":5,"line":44}}},{"detail":"void (int)","kind":12,"name":"removeStaticEntity","range":{"end":{"character":32,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":5,"line":46}}},{"detail":"void ()","kind":12,"name":"fire","range":{"end":{"character":11,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":9,"line":48},"start":{"character":5,"line":48}}},{"detail":"void (const uint8_t *)","kind":12,"name":"updateEntities","range":{"end":{"character":42,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":19,"line":50},"start":{"character":5,"line":50}}},{"detail":"void (const uint8_t *, double)","kind":12,"name":"renderMap","range":{"end":{"character":57,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":14,"line":52},"start":{"character":5,"line":52}}},{"detail":"uint8_t ()","kind":12,"name":"sortEntities","range":{"end":{"character":22,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":20,"line":54},"start":{"character":8,"line":54}}},{"detail":"int (int *)","kind":12,"name":"translateIntoView","range":{"end":{"character":37,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":24,"line":56},"start":{"character":7,"line":56}}},{"detail":"void (double)","kind":12,"name":"renderEntities","range":{"end":{"character":39,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":19,"line":58},"start":{"character":5,"line":58}}},{"detail":"void (uint8_t, double)","kind":12,"name":"renderGun","range":{"end":{"character":54,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":14,"line":60},"start":{"character":5,"line":60}}},{"detail":"void ()","kind":12,"name":"renderHud","range":{"end":{"character":16,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":14,"line":62},"start":{"character":5,"line":62}}},{"detail":"void ()","kind":12,"name":"updateHud","range":{"end":{"character":16,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":14,"line":64},"start":{"character":5,"line":64}}},{"detail":"void ()","kind":12,"name":"renderStats","range":{"end":{"character":18,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":16,"line":66},"start":{"character":5,"line":66}}},{"detail":"void ()","kind":12,"name":"loopIntro","range":{"end":{"character":16,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":14,"line":68},"start":{"character":5,"line":68}}},{"detail":"void ()","kind":12,"name":"loopGamePlay","range":{"end":{"character":19,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":17,"line":70},"start":{"character":5,"line":70}}},{"detail":"void ()","kind":12,"name":"loop","range":{"end":{"character":15,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":9,"line":72},"start":{"character":5,"line":72}}},{"detail":"void ()","kind":12,"name":"setup","range":{"end":{"character":1,"line":78},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":10,"line":74},"start":{"character":5,"line":74}}},{"detail":"void (uint8_t)","kind":12,"name":"jumpTo","range":{"end":{"character":1,"line":84},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":11,"line":81},"start":{"character":5,"line":81}}},{"detail":"void (const uint8_t *)","kind":12,"name":"initializeLevel","range":{"end":{"character":1,"line":100},"start":{"character":0,"line":87}},"selectionRange":{"end":{"character":20,"line":87},"start":{"character":5,"line":87}}},{"detail":"uint8_t (const uint8_t *, uint8_t, uint8_t)","kind":12,"name":"getBlockAt","range":{"end":{"character":1,"line":111},"start":{"character":0,"line":102}},"selectionRange":{"end":{"character":18,"line":102},"start":{"character":8,"line":102}}},{"detail":"bool (int)","kind":12,"name":"isSpawned","range":{"end":{"character":1,"line":119},"start":{"character":0,"line":113}},"selectionRange":{"end":{"character":14,"line":113},"start":{"character":5,"line":113}}},{"detail":"bool (int)","kind":12,"name":"isStatic","range":{"end":{"character":1,"line":127},"start":{"character":0,"line":121}},"selectionRange":{"end":{"character":13,"line":121},"start":{"character":5,"line":121}}},{"detail":"void (uint8_t, uint8_t, uint8_t)","kind":12,"name":"spawnEntity","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":129}},"selectionRange":{"end":{"character":16,"line":129},"start":{"character":5,"line":129}}},{"detail":"void (double, double)","kind":12,"name":"spawnFireball","range":{"end":{"character":1,"line":170},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"detail":"void (int, bool)","kind":12,"name":"removeEntity","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":172}},"selectionRange":{"end":{"character":17,"line":172},"start":{"character":5,"line":172}}},{"detail":"void (int)","kind":12,"name":"removeStaticEntity","range":{"end":{"character":1,"line":209},"start":{"character":0,"line":192}},"selectionRange":{"end":{"character":23,"line":192},"start":{"character":5,"line":192}}},{"detail":"int (const uint8_t *, int *, double, double, bool)","kind":12,"name":"detectCollision","range":{"end":{"character":1,"line":250},"start":{"character":0,"line":211}},"selectionRange":{"end":{"character":19,"line":211},"start":{"character":4,"line":211}}},{"detail":"void ()","kind":12,"name":"fire","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":253}},"selectionRange":{"end":{"character":9,"line":253},"start":{"character":5,"line":253}}},{"detail":"int (const uint8_t *, int *, double, double, bool)","kind":12,"name":"updatePosition","range":{"end":{"character":1,"line":283},"start":{"character":0,"line":275}},"selectionRange":{"end":{"character":18,"line":275},"start":{"character":4,"line":275}}},{"detail":"void (const uint8_t *)","kind":12,"name":"updateEntities","range":{"end":{"character":1,"line":427},"start":{"character":0,"line":285}},"selectionRange":{"end":{"character":19,"line":285},"start":{"character":5,"line":285}}},{"detail":"void (const uint8_t *, double)","kind":12,"name":"renderMap","range":{"end":{"character":1,"line":525},"start":{"character":0,"line":430}},"selectionRange":{"end":{"character":14,"line":430},"start":{"character":5,"line":430}}},{"detail":"uint8_t ()","kind":12,"name":"sortEntities","range":{"end":{"character":1,"line":547},"start":{"character":0,"line":528}},"selectionRange":{"end":{"character":20,"line":528},"start":{"character":8,"line":528}}},{"detail":"int (int *)","kind":12,"name":"translateIntoView","range":{"end":{"character":1,"line":560},"start":{"character":0,"line":549}},"selectionRange":{"end":{"character":24,"line":549},"start":{"character":7,"line":549}}},{"detail":"void (double)","kind":12,"name":"renderEntities","range":{"end":{"character":1,"line":665},"start":{"character":0,"line":562}},"selectionRange":{"end":{"character":19,"line":562},"start":{"character":5,"line":562}}},{"detail":"void (uint8_t, double)","kind":12,"name":"renderGun","range":{"end":{"character":1,"line":683},"start":{"character":0,"line":667}},"selectionRange":{"end":{"character":14,"line":667},"start":{"character":5,"line":667}}},{"detail":"void ()","kind":12,"name":"renderHud","range":{"end":{"character":1,"line":690},"start":{"character":0,"line":686}},"selectionRange":{"end":{"character":14,"line":686},"start":{"character":5,"line":686}}},{"detail":"void ()","kind":12,"name":"updateHud","range":{"end":{"character":1,"line":699},"start":{"character":0,"line":693}},"selectionRange":{"end":{"character":14,"line":693},"start":{"character":5,"line":693}}},{"detail":"void ()","kind":12,"name":"renderStats","range":{"end":{"character":1,"line":707},"start":{"character":0,"line":702}},"selectionRange":{"end":{"character":16,"line":702},"start":{"character":5,"line":702}}},{"detail":"void ()","kind":12,"name":"loopIntro","range":{"end":{"character":1,"line":731},"start":{"character":0,"line":710}},"selectionRange":{"end":{"character":14,"line":710},"start":{"character":5,"line":710}}},{"detail":"void ()","kind":12,"name":"loopGamePlay","range":{"end":{"character":1,"line":880},"start":{"character":0,"line":733}},"selectionRange":{"end":{"character":17,"line":733},"start":{"character":5,"line":733}}},{"detail":"void ()","kind":12,"name":"loop","range":{"end":{"character":1,"line":901},"start":{"character":0,"line":882}},"selectionRange":{"end":{"character":9,"line":882},"start":{"character":5,"line":882}}}]}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70}}}
>>>
Content-Length: 60

{"jsonrpc":"2.0","id":"4","method":"shutdown","params":null}
<<<
Content-Length: 40

{"id":"4","jsonrpc":"2.0","result":null}
>>>
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

>>>
Content-Length: 3115

{"jsonrpc":"2.0","id":"1","method":"initialize","params":{"processId":11288,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"C:\\Users\\krys-\\AppData\\Local\\Temp\\arduino-language-server4122172524\\sketch","rootUri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch","initializationOptions":{},"capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"workspaceFolders":true,"configuration":true},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"contextSupport":true},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"isPreferredSupport":true},"codeLens":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"colorProvider":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"publishDiagnostics":{"relatedInformation":true,"tagSupport":{"valueSet":[1,2]}},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/krys-/OneDrive/Escritorio/doom-nano-master/doom-nano","name":"doom-nano"}]}}
<<<
Content-Length: 1905

{"id":"1","jsonrpc":"2.0","result":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"clangdInlayHintsProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"allCommitCharacters":[" ","\t","(",")","[","]","{","}","<",">",":",";",",","+","-","/","*","%","^","&","#","?",".","=","\"","'","|"],"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/","*"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"implementationProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":["declaration","deprecated","deduced","readonly","static","abstract","virtual","dependentName","defaultLibrary","usedAsMutableReference","functionScope","classScope","fileScope","globalScope"],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","interface","enum","enumMember","type","type","unknown","namespace","typeParameter","concept","type","macro","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",")","{","}","<",">",","]},"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeDefinitionProvider":true,"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 14.0.0 windows x86_64-pc-windows-msvc"}}}
>>>
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 28833

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","languageId":"cpp","version":1,"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}}}
<<<
Content-Length: 180

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/.clangd"}}
>>>
Content-Length: 19446

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.cpp","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\SSD1306.cpp\"\n/*!\n * @file Adafruit_SSD1306.cpp\n *\n * @mainpage Arduino library for monochrome OLEDs based on SSD1306 drivers.\n *\n * @section intro_sec Introduction\n *\n * This is documentation for Adafruit's SSD1306 library for monochrome\n * OLED displays: http://www.adafruit.com/category/63_98\n *\n * These displays use I2C or SPI to communicate. I2C requires 2 pins\n * (SCL+SDA) and optionally a RESET pin. SPI requires 4 pins (MOSI, SCK,\n * select, data/command) and optionally a reset pin. Hardware SPI or\n * 'bitbang' software SPI are both supported.\n *\n * Adafruit invests time and resources providing this open source code,\n * please support Adafruit and open-source hardware by purchasing\n * products from Adafruit!\n *\n * @section dependencies Dependencies\n *\n * This library depends on \u003ca href=\"https://github.com/adafruit/Adafruit-GFX-Library\"\u003e\n * Adafruit_GFX\u003c/a\u003e being present on your system. Please make sure you have\n * installed the latest version before using this library.\n *\n * @section author Author\n *\n * Written by Limor Fried/Ladyada for Adafruit Industries, with\n * contributions from the open source community.\n *\n * @section license License\n *\n * BSD license, all text above, and the splash screen included below,\n * must be included in any redistribution.\n *\n */\n\n#ifdef __AVR__\n #include \u003cavr/pgmspace.h\u003e\n#elif defined(ESP8266) || defined(ESP32)\n #include \u003cpgmspace.h\u003e\n#else\n #define pgm_read_byte(addr) \\\n  (*(const unsigned char *)(addr)) ///\u003c PROGMEM workaround for non-AVR\n#endif\n\n#if !defined(__ARM_ARCH) \u0026\u0026 !defined(ENERGIA) \u0026\u0026 !defined(ESP8266) \u0026\u0026 !defined(ESP32) \u0026\u0026 !defined(__arc__)\n #include \u003cutil/delay.h\u003e\n#endif\n\n#include \"SSD1306.h\"\n\n// SOME DEFINES AND STATIC VARIABLES USED INTERNALLY -----------------------\n\nconstexpr uint16_t WIRE_MAX = 342;\n\n#define ssd1306_swap(a, b) \\\n  (((a) ^= (b)), ((b) ^= (a)), ((a) ^= (b))) ///\u003c No-temp-var swap operation\n\n// LOW-LEVEL UTILS ---------------------------------------------------------\n\n// Issue single command to SSD1306, using I2C or hard/soft SPI as needed.\n// Because command calls are often grouped, SPI transaction and selection\n// must be started/ended in calling function for efficiency.\n// This is a private function, not exposed (see ssd1306_command() instead).\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::ssd1306_command1(uint8_t c) {\n  uint8_t cmd = 0x00; // Co = 0, D/C = 0\n  TWI_Start_Transceiver_With_Data(cmd, \u0026c, 1);\n}\n\n// Issue list of commands to SSD1306, same rules as above re: transactions.\n// This is a private function, not exposed.\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::ssd1306_commandList(const uint8_t *c, uint8_t n) {\n  uint8_t cmd = 0x00; // Co = 0, D/C = 0\n  uint8_t tmp[n];\n\n  uint8_t * tmpptr = static_cast\u003cuint8_t *\u003e(memcpy_P(tmp, c, n));\n  TWI_Start_Transceiver_With_Data(cmd, tmpptr, n);\n}\n\n// ALLOCATE \u0026 INIT DISPLAY -------------------------------------------------\n\n/*!\n    @brief  Allocate RAM for image buffer, initialize peripherals and pins.\n    @param  vcs\n            VCC selection. Pass SSD1306_SWITCHCAPVCC to generate the display\n            voltage (step up) from the 3.3V source, or SSD1306_EXTERNALVCC\n            otherwise. Most situations with Adafruit SSD1306 breakouts will\n            want SSD1306_SWITCHCAPVCC.\n    @param  addr\n            I2C address of corresponding SSD1306 display (or pass 0 to use\n            default of 0x3C for 128x32 display, 0x3D for all others).\n            SPI displays (hardware or software) do not use addresses, but\n            this argument is still required (pass 0 or any value really,\n            it will simply be ignored). Default if unspecified is 0.\n    @param  reset\n            If true, and if the reset pin passed to the constructor is\n            valid, a hard reset will be performed before initializing the\n            display. If using multiple SSD1306 displays on the same bus, and\n            if they all share the same reset pin, you should only pass true\n            on the first display being initialized, false on all others,\n            else the already-initialized displays would be reset. Default if\n            unspecified is true.\n    @param  periphBegin\n            If true, and if a hardware peripheral is being used (I2C or SPI,\n            but not software SPI), call that peripheral's begin() function,\n            else (false) it has already been done in one's sketch code.\n            Cases where false might be used include multiple displays or\n            other devices sharing a common bus, or situations on some\n            platforms where a nonstandard begin() function is available\n            (e.g. a TwoWire interface on non-default pins, as can be done\n            on the ESP8266 and perhaps others).\n    @return true on successful allocation/init, false otherwise.\n            Well-behaved code should check the return value before\n            proceeding.\n    @note   MUST call this function before any drawing or updates!\n*/\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nbool Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::begin(uint8_t vcs, uint8_t addr) {\n\n  clearDisplay();\n\n  vccstate = vcs;\n\n  // Setup pin directions\n    // If I2C address is unspecified, use default\n    // (0x3C for 32-pixel-tall displays, 0x3D for all others).\n    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);\n    // TwoWire begin() function might be already performed by the calling\n    // function if it has unusual circumstances (e.g. TWI variants that\n    // can accept different SDA/SCL pins, or if two SSD1306 instances\n    // with different addresses -- only a single begin() is needed).\n  TWI_Master_Initialise();\n\n  // Init sequence\n  static const uint8_t PROGMEM init1[] = {\n    SSD1306_DISPLAYOFF,                   // 0xAE\n    SSD1306_SETDISPLAYCLOCKDIV,           // 0xD5\n    0x80,                                 // the suggested ratio 0x80\n    SSD1306_SETMULTIPLEX };               // 0xA8\n  ssd1306_commandList(init1, sizeof(init1));\n  ssd1306_command1(HEIGHT - 1);\n\n  static const uint8_t PROGMEM init2[] = {\n    SSD1306_SETDISPLAYOFFSET,             // 0xD3\n    0x0,                                  // no offset\n    SSD1306_SETSTARTLINE | 0x0,           // line #0\n    SSD1306_CHARGEPUMP };                 // 0x8D\n  ssd1306_commandList(init2, sizeof(init2));\n\n  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);\n\n  static const uint8_t PROGMEM init3[] = {\n    SSD1306_MEMORYMODE,                   // 0x20\n    0x00,                                 // 0x0 act like ks0108\n    SSD1306_SEGREMAP | 0x1,\n    SSD1306_COMSCANDEC };\n  ssd1306_commandList(init3, sizeof(init3));\n\n  if((WIDTH == 128) \u0026\u0026 (HEIGHT == 32)) {\n    static const uint8_t PROGMEM init4a[] = {\n      SSD1306_SETCOMPINS,                 // 0xDA\n      0x02,\n      SSD1306_SETCONTRAST,                // 0x81\n      0x8F };\n    ssd1306_commandList(init4a, sizeof(init4a));\n  } else if((WIDTH == 128) \u0026\u0026 (HEIGHT == 64)) {\n    static const uint8_t PROGMEM init4b[] = {\n      SSD1306_SETCOMPINS,                 // 0xDA\n      0x12,\n      SSD1306_SETCONTRAST };              // 0x81\n    ssd1306_commandList(init4b, sizeof(init4b));\n    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);\n  } else if((WIDTH == 96) \u0026\u0026 (HEIGHT == 16)) {\n    static const uint8_t PROGMEM init4c[] = {\n      SSD1306_SETCOMPINS,                 // 0xDA\n      0x2,    // ada x12\n      SSD1306_SETCONTRAST };              // 0x81\n    ssd1306_commandList(init4c, sizeof(init4c));\n    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);\n  } else {\n    // Other screen varieties -- TBD\n  }\n\n  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9\n  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);\n  static const uint8_t PROGMEM init5[] = {\n    SSD1306_SETVCOMDETECT,               // 0xDB\n    0x40,\n    SSD1306_DISPLAYALLON_RESUME,         // 0xA4\n    SSD1306_NORMALDISPLAY,               // 0xA6\n    SSD1306_DEACTIVATE_SCROLL,\n    SSD1306_DISPLAYON };                 // Main screen turn on\n  ssd1306_commandList(init5, sizeof(init5));\n\n  return true; // Success\n}\n\n// DRAWING FUNCTIONS -------------------------------------------------------\n\n/*!\n    @brief  Set/clear/invert a single pixel. This is also invoked by the\n            Adafruit_GFX library in generating many higher-level graphics\n            primitives.\n    @param  x\n            Column of display -- 0 at left to (screen width - 1) at right.\n    @param  y\n            Row of display -- 0 at top to (screen height -1) at bottom.\n    @param  color\n            Pixel color, one of: SSD1306_BLACK, SSD1306_WHITE or SSD1306_INVERT.\n    @return None (void).\n    @note   Changes buffer contents only, no immediate effect on display.\n            Follow up with a call to display(), or with other graphics\n            commands as needed by one's own application.\n*/\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::drawPixel(int16_t x, int16_t y, uint16_t color) {\n  if((x \u003e= 0) \u0026\u0026 (x \u003c WIDTH) \u0026\u0026 (y \u003e= 0) \u0026\u0026 (y \u003c HEIGHT)) {\n    // Pixel is in-bounds. Rotate coordinates if needed.\n    switch(color) {\n     case SSD1306_WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 \u003c\u003c (y\u00267)); break;\n     case SSD1306_BLACK:   buffer[x + (y/8)*WIDTH] \u0026= ~(1 \u003c\u003c (y\u00267)); break;\n     case SSD1306_INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 \u003c\u003c (y\u00267)); break;\n    }\n  }\n}\n\n/*!\n    @brief  Clear contents of display buffer (set all pixels to off).\n    @return None (void).\n    @note   Changes buffer contents only, no immediate effect on display.\n            Follow up with a call to display(), or with other graphics\n            commands as needed by one's own application.\n*/\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::clearDisplay(void) {\n  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));\n}\n\n/*!\n    @brief  Draw a vertical line. This is also invoked by the Adafruit_GFX\n            library in generating many higher-level graphics primitives.\n    @param  x\n            Column of display -- 0 at left to (screen width -1) at right.\n    @param  y\n            Topmost row -- 0 at top to (screen height - 1) at bottom.\n    @param  h\n            Height of line, in pixels.\n    @param  color\n            Line color, one of: SSD1306_BLACK, SSD1306_WHITE or SSD1306_INVERT.\n    @return None (void).\n    @note   Changes buffer contents only, no immediate effect on display.\n            Follow up with a call to display(), or with other graphics\n            commands as needed by one's own application.\n*/\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::drawFastVLine(\n  int16_t x, int16_t y, int16_t h, uint16_t color) {\n  drawFastVLineInternal(x, y, h, color);\n}\n\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::drawFastVLineInternal(\n  int16_t x, int16_t __y, int16_t __h, uint16_t color) {\n\n  if((x \u003e= 0) \u0026\u0026 (x \u003c WIDTH)) { // X coord in bounds?\n    if(__y \u003c 0) { // Clip top\n      __h += __y;\n      __y = 0;\n    }\n    if((__y + __h) \u003e HEIGHT) { // Clip bottom\n      __h = (HEIGHT - __y);\n    }\n    if(__h \u003e 0) { // Proceed only if height is now positive\n      // this display doesn't need ints for coordinates,\n      // use local byte registers for faster juggling\n      uint8_t  y = __y, h = __h;\n      uint8_t *pBuf = \u0026buffer[(y / 8) * WIDTH + x];\n\n      // do the first partial byte, if necessary - this requires some masking\n      uint8_t mod = (y \u0026 7);\n      if(mod) {\n        // mask off the high n bits we want to set\n        mod = 8 - mod;\n        // note - lookup table results in a nearly 10% performance\n        // improvement in fill* functions\n        // uint8_t mask = ~(0xFF \u003e\u003e mod);\n        static const uint8_t PROGMEM premask[8] =\n          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };\n        uint8_t mask = pgm_read_byte(\u0026premask[mod]);\n        // adjust the mask if we're not going to reach the end of this byte\n        if(h \u003c mod) mask \u0026= (0XFF \u003e\u003e (mod - h));\n\n        switch(color) {\n         case SSD1306_WHITE:   *pBuf |=  mask; break;\n         case SSD1306_BLACK:   *pBuf \u0026= ~mask; break;\n         case SSD1306_INVERSE: *pBuf ^=  mask; break;\n        }\n        pBuf += WIDTH;\n      }\n\n      if(h \u003e= mod) { // More to go?\n        h -= mod;\n        // Write solid bytes while we can - effectively 8 rows at a time\n        if(h \u003e= 8) {\n          if(color == SSD1306_INVERSE) {\n            // separate copy of the code so we don't impact performance of\n            // black/white write version with an extra comparison per loop\n            do {\n              *pBuf ^= 0xFF;  // Invert byte\n              pBuf  += WIDTH; // Advance pointer 8 rows\n              h     -= 8;     // Subtract 8 rows from height\n            } while(h \u003e= 8);\n          } else {\n            // store a local value to work with\n            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;\n            do {\n              *pBuf = val;    // Set byte\n              pBuf += WIDTH;  // Advance pointer 8 rows\n              h    -= 8;      // Subtract 8 rows from height\n            } while(h \u003e= 8);\n          }\n        }\n\n        if(h) { // Do the final partial byte, if necessary\n          mod = h \u0026 7;\n          // this time we want to mask the low bits of the byte,\n          // vs the high bits we did above\n          // uint8_t mask = (1 \u003c\u003c mod) - 1;\n          // note - lookup table results in a nearly 10% performance\n          // improvement in fill* functions\n          static const uint8_t PROGMEM postmask[8] =\n            { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };\n          uint8_t mask = pgm_read_byte(\u0026postmask[mod]);\n          switch(color) {\n           case SSD1306_WHITE:   *pBuf |=  mask; break;\n           case SSD1306_BLACK:   *pBuf \u0026= ~mask; break;\n           case SSD1306_INVERSE: *pBuf ^=  mask; break;\n          }\n        }\n      }\n    } // endif positive height\n  } // endif x in bounds\n}\n\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::clearRect(uint8_t x, uint8_t y, uint8_t w , uint8_t h) {\n  for (int16_t i=x; i\u003cx+w; i++) {\n    drawFastVLineInternal(i, y, h, 0);\n  }\n}\n\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::drawBitmap(int16_t x, int16_t y,\n  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {\n\n    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte\n    uint8_t byte = 0;\n\n    for(int16_t j=0; j\u003ch; j++, y++) {\n        for(int16_t i=0; i\u003cw; i++) {\n            if(i \u0026 7) byte \u003c\u003c= 1;\n            else      byte   = pgm_read_byte(\u0026bitmap[j * byteWidth + i / 8]);\n            if(byte \u0026 0x80) drawPixel(x+i, y, color);\n        }\n    }\n}\n\n/*!\n    @brief  Return color of a single pixel in display buffer.\n    @param  x\n            Column of display -- 0 at left to (screen width - 1) at right.\n    @param  y\n            Row of display -- 0 at top to (screen height -1) at bottom.\n    @return true if pixel is set (usually SSD1306_WHITE, unless display invert mode\n            is enabled), false if clear (SSD1306_BLACK).\n    @note   Reads from buffer contents; may not reflect current contents of\n            screen if display() has not been called.\n*/\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nbool Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::getPixel(int16_t x, int16_t y) {\n  if((x \u003e= 0) \u0026\u0026 (x \u003c WIDTH) \u0026\u0026 (y \u003e= 0) \u0026\u0026 (y \u003c HEIGHT)) {\n    // Pixel is in-bounds. Rotate coordinates if needed.\n    return (buffer[x + (y / 8) * WIDTH] \u0026 (1 \u003c\u003c (y \u0026 7)));\n  }\n  return false; // Pixel out of bounds\n}\n\n/*!\n    @brief  Get base address of display buffer for direct reading or writing.\n    @return Pointer to an unsigned 8-bit array, column-major, columns padded\n            to full byte boundary if needed.\n*/\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nuint8_t *Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::getBuffer(void) {\n  return buffer;\n}\n\n// REFRESH DISPLAY ---------------------------------------------------------\n\n/*!\n    @brief  Push data currently in RAM to SSD1306 display.\n    @return None (void).\n    @note   Drawing operations are not visible until this function is\n            called. Call after each graphics command, or after a whole set\n            of graphics commands, as best needed by one's own application.\n*/\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::display(void) {\n  static const uint8_t PROGMEM dlist1[] = {\n    SSD1306_PAGEADDR,\n    0,                         // Page start address\n    0xFF,                      // Page end (not really, but works here)\n    SSD1306_COLUMNADDR,\n    0 };                       // Column start address\n  ssd1306_commandList(dlist1, sizeof(dlist1));\n  ssd1306_command1(WIDTH - 1); // Column end address\n\n  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);\n  uint8_t *ptr   = buffer;\n  uint8_t cmd = 0x40;\n  while(count \u003e= (WIRE_MAX)){\n    TWI_Start_Transceiver_With_Data(cmd, ptr, WIRE_MAX);\n    count -= (WIRE_MAX);\n    ptr += (WIRE_MAX);\n  }\n  if(count \u003e 0) {\n    TWI_Start_Transceiver_With_Data(cmd, ptr, count);\n  }\n}\n\n// OTHER HARDWARE SETTINGS -------------------------------------------------\n\n/*!\n    @brief  Enable or disable display invert mode (white-on-black vs\n            black-on-white).\n    @param  i\n            If true, switch to invert mode (black-on-white), else normal\n            mode (white-on-black).\n    @return None (void).\n    @note   This has an immediate effect on the display, no need to call the\n            display() function -- buffer contents are not changed, rather a\n            different pixel mode of the display hardware is used. When\n            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw white,\n            SSD1306_WHITE (value 1) will draw black.\n*/\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nvoid Adafruit_SSD1306\u003cWIDTH, HEIGHT\u003e::invertDisplay(bool i) {\n  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);\n}\n"}}}
<<<
Content-Length: 180

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/.clangd"}}Content-Length: 111

{"id":0,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":0,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}
>>>
Content-Length: 5721

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\SSD1306.h\"\n/*!\n * @file Adafruit_SSD1306.h\n *\n * This is part of for Adafruit's SSD1306 library for monochrome\n * OLED displays: http://www.adafruit.com/category/63_98\n *\n * These displays use I2C or SPI to communicate. I2C requires 2 pins\n * (SCL+SDA) and optionally a RESET pin. SPI requires 4 pins (MOSI, SCK,\n * select, data/command) and optionally a reset pin. Hardware SPI or\n * 'bitbang' software SPI are both supported.\n *\n * Adafruit invests time and resources providing this open source code,\n * please support Adafruit and open-source hardware by purchasing\n * products from Adafruit!\n *\n * Written by Limor Fried/Ladyada for Adafruit Industries, with\n * contributions from the open source community.\n *\n * BSD license, all text above, and the splash screen header file,\n * must be included in any redistribution.\n *\n */\n\n#ifndef _Adafruit_SSD1306_H_\n#define _Adafruit_SSD1306_H_\n\n#include \"TWI_Master.h\"\n#include \"string.h\"\n#include \"constants.h\"\n\n/// The following \"raw\" color names are kept for backwards client compatability\n/// They can be disabled by predefining this macro before including the Adafruit header\n/// client code will then need to be modified to use the scoped enum values directly\n#ifndef NO_ADAFRUIT_SSD1306_COLOR_COMPATIBILITY\n#define BLACK                     SSD1306_BLACK    ///\u003c Draw 'off' pixels\n#define WHITE                     SSD1306_WHITE    ///\u003c Draw 'on' pixels\n#define INVERSE                   SSD1306_INVERSE  ///\u003c Invert pixels\n#endif\n        /// fit into the SSD1306_ naming scheme\n#define SSD1306_BLACK               0    ///\u003c Draw 'off' pixels\n#define SSD1306_WHITE               1    ///\u003c Draw 'on' pixels\n#define SSD1306_INVERSE             2    ///\u003c Invert pixels\n\n#define SSD1306_MEMORYMODE          0x20 ///\u003c See datasheet\n#define SSD1306_COLUMNADDR          0x21 ///\u003c See datasheet\n#define SSD1306_PAGEADDR            0x22 ///\u003c See datasheet\n#define SSD1306_SETCONTRAST         0x81 ///\u003c See datasheet\n#define SSD1306_CHARGEPUMP          0x8D ///\u003c See datasheet\n#define SSD1306_SEGREMAP            0xA0 ///\u003c See datasheet\n#define SSD1306_DISPLAYALLON_RESUME 0xA4 ///\u003c See datasheet\n#define SSD1306_DISPLAYALLON        0xA5 ///\u003c Not currently used\n#define SSD1306_NORMALDISPLAY       0xA6 ///\u003c See datasheet\n#define SSD1306_INVERTDISPLAY       0xA7 ///\u003c See datasheet\n#define SSD1306_SETMULTIPLEX        0xA8 ///\u003c See datasheet\n#define SSD1306_DISPLAYOFF          0xAE ///\u003c See datasheet\n#define SSD1306_DISPLAYON           0xAF ///\u003c See datasheet\n#define SSD1306_COMSCANINC          0xC0 ///\u003c Not currently used\n#define SSD1306_COMSCANDEC          0xC8 ///\u003c See datasheet\n#define SSD1306_SETDISPLAYOFFSET    0xD3 ///\u003c See datasheet\n#define SSD1306_SETDISPLAYCLOCKDIV  0xD5 ///\u003c See datasheet\n#define SSD1306_SETPRECHARGE        0xD9 ///\u003c See datasheet\n#define SSD1306_SETCOMPINS          0xDA ///\u003c See datasheet\n#define SSD1306_SETVCOMDETECT       0xDB ///\u003c See datasheet\n\n#define SSD1306_SETLOWCOLUMN        0x00 ///\u003c Not currently used\n#define SSD1306_SETHIGHCOLUMN       0x10 ///\u003c Not currently used\n#define SSD1306_SETSTARTLINE        0x40 ///\u003c See datasheet\n\n#define SSD1306_EXTERNALVCC         0x01 ///\u003c External display voltage source\n#define SSD1306_SWITCHCAPVCC        0x02 ///\u003c Gen. display voltage from 3.3V\n\n#define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26 ///\u003c Init rt scroll\n#define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27 ///\u003c Init left scroll\n#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29 ///\u003c Init diag scroll\n#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A ///\u003c Init diag scroll\n#define SSD1306_DEACTIVATE_SCROLL                    0x2E ///\u003c Stop scroll\n#define SSD1306_ACTIVATE_SCROLL                      0x2F ///\u003c Start scroll\n#define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3 ///\u003c Set scroll range\n\n/*! \n    @brief  Class that stores state and functions for interacting with\n            SSD1306 OLED displays.\n*/\ntemplate \u003cuint8_t WIDTH, uint8_t HEIGHT\u003e\nclass Adafruit_SSD1306 {\n public:\n  Adafruit_SSD1306() = default;\n\n  ~Adafruit_SSD1306(void) = default;\n\n  bool      begin(uint8_t switchvcc=SSD1306_SWITCHCAPVCC,\n                 uint8_t i2caddr=0);\n  void         display(void);\n  void         clearDisplay(void);\n  void         invertDisplay(bool i);\n  void         drawPixel(int16_t x, int16_t y, uint16_t color);\n  void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);\n  bool      getPixel(int16_t x, int16_t y);\n  uint8_t     *getBuffer(void);\n  void clearRect(uint8_t, uint8_t, uint8_t, uint8_t);\n  void drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color);\n\n private:\n  void         drawFastVLineInternal(int16_t x, int16_t y, int16_t h,\n                 uint16_t color);\n  void         ssd1306_command1(uint8_t c);\n  void         ssd1306_commandList(const uint8_t *c, uint8_t n);\n\n  uint8_t     buffer[WIDTH * ((HEIGHT + 7) / 8)];\n  int8_t       i2caddr, vccstate, page_end;\n};\n\ntemplate class Adafruit_SSD1306\u003cSCREEN_WIDTH, SCREEN_HEIGHT\u003e;\n\n#endif // _Adafruit_SSD1306_H_\n"}}}
<<<
Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/32","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/32","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/32","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/32","percentage":3}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/32","percentage":3}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/32","percentage":3}}}
>>>
Content-Length: 13918

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.cpp","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\TWI_Master.cpp\"\n/**\n * \\file\n *\n * \\brief Application to generate sample driver to AVRs TWI module\n *\n * Copyright (C) 2014-2015 Atmel Corporation. All rights reserved.\n *\n * \\asf_license_start\n *\n * \\page License\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. The name of Atmel may not be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * 4. This software may only be redistributed and used in connection with an\n *    Atmel micro controller product.\n *\n * THIS SOFTWARE IS PROVIDED BY ATMEL \"AS IS\" AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE\n * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n * \\asf_license_stop\n *\n */\n/*\n * Support and FAQ: visit \u003ca href=\"http://www.atmel.com/design-support/\"\u003eAtmel Support\u003c/a\u003e\n */\n\n#include \u003cavr/io.h\u003e\n#include \u003cavr/interrupt.h\u003e\n#include \"TWI_Master.h\"\n\nstatic unsigned char TWI_buf[ TWI_BUFFER_SIZE ];    // Transceiver buffer\nstatic uint16_t TWI_msgSize;                   // Number of bytes to be transmitted.\nstatic unsigned char TWI_state = TWI_NO_STATE;      // State byte. Default set to TWI_NO_STATE.\nstatic unsigned char lastTransOK; \n\n/****************************************************************************\nCall this function to set up the TWI master to its initial standby state.\nRemember to enable interrupts from the main application after initializing the TWI.\n****************************************************************************/\nvoid TWI_Master_Initialise(void)\n{\n  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;                                  // Set bit rate register (Baud rate). Defined in header file.Driver presumes prescaler to be 00.                                \n  TWDR = 0xFF;                                      // Default content = SDA released.\n  TWCR = (1\u003c\u003cTWEN)|                                 // Enable TWI-interface and release TWI pins.\n         (0\u003c\u003cTWIE)|(0\u003c\u003cTWINT)|                      // Disable Interrupt.\n         (0\u003c\u003cTWEA)|(0\u003c\u003cTWSTA)|(0\u003c\u003cTWSTO)|           // No Signal requests.\n         (0\u003c\u003cTWWC);                                 //\n}    \n    \n/****************************************************************************\nCall this function to test if the TWI_ISR is busy transmitting.\n****************************************************************************/\nunsigned char TWI_Transceiver_Busy( void )\n{\n  return ( TWCR \u0026 (1\u003c\u003cTWIE) );                  // IF TWI Interrupt is enabled then the Transceiver is busy\n}\n\n/****************************************************************************\nCall this function to fetch the state information of the previous operation. The function will hold execution (loop)\nuntil the TWI_ISR has completed with the previous operation. If there was an error, then the function \nwill return the TWI State code. \n****************************************************************************/\nunsigned char TWI_Get_State_Info( void )\n{\n  while ( TWI_Transceiver_Busy() );             // Wait until TWI has completed the transmission.\n  return ( TWI_state );                         // Return error state.\n}\n\n/****************************************************************************\nCall this function to send a prepared message. The first byte must contain the slave address and the\nread/write bit. Consecutive bytes contain the data to be sent, or empty locations for data to be read\nfrom the slave. Also include how many bytes that should be sent/read including the address byte.\nThe function will hold execution (loop) until the TWI_ISR has completed with the previous operation,\nthen initialize the next operation and return.\n****************************************************************************/\nvoid TWI_Start_Transceiver_With_Data( uint8_t cmd, unsigned char *msg, uint16_t msgSize )\n{\n  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.\n\n  TWI_msgSize = msgSize + 2;                        // Number of data to transmit.\n  TWI_buf[0]  = TWI_ADDR;                         // Store slave address with R/W setting.\n  TWI_buf[1] = cmd;\n\n  for (uint16_t i = 2; msgSize--; i++ ) {\n    TWI_buf[i] = *msg++;\n  }\n\n  lastTransOK = 0;      \n  TWI_state         = TWI_NO_STATE ;\n  TWCR = (1\u003c\u003cTWEN)|                             // TWI Interface enabled.\n         (1\u003c\u003cTWIE)|(1\u003c\u003cTWINT)|                  // Enable TWI Interrupt and clear the flag.\n         (0\u003c\u003cTWEA)|(1\u003c\u003cTWSTA)|(0\u003c\u003cTWSTO)|       // Initiate a START condition.\n         (0\u003c\u003cTWWC);                             //\n}\n\n/****************************************************************************\nCall this function to resend the last message. The driver will reuse the data previously put in the transceiver buffers.\nThe function will hold execution (loop) until the TWI_ISR has completed with the previous operation,\nthen initialize the next operation and return.\n****************************************************************************/\nvoid TWI_Start_Transceiver( void )\n{\n  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.\n  lastTransOK = 0;      \n  TWI_state         = TWI_NO_STATE ;\n  TWCR = (1\u003c\u003cTWEN)|                             // TWI Interface enabled.\n         (1\u003c\u003cTWIE)|(1\u003c\u003cTWINT)|                  // Enable TWI Interrupt and clear the flag.\n         (0\u003c\u003cTWEA)|(1\u003c\u003cTWSTA)|(0\u003c\u003cTWSTO)|       // Initiate a START condition.\n         (0\u003c\u003cTWWC);                             //\n}\n\n/****************************************************************************\nCall this function to read out the requested data from the TWI transceiver buffer. I.e. first call\nTWI_Start_Transceiver to send a request for data to the slave. Then Run this function to collect the\ndata when they have arrived. Include a pointer to where to place the data and the number of bytes\nrequested (including the address field) in the function call. The function will hold execution (loop)\nuntil the TWI_ISR has completed with the previous operation, before reading out the data and returning.\nIf there was an error in the previous transmission the function will return the TWI error code.\n****************************************************************************/\nunsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )\n{\n  unsigned char i;\n\n  while ( TWI_Transceiver_Busy() );             // Wait until TWI is ready for next transmission.\n\n  if( lastTransOK )               // Last transmission competed successfully.              \n  {                                             \n    for ( i=0; i\u003cmsgSize; i++ )                 // Copy data from Transceiver buffer.\n    {\n      msg[ i ] = TWI_buf[ i ];\n    }\n  }\n  return lastTransOK;                                   \n}\n\n// ********** Interrupt Handlers ********** //\n/****************************************************************************\nThis function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;\nthat is whenever a TWI event has occurred. This function should not be called directly from the main\napplication.\n****************************************************************************/\nISR(TWI_vect)\n{\n  static uint16_t TWI_bufPtr;\n  \n  switch (TWSR)\n  {\n    case TWI_START:             // START has been transmitted  \n    case TWI_REP_START:         // Repeated START has been transmitted\n      TWI_bufPtr = 0;                                     // Set buffer pointer to the TWI Address location\n    case TWI_MTX_ADR_ACK:       // SLA+W has been transmitted and ACK received\n    case TWI_MTX_DATA_ACK:      // Data byte has been transmitted and ACK received\n      if (TWI_bufPtr \u003c TWI_msgSize)\n      {\n        TWDR = TWI_buf[TWI_bufPtr++];\n        TWCR = (1\u003c\u003cTWEN)|                                 // TWI Interface enabled\n               (1\u003c\u003cTWIE)|(1\u003c\u003cTWINT)|                      // Enable TWI Interrupt and clear the flag to send byte\n               (0\u003c\u003cTWEA)|(0\u003c\u003cTWSTA)|(0\u003c\u003cTWSTO)|           //\n               (0\u003c\u003cTWWC);                                 //  \n      }else                    // Send STOP after last byte\n      {\n        lastTransOK = TRUE;                 // Set status bits to completed successfully. \n        TWCR = (1\u003c\u003cTWEN)|                                 // TWI Interface enabled\n               (0\u003c\u003cTWIE)|(1\u003c\u003cTWINT)|                      // Disable TWI Interrupt and clear the flag\n               (0\u003c\u003cTWEA)|(0\u003c\u003cTWSTA)|(1\u003c\u003cTWSTO)|           // Initiate a STOP condition.\n               (0\u003c\u003cTWWC);                                 //\n      }\n      break;\n    case TWI_MRX_DATA_ACK:      // Data byte has been received and ACK transmitted\n      TWI_buf[TWI_bufPtr++] = TWDR;\n    case TWI_MRX_ADR_ACK:       // SLA+R has been transmitted and ACK received\n      if (TWI_bufPtr \u003c (TWI_msgSize-1) )                  // Detect the last byte to NACK it.\n      {\n        TWCR = (1\u003c\u003cTWEN)|                                 // TWI Interface enabled\n               (1\u003c\u003cTWIE)|(1\u003c\u003cTWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte\n               (1\u003c\u003cTWEA)|(0\u003c\u003cTWSTA)|(0\u003c\u003cTWSTO)|           // Send ACK after reception\n               (0\u003c\u003cTWWC);                                 //  \n      }else                    // Send NACK after next reception\n      {\n        TWCR = (1\u003c\u003cTWEN)|                                 // TWI Interface enabled\n               (1\u003c\u003cTWIE)|(1\u003c\u003cTWINT)|                      // Enable TWI Interrupt and clear the flag to read next byte\n               (0\u003c\u003cTWEA)|(0\u003c\u003cTWSTA)|(0\u003c\u003cTWSTO)|           // Send NACK after reception\n               (0\u003c\u003cTWWC);                                 // \n      }    \n      break; \n    case TWI_MRX_DATA_NACK:     // Data byte has been received and NACK transmitted\n      TWI_buf[TWI_bufPtr] = TWDR;\n      lastTransOK = TRUE;                 // Set status bits to completed successfully. \n      TWCR = (1\u003c\u003cTWEN)|                                 // TWI Interface enabled\n             (0\u003c\u003cTWIE)|(1\u003c\u003cTWINT)|                      // Disable TWI Interrupt and clear the flag\n             (0\u003c\u003cTWEA)|(0\u003c\u003cTWSTA)|(1\u003c\u003cTWSTO)|           // Initiate a STOP condition.\n             (0\u003c\u003cTWWC);                                 //\n      break;      \n    case TWI_ARB_LOST:          // Arbitration lost\n      TWCR = (1\u003c\u003cTWEN)|                                 // TWI Interface enabled\n             (1\u003c\u003cTWIE)|(1\u003c\u003cTWINT)|                      // Enable TWI Interrupt and clear the flag\n             (0\u003c\u003cTWEA)|(1\u003c\u003cTWSTA)|(0\u003c\u003cTWSTO)|           // Initiate a (RE)START condition.\n             (0\u003c\u003cTWWC);                                 //\n      break;\n    case TWI_MTX_ADR_NACK:      // SLA+W has been transmitted and NACK received\n    case TWI_MRX_ADR_NACK:      // SLA+R has been transmitted and NACK received    \n    case TWI_MTX_DATA_NACK:     // Data byte has been transmitted and NACK received\n    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition\n    default:     \n      TWI_state = TWSR;                                 // Store TWSR and automatically sets clears noErrors bit.\n                                                        // Reset TWI Interface\n      TWCR = (1\u003c\u003cTWEN)|                                 // Enable TWI-interface and release TWI pins\n             (0\u003c\u003cTWIE)|(0\u003c\u003cTWINT)|                      // Disable Interrupt\n             (0\u003c\u003cTWEA)|(0\u003c\u003cTWSTA)|(0\u003c\u003cTWSTO)|           // No Signal requests\n             (0\u003c\u003cTWWC);                                 //\n  }\n}\n"}}}Content-Length: 6954

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\TWI_Master.h\"\n/**\n * \\file\n *\n * \\brief Application to generate sample driver to AVRs TWI module\n *\n * Copyright (C) 2014-2015 Atmel Corporation. All rights reserved.\n *\n * \\asf_license_start\n *\n * \\page License\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. The name of Atmel may not be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * 4. This software may only be redistributed and used in connection with an\n *    Atmel micro controller product.\n *\n * THIS SOFTWARE IS PROVIDED BY ATMEL \"AS IS\" AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE\n * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n * \\asf_license_stop\n *\n */\n/*\n * Support and FAQ: visit \u003ca href=\"http://www.atmel.com/design-support/\"\u003eAtmel Support\u003c/a\u003e\n */\n\n/****************************************************************************\n  TWI Status/Control register definitions\n****************************************************************************/\nconstexpr uint16_t TWI_BUFFER_SIZE = 344;   // Set this to the largest message size that will be sent including address byte.\n#define TWI_FREQ 400000UL\n#define TWI_ADDR 0x78 // 0x3C \u003c\u003c 1\n\n/****************************************************************************\n  Function definitions\n****************************************************************************/\nvoid TWI_Master_Initialise( void );\nunsigned char TWI_Transceiver_Busy( void );\nunsigned char TWI_Get_State_Info( void );\nvoid TWI_Start_Transceiver_With_Data( uint8_t cmd, unsigned char * , uint16_t);\nvoid TWI_Start_Transceiver( void );\nunsigned char TWI_Get_Data_From_Transceiver( unsigned char *, unsigned char );\n\n/****************************************************************************\n  Bit and byte definitions\n****************************************************************************/\n#define TWI_READ_BIT  0       // Bit position for R/W bit in \"address byte\".\n#define TWI_ADR_BITS  1       // Bit position for LSB of the slave address bits in the init byte.\n\n#define TRUE          1\n#define FALSE         0\n\n/****************************************************************************\n  TWI State codes\n****************************************************************************/\n// General TWI Master status codes                      \n#define TWI_START                  0x08  // START has been transmitted  \n#define TWI_REP_START              0x10  // Repeated START has been transmitted\n#define TWI_ARB_LOST               0x38  // Arbitration lost\n\n// TWI Master Transmitter status codes                      \n#define TWI_MTX_ADR_ACK            0x18  // SLA+W has been transmitted and ACK received\n#define TWI_MTX_ADR_NACK           0x20  // SLA+W has been transmitted and NACK received \n#define TWI_MTX_DATA_ACK           0x28  // Data byte has been transmitted and ACK received\n#define TWI_MTX_DATA_NACK          0x30  // Data byte has been transmitted and NACK received \n\n// TWI Master Receiver status codes  \n#define TWI_MRX_ADR_ACK            0x40  // SLA+R has been transmitted and ACK received\n#define TWI_MRX_ADR_NACK           0x48  // SLA+R has been transmitted and NACK received\n#define TWI_MRX_DATA_ACK           0x50  // Data byte has been received and ACK transmitted\n#define TWI_MRX_DATA_NACK          0x58  // Data byte has been received and NACK transmitted\n\n// TWI Slave Transmitter status codes\n#define TWI_STX_ADR_ACK            0xA8  // Own SLA+R has been received; ACK has been returned\n#define TWI_STX_ADR_ACK_M_ARB_LOST 0xB0  // Arbitration lost in SLA+R/W as Master; own SLA+R has been received; ACK has been returned\n#define TWI_STX_DATA_ACK           0xB8  // Data byte in TWDR has been transmitted; ACK has been received\n#define TWI_STX_DATA_NACK          0xC0  // Data byte in TWDR has been transmitted; NOT ACK has been received\n#define TWI_STX_DATA_ACK_LAST_BYTE 0xC8  // Last data byte in TWDR has been transmitted (TWEA = �0�); ACK has been received\n\n// TWI Slave Receiver status codes\n#define TWI_SRX_ADR_ACK            0x60  // Own SLA+W has been received ACK has been returned\n#define TWI_SRX_ADR_ACK_M_ARB_LOST 0x68  // Arbitration lost in SLA+R/W as Master; own SLA+W has been received; ACK has been returned\n#define TWI_SRX_GEN_ACK            0x70  // General call address has been received; ACK has been returned\n#define TWI_SRX_GEN_ACK_M_ARB_LOST 0x78  // Arbitration lost in SLA+R/W as Master; General call address has been received; ACK has been returned\n#define TWI_SRX_ADR_DATA_ACK       0x80  // Previously addressed with own SLA+W; data has been received; ACK has been returned\n#define TWI_SRX_ADR_DATA_NACK      0x88  // Previously addressed with own SLA+W; data has been received; NOT ACK has been returned\n#define TWI_SRX_GEN_DATA_ACK       0x90  // Previously addressed with general call; data has been received; ACK has been returned\n#define TWI_SRX_GEN_DATA_NACK      0x98  // Previously addressed with general call; data has been received; NOT ACK has been returned\n#define TWI_SRX_STOP_RESTART       0xA0  // A STOP condition or repeated START condition has been received while still addressed as Slave\n\n// TWI Miscellaneous status codes\n#define TWI_NO_STATE               0xF8  // No relevant state information available; TWINT = �0�\n#define TWI_BUS_ERROR              0x00  // Bus error due to an illegal START or STOP condition\n"}}}Content-Length: 3537

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\constants.h\"\n#ifndef _constants_h\n#define _constants_h\n\n// Key pinout\n#define USE_INPUT_PULLUP\n#define K_LEFT              6\n#define K_RIGHT             7\n#define K_UP                8\n#define K_DOWN              3\n#define K_FIRE              10\n\n// SNES Controller\n// uncomment following line to enable snes controller support\n// #define SNES_CONTROLLER\nconstexpr uint8_t DATA_CLOCK   = 11;\nconstexpr uint8_t DATA_LATCH   = 12;\nconstexpr uint8_t DATA_SERIAL  = 13;\n\n// Sound\nconstexpr uint8_t SOUND_PIN   = 9; // do not change, belongs to used timer\n\n// GFX settings\n#define OPTIMIZE_SSD1306                // Optimizations for SSD1366 displays\n\n#define FRAME_TIME          66.666666   // Desired time per frame in ms (66.666666 is ~15 fps)\n#define RES_DIVIDER         2           // Higher values will result in lower horizontal resolution when rasterize and lower process and memory usage\n                                        // Lower will require more process and memory, but looks nicer\n#define Z_RES_DIVIDER       2           // Zbuffer resolution divider. We sacrifice resolution to save memory\n#define DISTANCE_MULTIPLIER 20          // Distances are stored as uint8_t, multiplying the distance we can obtain more precision taking care\n                                        // of keep numbers inside the type range. Max is 256 / MAX_RENDER_DEPTH\n#define MAX_RENDER_DEPTH    12\n#define MAX_SPRITE_DEPTH    8\n\n#define ZBUFFER_SIZE        SCREEN_WIDTH / Z_RES_DIVIDER\n\n// Level \n#define LEVEL_WIDTH_BASE    6\n#define LEVEL_WIDTH         (1 \u003c\u003c LEVEL_WIDTH_BASE)\n#define LEVEL_HEIGHT        57\n#define LEVEL_SIZE          LEVEL_WIDTH / 2 * LEVEL_HEIGHT\n\n// scenes\n#define INTRO                 0\n#define GAME_PLAY             1\n\n// Game\n#define GUN_TARGET_POS        18\n#define GUN_SHOT_POS          GUN_TARGET_POS + 4\n\n#define ROT_SPEED             .12\n#define MOV_SPEED             .2\n#define MOV_SPEED_INV         5           // 1 / MOV_SPEED\n\n#define JOGGING_SPEED         .005\n#define ENEMY_SPEED           .02\n#define FIREBALL_SPEED        .2\n#define FIREBALL_ANGLES       45          // Num of angles per PI\n\n#define MAX_ENTITIES          10          // Max num of active entities\n#define MAX_STATIC_ENTITIES   28          // Max num of entities in sleep mode\n\n#define MAX_ENTITY_DISTANCE   200         // * DISTANCE_MULTIPLIER\n#define MAX_ENEMY_VIEW        80          // * DISTANCE_MULTIPLIER\n#define ITEM_COLLIDER_DIST    6           // * DISTANCE_MULTIPLIER\n#define ENEMY_COLLIDER_DIST   4           // * DISTANCE_MULTIPLIER\n#define FIREBALL_COLLIDER_DIST 2          // * DISTANCE_MULTIPLIER\n#define ENEMY_MELEE_DIST      6           // * DISTANCE_MULTIPLIER\n#define WALL_COLLIDER_DIST    .2\n\n#define ENEMY_MELEE_DAMAGE    8\n#define ENEMY_FIREBALL_DAMAGE 20\n#define GUN_MAX_DAMAGE        15\n\n// display\nconstexpr uint8_t SCREEN_WIDTH     =  128;\nconstexpr uint8_t SCREEN_HEIGHT    =  64;\nconstexpr uint8_t HALF_WIDTH       =  SCREEN_WIDTH/2;\nconstexpr uint8_t RENDER_HEIGHT    =  56;         // raycaster working height (the rest is for the hud)\nconstexpr uint8_t HALF_HEIGHT      =  SCREEN_HEIGHT/2;\n\n#endif\n"}}}Content-Length: 303

{"jsonrpc":"2.0","id":"2","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"},"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 206

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.cpp","version":1}}Content-Length: 203

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.cpp","version":1}}Content-Length: 853

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":45,"line":60},"start":{"character":38,"line":60}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":77,"line":60},"start":{"character":69,"line":60}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h","version":1}}Content-Length: 8281

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":23,"line":27},"start":{"character":9,"line":27}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":19,"line":28},"start":{"character":9,"line":28}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":45},"start":{"character":9,"line":45}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/string.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":84},"start":{"character":10,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":84},"start":{"character":25,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":25,"line":91},"start":{"character":18,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":92},"start":{"character":17,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":32,"line":96},"start":{"character":25,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":43,"line":96},"start":{"character":36,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":55,"line":96},"start":{"character":47,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":97},"start":{"character":21,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":97},"start":{"character":32,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":50,"line":97},"start":{"character":43,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":62,"line":97},"start":{"character":54,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":98},"start":{"character":21,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":98},"start":{"character":32,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":99},"start":{"character":2,"line":99}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":100},"start":{"character":17,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":33,"line":100},"start":{"character":26,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":42,"line":100},"start":{"character":35,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":100},"start":{"character":44,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":25,"line":101},"start":{"character":18,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":36,"line":101},"start":{"character":29,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":53,"line":101},"start":{"character":46,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":71,"line":101},"start":{"character":64,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":82,"line":101},"start":{"character":75,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":94,"line":101},"start":{"character":86,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":44,"line":104},"start":{"character":37,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":55,"line":104},"start":{"character":48,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":66,"line":104},"start":{"character":59,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":25,"line":105},"start":{"character":17,"line":105}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":106},"start":{"character":32,"line":106}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":48,"line":107},"start":{"character":41,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":60,"line":107},"start":{"character":53,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":109},"start":{"character":2,"line":109}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":110},"start":{"character":2,"line":110}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h","version":1}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/32","percentage":6}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/32","percentage":6}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/32","percentage":9}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/32","percentage":9}}}Content-Length: 2146

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":1}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/32","percentage":12}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/32","percentage":12}}}Content-Length: 3244

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":51,"line":506},"start":{"character":50,"line":506}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":51,"line":508},"start":{"character":50,"line":508}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":44,"line":519},"start":{"character":33,"line":519}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":64,"line":519},"start":{"character":51,"line":519}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":44,"line":520},"start":{"character":33,"line":520}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":64,"line":520},"start":{"character":51,"line":520}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":42,"line":576},"start":{"character":29,"line":576}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":48,"line":624},"start":{"character":30,"line":624}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":49,"line":625},"start":{"character":30,"line":625}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":638},"start":{"character":30,"line":638}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":652},"start":{"character":30,"line":652}},"relatedInformation":[],"severity":2,"source":"clang-tidy"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":1}}Content-Length: 38

{"id":"2","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"jsonrpc":"2.0","id":"3","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.cpp"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/32","percentage":15}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/32","percentage":15}}}Content-Length: 38

{"id":"3","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 295

{"jsonrpc":"2.0","id":"4","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/32","percentage":18}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/32","percentage":18}}}Content-Length: 38

{"id":"4","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 300

{"jsonrpc":"2.0","id":"5","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.cpp"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 38

{"id":"5","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 298

{"jsonrpc":"2.0","id":"6","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 38

{"id":"6","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 297

{"jsonrpc":"2.0","id":"7","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 38

{"id":"7","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 204

{"jsonrpc":"2.0","id":"8","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/32","percentage":21}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/32","percentage":21}}}Content-Length: 12577

{"id":"8","jsonrpc":"2.0","result":[{"detail":"uint8_t","kind":13,"name":"scene","range":{"end":{"character":21,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":13,"line":16},"start":{"character":8,"line":16}}},{"detail":"bool","kind":13,"name":"exit_scene","range":{"end":{"character":23,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":15,"line":17},"start":{"character":5,"line":17}}},{"detail":"bool","kind":13,"name":"invert_screen","range":{"end":{"character":26,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":18,"line":18},"start":{"character":5,"line":18}}},{"detail":"uint8_t","kind":13,"name":"flash_screen","range":{"end":{"character":24,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":20,"line":19},"start":{"character":8,"line":19}}},{"detail":"Player","kind":13,"name":"player","range":{"end":{"character":13,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":13,"line":23},"start":{"character":7,"line":23}}},{"detail":"Entity[10]","kind":13,"name":"entity","range":{"end":{"character":27,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":13,"line":24},"start":{"character":7,"line":24}}},{"detail":"StaticEntity[28]","kind":13,"name":"static_entity","range":{"end":{"character":47,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":26,"line":25},"start":{"character":13,"line":25}}},{"detail":"uint8_t","kind":13,"name":"num_entities","range":{"end":{"character":24,"line":26},"start":{"character":0,"line":26}},"selectionRange":{"end":{"character":20,"line":26},"start":{"character":8,"line":26}}},{"detail":"uint8_t","kind":13,"name":"num_static_entities","range":{"end":{"character":31,"line":27},"start":{"character":0,"line":27}},"selectionRange":{"end":{"character":27,"line":27},"start":{"character":8,"line":27}}},{"detail":"void ()","kind":12,"name":"setup","range":{"end":{"character":16,"line":30},"start":{"character":0,"line":30}},"selectionRange":{"end":{"character":10,"line":30},"start":{"character":5,"line":30}}},{"detail":"void (uint8_t)","kind":12,"name":"jumpTo","range":{"end":{"character":33,"line":32},"start":{"character":0,"line":32}},"selectionRange":{"end":{"character":11,"line":32},"start":{"character":5,"line":32}}},{"detail":"void (const uint8_t *)","kind":12,"name":"initializeLevel","range":{"end":{"character":43,"line":34},"start":{"character":0,"line":34}},"selectionRange":{"end":{"character":20,"line":34},"start":{"character":5,"line":34}}},{"detail":"uint8_t (const uint8_t *, uint8_t, uint8_t)","kind":12,"name":"getBlockAt","range":{"end":{"character":63,"line":36},"start":{"character":0,"line":36}},"selectionRange":{"end":{"character":18,"line":36},"start":{"character":8,"line":36}}},{"detail":"bool (UID)","kind":12,"name":"isSpawned","range":{"end":{"character":23,"line":38},"start":{"character":0,"line":38}},"selectionRange":{"end":{"character":14,"line":38},"start":{"character":5,"line":38}}},{"detail":"bool (UID)","kind":12,"name":"isStatic","range":{"end":{"character":22,"line":40},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":13,"line":40},"start":{"character":5,"line":40}}},{"detail":"void (uint8_t, uint8_t, uint8_t)","kind":12,"name":"spawnEntity","range":{"end":{"character":52,"line":42},"start":{"character":0,"line":42}},"selectionRange":{"end":{"character":16,"line":42},"start":{"character":5,"line":42}}},{"detail":"void (double, double)","kind":12,"name":"spawnFireball","range":{"end":{"character":38,"line":44},"start":{"character":0,"line":44}},"selectionRange":{"end":{"character":18,"line":44},"start":{"character":5,"line":44}}},{"detail":"void (UID)","kind":12,"name":"removeStaticEntity","range":{"end":{"character":32,"line":46},"start":{"character":0,"line":46}},"selectionRange":{"end":{"character":23,"line":46},"start":{"character":5,"line":46}}},{"detail":"void ()","kind":12,"name":"fire","range":{"end":{"character":11,"line":48},"start":{"character":0,"line":48}},"selectionRange":{"end":{"character":9,"line":48},"start":{"character":5,"line":48}}},{"detail":"void (const uint8_t *)","kind":12,"name":"updateEntities","range":{"end":{"character":42,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":19,"line":50},"start":{"character":5,"line":50}}},{"detail":"void (const uint8_t *, double)","kind":12,"name":"renderMap","range":{"end":{"character":57,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":14,"line":52},"start":{"character":5,"line":52}}},{"detail":"uint8_t ()","kind":12,"name":"sortEntities","range":{"end":{"character":22,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":20,"line":54},"start":{"character":8,"line":54}}},{"detail":"Coords (Coords *)","kind":12,"name":"translateIntoView","range":{"end":{"character":37,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":24,"line":56},"start":{"character":7,"line":56}}},{"detail":"void (double)","kind":12,"name":"renderEntities","range":{"end":{"character":39,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":19,"line":58},"start":{"character":5,"line":58}}},{"detail":"void (uint8_t, double)","kind":12,"name":"renderGun","range":{"end":{"character":54,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":14,"line":60},"start":{"character":5,"line":60}}},{"detail":"void ()","kind":12,"name":"renderHud","range":{"end":{"character":16,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":14,"line":62},"start":{"character":5,"line":62}}},{"detail":"void ()","kind":12,"name":"updateHud","range":{"end":{"character":16,"line":64},"start":{"character":0,"line":64}},"selectionRange":{"end":{"character":14,"line":64},"start":{"character":5,"line":64}}},{"detail":"void ()","kind":12,"name":"renderStats","range":{"end":{"character":18,"line":66},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":16,"line":66},"start":{"character":5,"line":66}}},{"detail":"void ()","kind":12,"name":"loopIntro","range":{"end":{"character":16,"line":68},"start":{"character":0,"line":68}},"selectionRange":{"end":{"character":14,"line":68},"start":{"character":5,"line":68}}},{"detail":"void ()","kind":12,"name":"loopGamePlay","range":{"end":{"character":19,"line":70},"start":{"character":0,"line":70}},"selectionRange":{"end":{"character":17,"line":70},"start":{"character":5,"line":70}}},{"detail":"void ()","kind":12,"name":"loop","range":{"end":{"character":15,"line":72},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":9,"line":72},"start":{"character":5,"line":72}}},{"detail":"void ()","kind":12,"name":"setup","range":{"end":{"character":1,"line":78},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":10,"line":74},"start":{"character":5,"line":74}}},{"detail":"void (uint8_t)","kind":12,"name":"jumpTo","range":{"end":{"character":1,"line":84},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":11,"line":81},"start":{"character":5,"line":81}}},{"detail":"void (const uint8_t *)","kind":12,"name":"initializeLevel","range":{"end":{"character":1,"line":100},"start":{"character":0,"line":87}},"selectionRange":{"end":{"character":20,"line":87},"start":{"character":5,"line":87}}},{"detail":"uint8_t (const uint8_t *, uint8_t, uint8_t)","kind":12,"name":"getBlockAt","range":{"end":{"character":1,"line":111},"start":{"character":0,"line":102}},"selectionRange":{"end":{"character":18,"line":102},"start":{"character":8,"line":102}}},{"detail":"bool (UID)","kind":12,"name":"isSpawned","range":{"end":{"character":1,"line":119},"start":{"character":0,"line":113}},"selectionRange":{"end":{"character":14,"line":113},"start":{"character":5,"line":113}}},{"detail":"bool (UID)","kind":12,"name":"isStatic","range":{"end":{"character":1,"line":127},"start":{"character":0,"line":121}},"selectionRange":{"end":{"character":13,"line":121},"start":{"character":5,"line":121}}},{"detail":"void (uint8_t, uint8_t, uint8_t)","kind":12,"name":"spawnEntity","range":{"end":{"character":1,"line":153},"start":{"character":0,"line":129}},"selectionRange":{"end":{"character":16,"line":129},"start":{"character":5,"line":129}}},{"detail":"void (double, double)","kind":12,"name":"spawnFireball","range":{"end":{"character":1,"line":170},"start":{"character":0,"line":155}},"selectionRange":{"end":{"character":18,"line":155},"start":{"character":5,"line":155}}},{"detail":"void (UID, bool)","kind":12,"name":"removeEntity","range":{"end":{"character":1,"line":190},"start":{"character":0,"line":172}},"selectionRange":{"end":{"character":17,"line":172},"start":{"character":5,"line":172}}},{"detail":"void (UID)","kind":12,"name":"removeStaticEntity","range":{"end":{"character":1,"line":209},"start":{"character":0,"line":192}},"selectionRange":{"end":{"character":23,"line":192},"start":{"character":5,"line":192}}},{"detail":"UID (const uint8_t *, Coords *, double, double, bool)","kind":12,"name":"detectCollision","range":{"end":{"character":1,"line":250},"start":{"character":0,"line":211}},"selectionRange":{"end":{"character":19,"line":211},"start":{"character":4,"line":211}}},{"detail":"void ()","kind":12,"name":"fire","range":{"end":{"character":1,"line":272},"start":{"character":0,"line":253}},"selectionRange":{"end":{"character":9,"line":253},"start":{"character":5,"line":253}}},{"detail":"UID (const uint8_t *, Coords *, double, double, bool)","kind":12,"name":"updatePosition","range":{"end":{"character":1,"line":283},"start":{"character":0,"line":275}},"selectionRange":{"end":{"character":18,"line":275},"start":{"character":4,"line":275}}},{"detail":"void (const uint8_t *)","kind":12,"name":"updateEntities","range":{"end":{"character":1,"line":427},"start":{"character":0,"line":285}},"selectionRange":{"end":{"character":19,"line":285},"start":{"character":5,"line":285}}},{"detail":"void (const uint8_t *, double)","kind":12,"name":"renderMap","range":{"end":{"character":1,"line":525},"start":{"character":0,"line":430}},"selectionRange":{"end":{"character":14,"line":430},"start":{"character":5,"line":430}}},{"detail":"uint8_t ()","kind":12,"name":"sortEntities","range":{"end":{"character":1,"line":547},"start":{"character":0,"line":528}},"selectionRange":{"end":{"character":20,"line":528},"start":{"character":8,"line":528}}},{"detail":"Coords (Coords *)","kind":12,"name":"translateIntoView","range":{"end":{"character":1,"line":560},"start":{"character":0,"line":549}},"selectionRange":{"end":{"character":24,"line":549},"start":{"character":7,"line":549}}},{"detail":"void (double)","kind":12,"name":"renderEntities","range":{"end":{"character":1,"line":665},"start":{"character":0,"line":562}},"selectionRange":{"end":{"character":19,"line":562},"start":{"character":5,"line":562}}},{"detail":"void (uint8_t, double)","kind":12,"name":"renderGun","range":{"end":{"character":1,"line":683},"start":{"character":0,"line":667}},"selectionRange":{"end":{"character":14,"line":667},"start":{"character":5,"line":667}}},{"detail":"void ()","kind":12,"name":"renderHud","range":{"end":{"character":1,"line":690},"start":{"character":0,"line":686}},"selectionRange":{"end":{"character":14,"line":686},"start":{"character":5,"line":686}}},{"detail":"void ()","kind":12,"name":"updateHud","range":{"end":{"character":1,"line":699},"start":{"character":0,"line":693}},"selectionRange":{"end":{"character":14,"line":693},"start":{"character":5,"line":693}}},{"detail":"void ()","kind":12,"name":"renderStats","range":{"end":{"character":1,"line":707},"start":{"character":0,"line":702}},"selectionRange":{"end":{"character":16,"line":702},"start":{"character":5,"line":702}}},{"detail":"void ()","kind":12,"name":"loopIntro","range":{"end":{"character":1,"line":731},"start":{"character":0,"line":710}},"selectionRange":{"end":{"character":14,"line":710},"start":{"character":5,"line":710}}},{"detail":"void ()","kind":12,"name":"loopGamePlay","range":{"end":{"character":1,"line":880},"start":{"character":0,"line":733}},"selectionRange":{"end":{"character":17,"line":733},"start":{"character":5,"line":733}}},{"detail":"void ()","kind":12,"name":"loop","range":{"end":{"character":1,"line":901},"start":{"character":0,"line":882}},"selectionRange":{"end":{"character":9,"line":882},"start":{"character":5,"line":882}}}]}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/32","percentage":25}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/32","percentage":25}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/32","percentage":28}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/32","percentage":28}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/32","percentage":31}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/32","percentage":31}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/32","percentage":34}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/32","percentage":34}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/32","percentage":37}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/32","percentage":37}}}
>>>
Content-Length: 8766

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\display.h\"\n/* \ntodo: Moving this to CPP looks like it takes more Flash storage. Figure out why.\n*/\n#include \"SSD1306.h\"\n#include \"constants.h\"\n\n// Reads a char from an F() string\n#define F_char(ifsh, ch)    pgm_read_byte(reinterpret_cast\u003cPGM_P\u003e(ifsh) + ch)\n\n// This is slightly faster than bitRead (also bits are read from left to right)\nconst static uint8_t PROGMEM bit_mask[8] = { 128, 64, 32, 16, 8, 4, 2, 1 };\n#define read_bit(b, n)      b \u0026 pgm_read_byte(bit_mask + n) ? 1 : 0\n\nvoid setupDisplay();\nvoid fps();\nbool getGradientPixel(uint8_t x, uint8_t y, uint8_t i);\nvoid fadeScreen(uint8_t intensity, bool color);\nvoid drawByte(uint8_t x, uint8_t y, uint8_t b);\nuint8_t getByte(uint8_t x, uint8_t y);\nvoid drawPixel(int8_t x, int8_t y, bool color, bool raycasterViewport);\nvoid drawVLine(uint8_t x, int8_t start_y, int8_t end_y, uint8_t intensity);\nvoid drawSprite(int8_t x, int8_t y, const uint8_t bitmap[], const uint8_t mask[], int16_t w, int16_t h, uint8_t sprite, double distance);\nvoid drawChar(int8_t x, int8_t y, char ch);\nvoid drawText(int8_t x, int8_t y, char *txt, uint8_t space = 1);\nvoid drawText(int8_t x, int8_t y, const __FlashStringHelper txt, uint8_t space = 1);\n\n// Initialize screen. Following line is for OLED 128x64 connected by I2C\nAdafruit_SSD1306\u003cSCREEN_WIDTH, SCREEN_HEIGHT\u003e display;\n\n// FPS control\ndouble delta = 1;\nuint32_t lastFrameTime = 0;\n\n#ifdef OPTIMIZE_SSD1306\n// Optimizations for SSD1306 handles buffer directly\nuint8_t *display_buf;\n#endif\n\n// We don't handle more than MAX_RENDER_DEPTH depth, so we can safety store\n// z values in a byte with 1 decimal and save some memory,\nuint8_t zbuffer[ZBUFFER_SIZE];\n\nvoid setupDisplay() {\n  // Setup display\n  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally\n  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Fixed from 0x3D\n    Serial.println(F(\"SSD1306 allocation failed\"));\n    while (1); // Don't proceed, loop forever\n  }\n\n#ifdef OPTIMIZE_SSD1306\n  display_buf = display.getBuffer();\n#endif\n\n  // initialize z buffer\n  memset(zbuffer, 0xFF, ZBUFFER_SIZE);\n}\n\n// Adds a delay to limit play to specified fps\n// Calculates also delta to keep movement consistent in lower framerates\nvoid fps() {\n  while (millis() - lastFrameTime \u003c FRAME_TIME);\n  delta = (double)(millis() - lastFrameTime) / FRAME_TIME;\n  lastFrameTime = millis();\n}\n\ndouble getActualFps() {\n  return 1000 / (FRAME_TIME * delta);\n}\n\n// Faster way to render vertical bits\nvoid drawByte(uint8_t x, uint8_t y, uint8_t b) {\n#ifdef OPTIMIZE_SSD1306\n  display_buf[(y / 8)*SCREEN_WIDTH + x] = b;\n#endif\n}\n\nboolean getGradientPixel(uint8_t x, uint8_t y, uint8_t i) {\n  if (i == 0) return 0;\n  if (i \u003e= GRADIENT_COUNT - 1) return 1;\n\n  uint8_t index = max(0, min(GRADIENT_COUNT - 1, i)) * GRADIENT_WIDTH * GRADIENT_HEIGHT // gradient index\n                  + y * GRADIENT_WIDTH % (GRADIENT_WIDTH * GRADIENT_HEIGHT)             // y byte offset\n                  + x / GRADIENT_HEIGHT % GRADIENT_WIDTH;                               // x byte offset\n\n  // return the bit based on x\n  return read_bit(pgm_read_byte(gradient + index), x % 8);\n}\n\nvoid fadeScreen(uint8_t intensity, bool color = 0) {\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x++) {\n    for (uint8_t y = 0; y \u003c SCREEN_HEIGHT; y++) {\n      if (getGradientPixel(x, y, intensity)) \n        drawPixel(x, y, color, false);\n    }\n  }\n}\n\n// Faster drawPixel than display.drawPixel.\n// Avoids some checks to make it faster.\nvoid drawPixel(int8_t x, int8_t y, bool color, bool raycasterViewport = false) {\n  // prevent write out of screen buffer\n  if (x \u003c 0 || x \u003e= SCREEN_WIDTH || y \u003c 0 || y \u003e= (raycasterViewport ? RENDER_HEIGHT : SCREEN_HEIGHT)) {\n    return;\n  }\n\n#ifdef OPTIMIZE_SSD1306\n  if (color) {\n    // white\n    display_buf[x + (y / 8)*SCREEN_WIDTH] |= (1 \u003c\u003c (y \u0026 7));\n  } else {\n    // black\n    display_buf[x + (y / 8)*SCREEN_WIDTH] \u0026= ~(1 \u003c\u003c (y \u0026 7));\n  }\n#else\n  display.drawPixel(x, y, color);\n#endif\n}\n\n// For raycaster only\n// Custom draw Vertical lines that fills with a pattern to simulate\n// different brightness. Affected by RES_DIVIDER\nvoid drawVLine(uint8_t x, int8_t start_y, int8_t end_y, uint8_t intensity) {\n  int8_t y;\n  int8_t lower_y = max(min(start_y, end_y), 0);\n  int8_t higher_y = min(max(start_y, end_y), RENDER_HEIGHT - 1);\n  uint8_t c;\n\n#ifdef OPTIMIZE_SSD1306\n  uint8_t bp;\n  uint8_t b;\n  for (c = 0; c \u003c RES_DIVIDER; c++) {\n    y = lower_y;\n    b = 0;\n    while (y \u003c= higher_y) {\n      bp = y % 8;\n      b = b | getGradientPixel(x + c, y, intensity) \u003c\u003c bp;\n\n      if (bp == 7) {\n        // write the whole byte\n        drawByte(x + c, y, b);\n        b = 0;\n      }\n\n      y++;\n    }\n\n    // draw last byte\n    if (bp != 7) {\n      drawByte(x + c, y - 1, b);\n    }\n  }\n#else\n  y = lower_y;\n  while (y \u003c= higher_y) {\n    for (c = 0; c \u003c RES_DIVIDER; c++) {\n      // bypass black pixels\n      if (getGradientPixel(x + c, y, intensity)) {\n        drawPixel(x + c, y, 1, true);\n      }\n    }\n\n    y++;\n  }\n#endif\n}\n\n// Custom drawBitmap method with scale support, mask, zindex and pattern filling\nvoid drawSprite(\n  int8_t x, int8_t y,\n  const uint8_t bitmap[], const uint8_t mask[],\n  int16_t w, int16_t h,\n  uint8_t sprite,\n  double distance\n) {\n  uint8_t tw = (double) w / distance;\n  uint8_t th = (double) h / distance;\n  uint8_t byte_width = w / 8;\n  uint8_t pixel_size = max(1, 1.0 / distance);\n  uint16_t sprite_offset = byte_width * h * sprite;\n\n  bool pixel;\n  bool maskPixel;\n\n  // Don't draw the whole sprite if the anchor is hidden by z buffer\n  // Not checked per pixel for performance reasons\n  if (zbuffer[min(max(x, 0), ZBUFFER_SIZE - 1) / Z_RES_DIVIDER] \u003c distance * DISTANCE_MULTIPLIER) {\n    return;\n  }\n\n  for (uint8_t ty = 0; ty \u003c th; ty += pixel_size) {\n    // Don't draw out of screen\n    if (y + ty \u003c 0 || y + ty \u003e= RENDER_HEIGHT) {\n      continue;\n    }\n\n    uint8_t sy = ty * distance; // The y from the sprite\n\n    for (uint8_t tx = 0; tx \u003c tw; tx += pixel_size) {\n      uint8_t sx = tx * distance; // The x from the sprite\n      uint16_t byte_offset = sprite_offset + sy * byte_width + sx / 8;\n\n      // Don't draw out of screen\n      if (x + tx \u003c 0 || x + tx \u003e= SCREEN_WIDTH) {\n        continue;\n      }\n\n      maskPixel = read_bit(pgm_read_byte(mask + byte_offset), sx % 8);\n\n      if (maskPixel) {\n        pixel = read_bit(pgm_read_byte(bitmap + byte_offset), sx % 8);\n        for (uint8_t ox = 0; ox \u003c pixel_size; ox++) {\n          for (uint8_t oy = 0; oy \u003c pixel_size; oy++) {\n            drawPixel(x + tx + ox, y + ty + oy, pixel, true);\n          }\n        }\n      }\n    }\n  }\n}\n\n// Draw a single character.\n// Made for a custom font with some useful sprites. Char size 4 x 6\n// Uses less memory than display.print()\nvoid drawChar(int8_t x, int8_t y, char ch) {\n  uint8_t c = 0;\n  uint8_t n;\n  uint8_t bOffset;\n  uint8_t b;\n  uint8_t line = 0;\n\n  // Find the character\n  while (CHAR_MAP[c] != ch \u0026\u0026 CHAR_MAP[c] != '\\0') c++;\n\n  bOffset = c / 2;\n  for (; line \u003c CHAR_HEIGHT; line++) {\n    b = pgm_read_byte(bmp_font + (line * bmp_font_width + bOffset));\n    for (n = 0; n \u003c CHAR_WIDTH; n++)\n      if (read_bit(b, (c % 2 == 0 ? 0 : 4) + n))\n        drawPixel(x + n, y + line, 1, false);\n  }\n}\n\n// Draw a string\nvoid drawText(int8_t x, int8_t y, char *txt, uint8_t space) {\n  uint8_t pos = x;\n  uint8_t i = 0;\n  char ch;\n  while ((ch = txt[i]) != '\\0') {\n    drawChar(pos, y, ch);\n    i++;\n    pos += CHAR_WIDTH + space;\n\n    // shortcut on end of screen\n    if (pos \u003e SCREEN_WIDTH) return;\n  }\n}\n\n// Draw a F() string\nvoid drawText(int8_t x, int8_t y, const __FlashStringHelper *txt_p, uint8_t space = 1) {\n  uint8_t pos = x;\n  uint8_t i = 0;\n  char ch;\n  while (pos \u003c SCREEN_WIDTH \u0026\u0026 (ch = F_char(txt_p, i)) != '\\0') {\n    drawChar(pos, y, ch);\n    i++;\n    pos += CHAR_WIDTH + space;\n  }\n}\n\n// Draw an integer (3 digit max!)\nvoid drawText(uint8_t x, uint8_t y, uint8_t num) {\n  char buf[4]; // 3 char + \\0\n  itoa(num, buf, 10);\n  drawText(x, y, buf);\n}\n"}}}Content-Length: 295

{"jsonrpc":"2.0","id":"9","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/32","percentage":40}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/32","percentage":40}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/32","percentage":43}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/32","percentage":43}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/32","percentage":46}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/32","percentage":46}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/32","percentage":50}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/32","percentage":50}}}Content-Length: 28505

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":20,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":11},"start":{"character":13,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":37,"line":11},"start":{"character":29,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":29,"line":16},"start":{"character":22,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":40,"line":16},"start":{"character":33,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":16},"start":{"character":44,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":17},"start":{"character":16,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":18},"start":{"character":14,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":18},"start":{"character":25,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":18},"start":{"character":36,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":19},"start":{"character":0,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":19},"start":{"character":16,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":34,"line":19},"start":{"character":27,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":20},"start":{"character":15,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":20},"start":{"character":25,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":21},"start":{"character":15,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":21},"start":{"character":26,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":21},"start":{"character":42,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":21},"start":{"character":56,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":22,"line":22},"start":{"character":16,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":22},"start":{"character":26,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":49,"line":22},"start":{"character":42,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":73,"line":22},"start":{"character":66,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":89,"line":22},"start":{"character":82,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":100,"line":22},"start":{"character":93,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":111,"line":22},"start":{"character":104,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":23},"start":{"character":14,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":23},"start":{"character":24,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":24},"start":{"character":24,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":24},"start":{"character":45,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":25},"start":{"character":14,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":25},"start":{"character":24,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":25},"start":{"character":40,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":72,"line":25},"start":{"character":65,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint32_t' (fix available)","range":{"end":{"character":8,"line":32},"start":{"character":0,"line":32}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":36},"start":{"character":0,"line":36}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":41},"start":{"character":0,"line":41}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":10,"line":47},"start":{"character":4,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'F'","range":{"end":{"character":20,"line":47},"start":{"character":19,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":15,"line":62},"start":{"character":9,"line":62}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":25,"line":63},"start":{"character":19,"line":63}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":24,"line":64},"start":{"character":18,"line":64}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":72},"start":{"character":14,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":72},"start":{"character":25,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":72},"start":{"character":36,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'boolean'","range":{"end":{"character":7,"line":78},"start":{"character":0,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":78},"start":{"character":25,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":78},"start":{"character":36,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":54,"line":78},"start":{"character":47,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":25,"line":80},"start":{"character":11,"line":80}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":82},"start":{"character":2,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":43,"line":82},"start":{"character":29,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":69,"line":82},"start":{"character":55,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":87,"line":82},"start":{"character":72,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":38,"line":83},"start":{"character":24,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":83},"start":{"character":42,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":74,"line":83},"start":{"character":59,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":39,"line":84},"start":{"character":24,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":84},"start":{"character":42,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'gradient'","range":{"end":{"character":40,"line":87},"start":{"character":32,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":17,"line":87},"start":{"character":9,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":90},"start":{"character":16,"line":90}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":91},"start":{"character":7,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":92},"start":{"character":9,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":101},"start":{"character":15,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":101},"start":{"character":25,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":123},"start":{"character":15,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":123},"start":{"character":26,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":123},"start":{"character":42,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":123},"start":{"character":56,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":124},"start":{"character":2,"line":124}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":125},"start":{"character":2,"line":125}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":126},"start":{"character":2,"line":126}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":127},"start":{"character":2,"line":127}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":130},"start":{"character":2,"line":130}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":131},"start":{"character":2,"line":131}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":170},"start":{"character":2,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":18,"line":170},"start":{"character":12,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":15,"line":171},"start":{"character":8,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":171},"start":{"character":32,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":9,"line":172},"start":{"character":2,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":20,"line":172},"start":{"character":13,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":173},"start":{"character":2,"line":173}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":176},"start":{"character":2,"line":176}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":177},"start":{"character":2,"line":177}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":178},"start":{"character":2,"line":178}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":179},"start":{"character":2,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'max'","range":{"end":{"character":26,"line":179},"start":{"character":23,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":10,"line":180},"start":{"character":2,"line":180}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":191},"start":{"character":7,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":11,"line":197},"start":{"character":4,"line":197}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":199},"start":{"character":9,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":13,"line":200},"start":{"character":6,"line":200}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":14,"line":201},"start":{"character":6,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":26,"line":208},"start":{"character":18,"line":208}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":24,"line":211},"start":{"character":16,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":212},"start":{"character":13,"line":212}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":213},"start":{"character":15,"line":213}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":225},"start":{"character":14,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":225},"start":{"character":24,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":226},"start":{"character":2,"line":226}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":227},"start":{"character":2,"line":227}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":228},"start":{"character":2,"line":228}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":229},"start":{"character":2,"line":229}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":230},"start":{"character":2,"line":230}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":17,"line":233},"start":{"character":9,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":38,"line":233},"start":{"character":30,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_HEIGHT'","range":{"end":{"character":27,"line":236},"start":{"character":16,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font'","range":{"end":{"character":30,"line":237},"start":{"character":22,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font_width'","range":{"end":{"character":55,"line":237},"start":{"character":41,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":30,"line":238},"start":{"character":20,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":18,"line":239},"start":{"character":10,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":245},"start":{"character":14,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":245},"start":{"character":24,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":245},"start":{"character":45,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":246},"start":{"character":2,"line":246}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":247},"start":{"character":2,"line":247}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":252},"start":{"character":11,"line":252}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":260},"start":{"character":14,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":260},"start":{"character":24,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":260},"start":{"character":40,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":75,"line":260},"start":{"character":68,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":261},"start":{"character":2,"line":261}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":262},"start":{"character":2,"line":262}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'PGM_P'","range":{"end":{"character":43,"line":264},"start":{"character":37,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":267},"start":{"character":11,"line":267}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":272},"start":{"character":14,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":272},"start":{"character":25,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":272},"start":{"character":36,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h","version":1}}Content-Length: 38

{"id":"9","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 861

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.cpp","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\entities.cpp\"\n#include \u003cstdint.h\u003e\n#include \"entities.h\"\n#include \"types.h\"\n#include \"constants.h\"\n\nEntity create_entity(uint8_t type, uint8_t x,  uint8_t y, uint8_t initialState, uint8_t initialHealth) {\n  UID uid = create_uid(type, x, y);\n  Coords pos = create_coords((double) x + .5, (double) y + .5);\n  Entity new_entity = { uid, pos, initialState, initialHealth, 0, 0 };\n  return new_entity;\n}\n\nStaticEntity crate_static_entity(UID uid, uint8_t x,  uint8_t y, bool active) {\n  return { uid, x, y, active };\n}"}}}Content-Length: 299

{"jsonrpc":"2.0","id":"10","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.cpp"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/32","percentage":53}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/32","percentage":53}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/32","percentage":56}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/32","percentage":56}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/32","percentage":59}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/32","percentage":59}}}Content-Length: 204

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.cpp","version":1}}Content-Length: 39

{"id":"10","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 1815

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\entities.h\"\n#ifndef _entities_h\n#define _entities_h\n\n#include \"types.h\"\n\n// Shortcuts\n#define create_player(x, y)   { \\\n    create_coords((double) x + 0.5, (double) y + 0.5), \\\n    create_coords(1, 0), \\\n    create_coords(0, -0.66), \\\n    0, \\\n    100,  \\\n  }\n\n#define create_enemy(x, y)            create_entity(E_ENEMY, x, y, S_STAND, 100)\n#define create_medikit(x, y)          create_entity(E_MEDIKIT, x, y, S_STAND, 0)\n#define create_key(x, y)              create_entity(E_KEY, x, y, S_STAND, 0)\n#define create_fireball(x, y, dir)    create_entity(E_FIREBALL, x, y, S_STAND, dir)\n\n// entity statuses\n#define S_STAND               0\n#define S_ALERT               1\n#define S_FIRING              2\n#define S_MELEE               3\n#define S_HIT                 4\n#define S_DEAD                5\n#define S_HIDDEN              6\n#define S_OPEN                7\n#define S_CLOSE               8\n\nstruct Player { \n  Coords pos;\n  Coords dir;\n  Coords plane;\n  double velocity;\n  uint8_t health;\n  uint8_t keys;  \n};\n\nstruct Entity {\n  UID uid;\n  Coords pos;\n  uint8_t state;\n  uint8_t health;     // angle for fireballs\n  uint8_t distance;\n  uint8_t timer;\n};\n\nstruct StaticEntity  { \n  UID uid;\n  uint8_t x;\n  uint8_t y;\n  bool active;\n};\n\nEntity create_entity(uint8_t type, uint8_t x,  uint8_t y, uint8_t initialState, uint8_t initialHealth);\nStaticEntity create_static_entity(UID uid, uint8_t x,  uint8_t y, bool active);\n\n#endif\n\n"}}}Content-Length: 297

{"jsonrpc":"2.0","id":"11","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/32","percentage":62}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/32","percentage":62}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/32","percentage":65}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/32","percentage":65}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/32","percentage":68}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/32","percentage":68}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/32","percentage":71}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/32","percentage":71}}}Content-Length: 3863

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":18,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":16,"line":19},"start":{"character":8,"line":19}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":36},"start":{"character":2,"line":36}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":37},"start":{"character":2,"line":37}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":43},"start":{"character":2,"line":43}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":44},"start":{"character":2,"line":44}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":45},"start":{"character":2,"line":45}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":46},"start":{"character":2,"line":46}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":51},"start":{"character":2,"line":51}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":52},"start":{"character":2,"line":52}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":28,"line":56},"start":{"character":21,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":42,"line":56},"start":{"character":35,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":54,"line":56},"start":{"character":47,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":65,"line":56},"start":{"character":58,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":87,"line":56},"start":{"character":80,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":50,"line":57},"start":{"character":43,"line":57}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":62,"line":57},"start":{"character":55,"line":57}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.h","version":1}}Content-Length: 39

{"id":"11","jsonrpc":"2.0","result":[]}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/32","percentage":75}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/32","percentage":75}}}
>>>
Content-Length: 2402

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.cpp","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\input.cpp\"\n#include \u003cArduino.h\u003e\n#include \"input.h\"\n#include \"constants.h\"\n\n#ifdef USE_INPUT_PULLUP\n  #define INPUT_MODE INPUT_PULLUP\n  #define INPUT_STATE LOW\n#else\n  #define INPUT_MODE INPUT\n  #define INPUT_STATE HIGH\n#endif\n\n#ifdef SNES_CONTROLLER\nuint16_t buttons = 0;\n\nvoid input_setup() {\n  // Set DATA_CLOCK normally HIGH\n  pinMode(DATA_CLOCK, OUTPUT);\n  digitalWrite(DATA_CLOCK, HIGH);\n\n  // Set DATA_LATCH normally LOW\n  pinMode(DATA_LATCH, OUTPUT);\n  digitalWrite(DATA_LATCH, LOW);\n\n  // Set DATA_SERIAL normally HIGH\n  pinMode(DATA_SERIAL, OUTPUT);\n  digitalWrite(DATA_SERIAL, HIGH);\n  pinMode(DATA_SERIAL, INPUT);\n}\n\nvoid getControllerData(void){\n  // Latch for 12us\n  digitalWrite(DATA_LATCH, HIGH);\n  delayMicroseconds(12);\n  digitalWrite(DATA_LATCH, LOW);\n  delayMicroseconds(6);\n  buttons = 0;\n  // Retrieve button presses from shift register by pulling the clock high for 6us\n  for(uint8_t i = 0; i \u003c 16; ++i){\n    digitalWrite(DATA_CLOCK, LOW);\n    delayMicroseconds(6);\n    buttons |= !digitalRead(DATA_SERIAL) \u003c\u003c i;\n    digitalWrite(DATA_CLOCK, HIGH);\n    delayMicroseconds(6);\n  }\n}\n\nbool input_left() {\n  return buttons \u0026 LEFT;\n};\n\nbool input_right() {\n  return buttons \u0026 RIGHT;\n};\n\nbool input_up() {\n  return buttons \u0026 UP;\n};\n\nbool input_down() {\n  return buttons \u0026 DOWN;\n};\n\nbool input_fire() {\n  return buttons \u0026 Y;\n};\n\nbool input_start() {\n  return buttons \u0026 START;\n}\n#else\n\nvoid input_setup() {\n  pinMode(K_LEFT, INPUT_MODE);\n  pinMode(K_RIGHT, INPUT_MODE);\n  pinMode(K_UP, INPUT_MODE);\n  pinMode(K_DOWN, INPUT_MODE);\n  pinMode(K_FIRE, INPUT_MODE);\n}\n\nbool input_left() {\n  return digitalRead(K_LEFT) == INPUT_STATE;\n};\n\nbool input_right() {\n  return digitalRead(K_RIGHT) == INPUT_STATE;\n};\n\nbool input_up() {\n  return digitalRead(K_UP) == INPUT_STATE;\n};\n\nbool input_down() {\n  return digitalRead(K_DOWN) == INPUT_STATE;\n};\n\nbool input_fire() {\n  return digitalRead(K_FIRE) == INPUT_STATE;\n};\n#endif\n"}}}Content-Length: 296

{"jsonrpc":"2.0","id":"12","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.cpp"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/32","percentage":78}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/32","percentage":78}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/32","percentage":81}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/32","percentage":81}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"27/32","percentage":84}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"27/32","percentage":84}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"28/32","percentage":87}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"28/32","percentage":87}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"29/32","percentage":90}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"30/32","percentage":93}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"31/32","percentage":96}}}Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.cpp","version":1}}Content-Length: 39

{"id":"12","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 800

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\input.h\"\n#ifndef _input_h\n#define _input_h\n\nenum BUTTONS {\n  B = 0x0001,\n  Y = 0x0002,\n  SELECT = 0x0004,\n  START = 0x0008,\n  UP = 0x0010,\n  DOWN = 0x0020,\n  LEFT = 0x0040,\n  RIGHT = 0x0080,\n  A = 0x0100,\n  X = 0x0200,\n  LB = 0x0400,\n  RB = 0x0800\n};\n\nvoid input_setup();\nbool input_up();\nbool input_down();\nbool input_left();\nbool input_right();\nbool input_fire();\n\n#ifdef SNES_CONTROLLER\nbool input_start();\nvoid getControllerData(void);\n#endif\n\n#endif\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":"13","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 199

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h","version":1}}Content-Length: 39

{"id":"13","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 15678

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/level.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\level.h\"\n#ifndef _level_h\n#define _level_h\n\n#include \u003cavr/pgmspace.h\u003e\n#include \"constants.h\"\n\n/*\n  Based on E1M1 from Wolfenstein 3D\n\n  ################################################################\n  #############################...........########################\n  ######....###################........E..########################\n  ######....########..........#...........#...####################\n  ######.....#######..........L.....E.......M.####################\n  ######.....#######..........#...........#...####################\n  ##################...########...........########################\n  ######.........###...########...........########################\n  ######.........###...#############D#############################\n  ######.........#......E##########...############################\n  ######....E....D...E...##########...############################\n  ######.........#.......##########...############################\n  ######....E....##################...############################\n  #...##.........##################...############################\n  #.K.######D######################...############################\n  #...#####...###############...#E.....K##########################\n  ##D######...###############..####...############################\n  #...#####...###############..####...############################\n  #...#...#...###############..####...############################\n  #...D...#...#####################...############################\n  #...#...#...#####################...############################\n  #...######D#######################L#############################\n  #.E.##.........#################.....#################........##\n  #...##.........############...............############........##\n  #...##...E.....############...............############........##\n  #....#.........############...E.......E....#.........#........##\n  #....L....K....############................D....E....D....E...##\n  #....#.........############................#.........#........##\n  #...##.....E...############...............####....####........##\n  #...##.........############...............#####..#####.....M..##\n  #...##.........#################.....##########..#####........##\n  #...######L#######################D############..###############\n  #...#####...#####################...###########..###############\n  #E.E#####...#####################...###########..###############\n  #...#...#...#####################.E.###########..###############\n  #...D.M.#...#####################...###########..###############\n  #...#...#...#####################...###########..###.#.#.#.#####\n  #...#####...#####################...###########...#.........####\n  #...#####...#####################...###########...D....E..K.####\n  #................##......########...###########...#.........####\n  #....E........E...L...E...X######...################.#.#.#.#####\n  #................##......########...############################\n  #################################...############################\n  #############..#..#..#############L#############################\n  ###########....#..#.########....#...#....#######################\n  #############.....##########.P..D...D....#######################\n  ############################....#...#....#######################\n  ##############..#################...############################\n  ##############..############....#...#....#######################\n  ############################....D...D....#######################\n  ############################....#...#....#######################\n  #################################...############################\n  ############################.............#######################\n  ############################..........EK.#######################\n  ############################.............#######################\n  ################################################################\n*/\n\n/*\n   Same map above built from some regexp replacements using the legend above.\n   Using this way lets me use only 4 bit to store each block\n*/\nconst static uint8_t sto_level_1[LEVEL_SIZE] PROGMEM = {\n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x4F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x02, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x20, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x90, 0xFF, 0xFF, 0xFF, 0x4F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xF2, 0x00, 0x00, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0x4F, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0x40, 0x00, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0x4F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x20, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, \n  0xF0, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, \n  0xF0, 0x00, 0xFF, 0x00, 0x02, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, \n  0xF0, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFF, \n  0xF0, 0x00, 0x05, 0x00, 0x00, 0x90, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0xFF, \n  0xF0, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFF, \n  0xF0, 0x00, 0xFF, 0x00, 0x00, 0x02, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, \n  0xF0, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x08, 0x00, 0xFF, \n  0xF0, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, \n  0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x4F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF2, 0x02, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x20, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0x40, 0x80, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xF0, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, \n  0xF0, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, \n  0xF0, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x40, 0x00, 0x02, 0x00, 0x90, 0xFF, 0xFF, \n  0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, \n  0xF0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x50, 0x00, 0x20, 0x00, 0x7F, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, \n  0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x0F, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x40, 0x00, 0x40, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \n};\n\n#endif\n\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":"14","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/level.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 674

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/level.h","version":1}}Content-Length: 39

{"id":"14","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 4405

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sound.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\sound.h\"\n/*\n   For infos how this works see \n   http://fabiensanglard.net/gebbwolf3d_v2.1.pdf chapter 4.9.5\n   and\n   http://www.shikadi.net/moddingwiki/Inverse_Frequency_Sound_format\n   and\n   http://www.shikadi.net/moddingwiki/AudioT_Format\n*/\n\n#ifndef _sound_h\n#define _sound_h\n\n#include \u003cavr/pgmspace.h\u003e\n#include \"constants.h\"\n\nconstexpr uint8_t GET_KEY_SND_LEN = 90;\nconstexpr uint8_t SHOOT_SND_LEN = 27;\nconstexpr uint8_t shoot_snd[] PROGMEM = { 0x10, 0x10 , 0x10 , 0x6e , 0x2a , 0x20 , 0x28 , 0x28 , 0x9b , 0x28 , 0x20 , 0x20 , 0x21 , 0x57 , 0x20 , 0x20 , 0x20 , 0x67 , 0x20 , 0x20 , 0x29 , 0x20 , 0x73 , 0x20 , 0x20 , 0x20 , 0x89};\nconstexpr uint8_t get_key_snd[] PROGMEM = {0x24, 0x24, 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x24 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x20 , 0x20 , 0x20 , 0x20 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x20 , 0x20 , 0x20 , 0x20 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x37 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 , 0x19 };\nconstexpr uint8_t HIT_WALL_SND_LEN = 8;\nconstexpr uint8_t hit_wall_snd[] PROGMEM = { 0x83 , 0x83 , 0x82 , 0x8e , 0x8a , 0x89 , 0x86 , 0x84};\nconstexpr uint8_t WALK1_SND_LEN = 3;\nconstexpr uint8_t walk1_snd[] PROGMEM = { 0x8f, 0x8e, 0x8e};\nconstexpr uint8_t WALK2_SND_LEN = 3;\nconstexpr uint8_t walk2_snd[] PROGMEM = { 0x84, 0x87, 0x84};\nconstexpr uint8_t MEDKIT_SND_LEN = 69;\nconstexpr uint8_t medkit_snd[] PROGMEM = {0x55 , 0x20 , 0x3a , 0x3a , 0x3a , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x33 , 0x33 , 0x33 , 0x33 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x26 , 0x26 , 0x26 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x16 , 0x16 , 0x16 , 0x16 , 0x16 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x16 , 0x16 , 0x16 , 0x16 , 0x16 , 0x16 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x15 , 0x15 , 0x15 , 0x15 , 0x15 , 0x15, 0x15};\n\nuint8_t idx = 0;\nbool sound = false;\nuint16_t snd_ptr = 0;\nuint8_t snd_len = 0;\n\nvoid sound_init() {\n  pinMode(SOUND_PIN, OUTPUT);\n\n  TCCR2A = (1 \u003c\u003c WGM21); // CTC\n  TCCR2B = (1 \u003c\u003c CS22) | (1 \u003c\u003c CS21) | (1 \u003c\u003c CS20); // prescaler 1024\n  OCR2A = 112 - 1; // 16000000 / 1024 / 112 -\u003e 139,5 Hz\n  TIMSK2 = (1 \u003c\u003c OCIE2A);\n}\n\nvoid playSound(const uint8_t* snd, uint8_t len) {\n  snd_ptr = reinterpret_cast\u003cuint16_t\u003e(snd);\n  snd_len = len;\n  sound = true;\n}\n\n// Set the frequency that we will get on pin OCR1A\nvoid setFrequency(uint16_t freq) {\n  uint32_t requiredDivisor = (F_CPU / 2) / (uint32_t)freq;\n\n  uint16_t prescalerVal;\n  uint8_t prescalerBits;\n  if (requiredDivisor \u003c 65536UL) {\n    prescalerVal = 1;\n    prescalerBits = 1; // prescaler 1\n  } else if (requiredDivisor \u003c 8 * 65536UL) {\n    prescalerVal = 8;\n    prescalerBits = 2; // prescaler 8\n  } else if (requiredDivisor \u003c 64 * 65536UL) {\n    prescalerVal = 64;\n    prescalerBits = 3; // prescaler 64\n  } else if (requiredDivisor \u003c 256 * 65536UL) {\n    prescalerVal = 256;\n    prescalerBits = 4; // prescaler 256\n  } else {\n    prescalerVal = 1024;\n    prescalerBits = 5; // prescaler 1024\n  }\n\n  uint16_t top = ((requiredDivisor + (prescalerVal / 2)) / prescalerVal) - 1;\n  TCCR1A = _BV(COM1A0) /*+ _BV(COM1B0)*/;\n  TCCR1B = (1 \u003c\u003c WGM12) | prescalerBits;  // CTC\n  TCCR1C = _BV(FOC1A);\n  OCR1A = top;\n}\n\nvoid off() {\n  TCCR1A = 0;\n}\n\nISR(TIMER2_COMPA_vect) {\n  if (sound) {\n    if (idx++ \u003c snd_len) {\n      uint16_t freq = 1192030 / (60 * (uint16_t) pgm_read_byte(snd_ptr + idx)); // 1193181\n      setFrequency(freq);\n    } else {\n      idx = 0;\n      off();\n      sound = false;\n    }\n  }\n}\n\n#endif\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":"15","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sound.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 1556

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":13},"start":{"character":9,"line":13}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUTPUT' (fix available)","range":{"end":{"character":27,"line":35},"start":{"character":21,"line":35}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'ISR' (fix available)","range":{"end":{"character":3,"line":83},"start":{"character":0,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":4,"line":84},"start":{"character":2,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":96},"start":{"character":0,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sound.h","version":1}}Content-Length: 39

{"id":"15","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 19648

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sprites.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\sprites.h\"\n#ifndef _sprites_h\n#define _sprites_h\n\n#include \u003cavr/pgmspace.h\u003e\n#include \u003cstdint.h\u003e\n\n#define bmp_font_width   24  // in bytes\n#define bmp_font_height  6\n#define CHAR_MAP         \" 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.,-_(){}[]#\"\n#define CHAR_WIDTH       4\n#define CHAR_HEIGHT      6\nconst static uint8_t bmp_font[] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00,\n  0x06, 0x26, 0x69, 0xf6, 0xf6, 0x66, 0xe6, 0xef, 0xf6, 0x92, 0x19, 0x89, 0x96, 0xe6, 0xe6, 0xe9, 0x99, 0x99, 0xf0, 0x00, 0x02, 0x41, 0x83, 0xcf,\n  0x09, 0x29, 0x99, 0x88, 0x19, 0x99, 0x99, 0x98, 0x88, 0x92, 0x1a, 0x8f, 0xd9, 0x99, 0x98, 0x49, 0x99, 0x99, 0x10, 0x00, 0x04, 0x27, 0xe5, 0x6f,\n  0x09, 0x22, 0x2f, 0xee, 0x16, 0x7f, 0xe8, 0x9e, 0xe8, 0xf2, 0x1c, 0x89, 0xb9, 0xe9, 0xe6, 0x49, 0x99, 0x66, 0x60, 0x06, 0x04, 0x27, 0xe7, 0xef,\n  0x09, 0x24, 0x91, 0x19, 0x19, 0x19, 0x99, 0x98, 0x89, 0x92, 0x9a, 0x89, 0x99, 0x8b, 0x91, 0x49, 0x6f, 0x96, 0x80, 0x20, 0x04, 0x21, 0x87, 0xef,\n  0x06, 0x7f, 0x61, 0xe6, 0x16, 0x69, 0xe6, 0xef, 0x86, 0x92, 0x69, 0xf9, 0x96, 0x87, 0x9e, 0x46, 0x69, 0x96, 0xf4, 0x40, 0xf2, 0x41, 0x80, 0xe0,\n};\n\n#define BMP_LOGO_WIDTH  72\n#define BMP_LOGO_HEIGHT 47\nconst static uint8_t bmp_logo_bits[] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x40, 0x08, 0x00, 0x01, 0x04, 0x20, 0x08, 0x01, 0x12,\n  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,\n  0x40, 0x00, 0x80, 0x00, 0x50, 0x00, 0x28, 0x11, 0x02,\n  0x40, 0x00, 0xa0, 0x00, 0x50, 0x00, 0x28, 0x0a, 0x02,\n  0x60, 0x01, 0xa0, 0x00, 0x50, 0x00, 0x2c, 0x0a, 0x02,\n  0x41, 0xe1, 0xb0, 0xf0, 0x50, 0x78, 0x28, 0x0a, 0x06,\n  0x62, 0x20, 0xa1, 0xb8, 0x50, 0xc8, 0x2c, 0x04, 0x02,\n  0x4a, 0x31, 0xb0, 0x88, 0xd0, 0x88, 0x28, 0x04, 0x06,\n  0x62, 0x21, 0xa1, 0x88, 0x50, 0x88, 0x6c, 0x14, 0x02,\n  0x43, 0x31, 0xb0, 0x8a, 0x52, 0x8a, 0x28, 0x80, 0x06,\n  0x42, 0x31, 0xa8, 0xc8, 0xd0, 0x88, 0x2c, 0x42, 0x86,\n  0x6b, 0x29, 0xa5, 0xa8, 0xd4, 0xea, 0xac, 0x50, 0x42,\n  0x63, 0x65, 0xb4, 0xda, 0x52, 0xd9, 0x6c, 0x42, 0x26,\n  0x53, 0xb1, 0xb1, 0xd8, 0xd4, 0xda, 0x6d, 0x48, 0x86,\n  0x6b, 0x75, 0xb5, 0xda, 0x52, 0xfc, 0x6d, 0x6b, 0x56,\n  0x6b, 0xa1, 0xb0, 0xfb, 0xda, 0xd9, 0x6c, 0x69, 0x46,\n  0x53, 0xed, 0xbd, 0xfa, 0x76, 0xfa, 0xef, 0x6c, 0xb2,\n  0x6f, 0xeb, 0xf4, 0xfd, 0xdd, 0xfd, 0x6c, 0xe7, 0x4e,\n  0x77, 0xeb, 0xbf, 0xfe, 0xd6, 0xfb, 0xee, 0xf1, 0xe6,\n  0x59, 0xef, 0xbc, 0xf2, 0xd6, 0xfb, 0xef, 0xf4, 0xf6,\n  0xf3, 0xb7, 0xff, 0xfb, 0x5c, 0xff, 0xef, 0xd6, 0x7a,\n  0x6b, 0xbf, 0xbe, 0x88, 0xd2, 0xdf, 0xef, 0xdc, 0xd6,\n  0x4b, 0x7f, 0xff, 0xca, 0x70, 0x9f, 0xef, 0xde, 0xce,\n  0x4b, 0xdf, 0xbf, 0xeb, 0x76, 0xff, 0xef, 0xdf, 0xd6,\n  0x77, 0xff, 0xff, 0xfe, 0x56, 0xff, 0xff, 0xdf, 0xc2,\n  0xdf, 0xff, 0xff, 0xfe, 0xfb, 0xdf, 0xef, 0xcf, 0x76,\n  0x4f, 0xff, 0xbf, 0xfb, 0xdf, 0xff, 0xe7, 0xef, 0x52,\n  0x7f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xdf, 0xdf, 0x7e,\n  0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xbf, 0xce, 0x62,\n  0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xfe, 0xfe,\n  0x7f, 0xff, 0xe3, 0xff, 0x8f, 0xff, 0x7f, 0xee, 0x7e,\n  0x7f, 0xff, 0xc1, 0xff, 0x07, 0xfc, 0x1f, 0xdf, 0x7e,\n  0xff, 0xff, 0x80, 0x7c, 0x01, 0xf0, 0x0f, 0xfd, 0xfe,\n  0x7f, 0xff, 0x00, 0x38, 0x01, 0xe0, 0x07, 0xfd, 0x7e,\n  0x7f, 0xfc, 0x00, 0x10, 0x00, 0x40, 0x03, 0x3f, 0xfe,\n  0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xfe,\n  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7e,\n  0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe,\n  0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe,\n  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe,\n  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe,\n  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe,\n  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,\n  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c,\n};\n\n#define BMP_GUN_WIDTH   32\n#define BMP_GUN_HEIGHT  32\nconst static uint8_t bmp_gun_bits[] PROGMEM = {\n  0x00, 0x00, 0x20, 0x00,\n  0x00, 0x00, 0xd8, 0x00,\n  0x00, 0x01, 0xc4, 0x00,\n  0x00, 0x02, 0x04, 0x00,\n  0x00, 0x02, 0x02, 0x00,\n  0x00, 0x02, 0xea, 0x00,\n  0x00, 0x04, 0xd1, 0x00,\n  0x00, 0x09, 0x88, 0x80,\n  0x00, 0x19, 0x00, 0x00,\n  0x00, 0x0d, 0xc2, 0x80,\n  0x00, 0x29, 0x81, 0xc0,\n  0x00, 0x0b, 0xa2, 0x20,\n  0x00, 0x31, 0x40, 0x40,\n  0x00, 0x23, 0x00, 0xc0,\n  0x00, 0x13, 0x00, 0x40,\n  0x00, 0x72, 0x02, 0x00,\n  0x00, 0x49, 0x00, 0x40,\n  0x01, 0xe0, 0xa8, 0x20,\n  0x07, 0xf1, 0x00, 0x30,\n  0x0b, 0xb9, 0xe0, 0xe8,\n  0x07, 0x5c, 0x03, 0xfc,\n  0x07, 0xef, 0xff, 0xee,\n  0x07, 0x75, 0x7f, 0xd2,\n  0x1b, 0xbb, 0xff, 0xb2,\n  0x11, 0x57, 0x7d, 0x64,\n  0x32, 0xaf, 0xff, 0xe8,\n  0x13, 0x5f, 0x75, 0xd0,\n  0x33, 0xff, 0xfb, 0x98,\n  0x17, 0xd7, 0xe5, 0x00,\n  0x1b, 0x8f, 0xb2, 0x30,\n  0x03, 0x7d, 0x58, 0x10,\n  0x6f, 0xbf, 0xec, 0x20,\n};\nconst static uint8_t bmp_gun_mask[] PROGMEM = {\n  0x00, 0x00, 0x70, 0x00,\n  0x00, 0x01, 0xfc, 0x00,\n  0x00, 0x03, 0xfe, 0x00,\n  0x00, 0x07, 0xfe, 0x00,\n  0x00, 0x07, 0xff, 0x00,\n  0x00, 0x07, 0xff, 0x00,\n  0x00, 0x0f, 0xff, 0x80,\n  0x00, 0x1f, 0xff, 0xc0,\n  0x00, 0x3f, 0xff, 0x80,\n  0x00, 0x3f, 0xff, 0xc0,\n  0x00, 0x7f, 0xff, 0xe0,\n  0x00, 0x7f, 0xff, 0xf0,\n  0x00, 0x7f, 0xff, 0xe0,\n  0x00, 0x7f, 0xff, 0xe0,\n  0x00, 0x7f, 0xff, 0xe0,\n  0x00, 0xff, 0xff, 0xc0,\n  0x00, 0xff, 0xff, 0xe0,\n  0x03, 0xff, 0xff, 0xf0,\n  0x0f, 0xff, 0xff, 0xf8,\n  0x1f, 0xff, 0xff, 0xfc,\n  0x1f, 0xff, 0xff, 0xfe,\n  0x1f, 0xff, 0xff, 0xff,\n  0x1f, 0xff, 0xff, 0xff,\n  0x3f, 0xff, 0xff, 0xff,\n  0x3f, 0xff, 0xff, 0xfe,\n  0x7f, 0xff, 0xff, 0xfc,\n  0x7f, 0xff, 0xff, 0xf8,\n  0x7f, 0xff, 0xff, 0xfc,\n  0x7f, 0xff, 0xff, 0xf8,\n  0x7f, 0xff, 0xff, 0xf8,\n  0x7f, 0xff, 0xff, 0xf8,\n  0xff, 0xff, 0xff, 0xf0,\n};\n\n#define BMP_FIRE_WIDTH  24\n#define BMP_FIRE_HEIGHT 20\nconst static uint8_t bmp_fire_bits[] PROGMEM = {\n  0x00, 0x00, 0x00,\n  0x00, 0x18, 0x00,\n  0x00, 0x0c, 0x00,\n  0x02, 0x77, 0x00,\n  0x01, 0x67, 0x00,\n  0x01, 0xe5, 0x80,\n  0x01, 0xe3, 0xc0,\n  0x02, 0xa2, 0xc0,\n  0x07, 0x82, 0xe0,\n  0x1f, 0x41, 0xf9,\n  0x9d, 0x80, 0x7c,\n  0x3e, 0x00, 0x5e,\n  0x76, 0x00, 0x6a,\n  0x38, 0x00, 0x36,\n  0x2f, 0x80, 0x5c,\n  0x36, 0x00, 0x7e,\n  0x3f, 0x00, 0x58,\n  0x10, 0x00, 0x3c,\n  0x88, 0x00, 0x00,\n  0x00, 0x00, 0x00,\n};\n\n#define BMP_IMP_WIDTH   32\n#define BMP_IMP_HEIGHT  32\n#define BMP_IMP_COUNT   5\nconst static uint8_t bmp_imp_bits[] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x01, 0x80, 0x00,\n  0x00, 0x02, 0x80, 0x00,\n  0x00, 0x07, 0x40, 0x00,\n  0x00, 0x02, 0x80, 0x00,\n  0x00, 0x01, 0x00, 0x00,\n  0x01, 0x0f, 0xb3, 0x00,\n  0x00, 0xd0, 0x4e, 0x00,\n  0x00, 0x79, 0x8c, 0x00,\n  0x00, 0x1c, 0x19, 0x00,\n  0x01, 0x8a, 0x20, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x03, 0x00,\n  0x02, 0x00, 0x00, 0x00,\n  0x03, 0x02, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x40,\n  0x02, 0x08, 0x00, 0x80,\n  0x00, 0x00, 0x01, 0x00,\n  0x01, 0x8e, 0x30, 0x00,\n  0x00, 0x04, 0x10, 0x00,\n  0x00, 0x0c, 0x20, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x10, 0x00,\n  0x00, 0x06, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x20, 0x00,\n  0x00, 0x01, 0x00, 0x00,\n  0x00, 0x02, 0x20, 0x00,\n  0x00, 0x05, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x01, 0x80, 0x00,\n  0x00, 0x02, 0x40, 0x00,\n  0x00, 0x03, 0xe0, 0x00,\n  0x00, 0x04, 0x00, 0x00,\n  0x00, 0x01, 0xa1, 0x80,\n  0x01, 0x80, 0x13, 0x00,\n  0x00, 0xf3, 0x8a, 0x00,\n  0x00, 0x09, 0x94, 0x00,\n  0x00, 0x88, 0x38, 0x80,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x02, 0x23, 0x00,\n  0x00, 0x00, 0x00, 0x40,\n  0x01, 0x80, 0x00, 0x80,\n  0x00, 0x00, 0x01, 0x00,\n  0x00, 0xe2, 0x80, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x0c, 0x20, 0x00,\n  0x00, 0x04, 0x30, 0x00,\n  0x00, 0x02, 0x20, 0x00,\n  0x00, 0x00, 0x40, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x01, 0x00, 0x00,\n  0x00, 0x02, 0x20, 0x00,\n  0x00, 0x06, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x02, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0xa0, 0x00,\n  0x00, 0x00, 0x48, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x04, 0x00,\n  0x00, 0x00, 0x0a, 0x00,\n  0x00, 0x00, 0x1f, 0x00,\n  0x00, 0x02, 0x2a, 0x80,\n  0x00, 0x01, 0x05, 0x00,\n  0x00, 0x01, 0xae, 0x20,\n  0x00, 0x01, 0x24, 0x40,\n  0x00, 0x02, 0xac, 0x80,\n  0x00, 0x02, 0x86, 0x00,\n  0x00, 0x03, 0x20, 0x20,\n  0x00, 0x04, 0x30, 0x40,\n  0x00, 0x0c, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x40,\n  0x00, 0x00, 0x20, 0x20,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x08, 0x20,\n  0x00, 0x01, 0x00, 0x00,\n  0x00, 0x02, 0x1a, 0x00,\n  0x00, 0x00, 0x1c, 0x00,\n  0x00, 0x00, 0x38, 0x00,\n  0x00, 0x04, 0x00, 0x00,\n  0x00, 0x02, 0x98, 0x00,\n  0x00, 0x00, 0x18, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x36, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x20, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x04, 0x00,\n  0x00, 0x00, 0x0a, 0x00,\n  0x00, 0x00, 0x08, 0x40,\n  0x00, 0x00, 0x00, 0x80,\n  0x00, 0x01, 0xd6, 0x80,\n  0x00, 0x02, 0xbf, 0x80,\n  0x00, 0x06, 0x61, 0xa0,\n  0x00, 0x0c, 0xe8, 0x80,\n  0x00, 0x0c, 0x10, 0x00,\n  0x00, 0x1a, 0x22, 0x00,\n  0x00, 0x12, 0x40, 0x00,\n  0x00, 0x06, 0x0c, 0x00,\n  0x00, 0x04, 0x0d, 0x00,\n  0x00, 0x3a, 0x03, 0x00,\n  0x00, 0x10, 0x02, 0x00,\n  0x00, 0x60, 0x0a, 0x00,\n  0x00, 0x50, 0x04, 0x00,\n  0x00, 0x20, 0x03, 0x00,\n  0x00, 0x00, 0x04, 0x00,\n  0x00, 0x20, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x20, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x40, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x02, 0x24, 0x00,\n  0x00, 0x01, 0x08, 0x00,\n  0x00, 0x01, 0x18, 0x00,\n  0x00, 0x01, 0x41, 0x40,\n  0x02, 0x33, 0xb6, 0x80,\n  0x01, 0x9c, 0x04, 0x00,\n  0x08, 0xfa, 0x02, 0x08,\n  0x05, 0x00, 0x01, 0x0c,\n  0x27, 0x83, 0xa2, 0x2a,\n  0x00, 0x04, 0x00, 0x00,\n  0x02, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n};\nconst static uint8_t bmp_imp_mask[] PROGMEM = {\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x03, 0xc0, 0x00,\n  0x00, 0x03, 0xc0, 0x00,\n  0x00, 0x07, 0xe0, 0x00,\n  0x00, 0x07, 0xe0, 0x00,\n  0x00, 0x03, 0xe0, 0x00,\n  0x01, 0x07, 0xf1, 0x80,\n  0x00, 0xdf, 0xfe, 0x00,\n  0x00, 0x3f, 0xfe, 0x00,\n  0x00, 0x7f, 0xff, 0x00,\n  0x01, 0xff, 0xff, 0x80,\n  0x00, 0xff, 0xff, 0x80,\n  0x01, 0xff, 0xff, 0x80,\n  0x03, 0xcf, 0xf1, 0xc0,\n  0x01, 0xc7, 0xf1, 0xc0,\n  0x01, 0x87, 0xf1, 0xc0,\n  0x03, 0x0f, 0xf9, 0x80,\n  0x03, 0x0f, 0xfb, 0x80,\n  0x01, 0x8f, 0xff, 0x80,\n  0x03, 0x9f, 0x79, 0x00,\n  0x00, 0x1f, 0x7c, 0x00,\n  0x00, 0x0f, 0x78, 0x00,\n  0x00, 0x0f, 0x78, 0x00,\n  0x00, 0x07, 0x30, 0x00,\n  0x00, 0x07, 0x38, 0x00,\n  0x00, 0x07, 0x30, 0x00,\n  0x00, 0x07, 0x30, 0x00,\n  0x00, 0x03, 0x78, 0x00,\n  0x00, 0x07, 0x30, 0x00,\n  0x00, 0x0f, 0x80, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x03, 0xc0, 0x00,\n  0x00, 0x07, 0xc0, 0x00,\n  0x00, 0x07, 0xe0, 0x00,\n  0x00, 0x07, 0xc0, 0x00,\n  0x01, 0x07, 0xe1, 0x00,\n  0x00, 0x8f, 0xfa, 0x00,\n  0x00, 0xff, 0xfe, 0x00,\n  0x00, 0x3f, 0xfe, 0x00,\n  0x01, 0x7f, 0xff, 0x80,\n  0x00, 0xff, 0xff, 0x00,\n  0x01, 0xff, 0xff, 0x80,\n  0x03, 0xcf, 0xfb, 0xc0,\n  0x03, 0x87, 0xf1, 0xc0,\n  0x03, 0xcf, 0xf3, 0xc0,\n  0x01, 0xcf, 0xf1, 0x80,\n  0x00, 0xcf, 0xf1, 0x00,\n  0x00, 0x0f, 0xfb, 0x80,\n  0x00, 0x1e, 0x78, 0x00,\n  0x00, 0x0e, 0x78, 0x00,\n  0x00, 0x1e, 0x78, 0x00,\n  0x00, 0x0f, 0x70, 0x00,\n  0x00, 0x0f, 0x78, 0x00,\n  0x00, 0x07, 0x70, 0x00,\n  0x00, 0x07, 0x70, 0x00,\n  0x00, 0x07, 0x38, 0x00,\n  0x00, 0x03, 0x30, 0x00,\n  0x00, 0x03, 0x20, 0x00,\n  0x00, 0x07, 0x30, 0x00,\n  0x00, 0x05, 0x70, 0x00,\n  0x00, 0x00, 0x78, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x0e, 0x00,\n  0x00, 0x00, 0x1f, 0x00,\n  0x00, 0x00, 0x1f, 0x00,\n  0x00, 0x03, 0x3f, 0x80,\n  0x00, 0x01, 0x3f, 0x00,\n  0x00, 0x01, 0xff, 0x30,\n  0x00, 0x03, 0xff, 0xc0,\n  0x00, 0x03, 0xff, 0xc0,\n  0x00, 0x03, 0xff, 0x80,\n  0x00, 0x07, 0xff, 0xe0,\n  0x00, 0x07, 0xff, 0xc0,\n  0x00, 0x05, 0xff, 0xe0,\n  0x00, 0x00, 0xfc, 0xe0,\n  0x00, 0x01, 0xfc, 0xe0,\n  0x00, 0x01, 0xfc, 0x70,\n  0x00, 0x03, 0xfc, 0x38,\n  0x00, 0x03, 0xfe, 0x70,\n  0x00, 0x07, 0xfc, 0x00,\n  0x00, 0x07, 0x9e, 0x00,\n  0x00, 0x0f, 0xbc, 0x00,\n  0x00, 0x0f, 0x3e, 0x00,\n  0x00, 0x07, 0x9c, 0x00,\n  0x00, 0x03, 0x9c, 0x00,\n  0x00, 0x03, 0xb8, 0x00,\n  0x00, 0x03, 0x98, 0x00,\n  0x00, 0x01, 0x98, 0x00,\n  0x00, 0x02, 0x1c, 0x00,\n  0x00, 0x00, 0x36, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x20, 0x00,\n  0x00, 0x00, 0x38, 0x00,\n  0x00, 0x00, 0x1f, 0x00,\n  0x00, 0x00, 0x1f, 0x40,\n  0x00, 0x00, 0x3e, 0x80,\n  0x00, 0x01, 0xff, 0x80,\n  0x00, 0x03, 0xff, 0x80,\n  0x00, 0x07, 0xff, 0xe0,\n  0x00, 0x0e, 0xff, 0xc0,\n  0x00, 0x0c, 0xff, 0x80,\n  0x00, 0x1f, 0xfe, 0x00,\n  0x00, 0x13, 0xfc, 0x00,\n  0x00, 0x07, 0xfe, 0x00,\n  0x00, 0x1f, 0xff, 0x00,\n  0x00, 0x3f, 0x9f, 0x00,\n  0x00, 0x3e, 0x0f, 0x00,\n  0x00, 0x7c, 0x0f, 0x00,\n  0x00, 0x78, 0x0f, 0x00,\n  0x00, 0x78, 0x07, 0x80,\n  0x00, 0x78, 0x07, 0x40,\n  0x00, 0x38, 0x07, 0x80,\n  0x00, 0x30, 0x07, 0x00,\n  0x00, 0x30, 0x01, 0x00,\n  0x01, 0xf0, 0x00, 0x00,\n  0x01, 0xb0, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x01, 0x1c, 0x00,\n  0x00, 0x01, 0x3e, 0x00,\n  0x00, 0x03, 0xff, 0x00,\n  0x00, 0x0f, 0xff, 0xe0,\n  0x01, 0x3f, 0xff, 0xc0,\n  0x01, 0xff, 0xff, 0xc0,\n  0x19, 0xff, 0xff, 0xe8,\n  0x7f, 0xff, 0xff, 0xfe,\n  0x3f, 0xff, 0xff, 0xfe,\n  0x1f, 0xc2, 0x07, 0xe0,\n  0x1f, 0x00, 0x01, 0xe0,\n  0x0e, 0x00, 0x00, 0x40,\n  0x00, 0x00, 0x00, 0x00,\n};\n\n#define BMP_FIREBALL_WIDTH 16\n#define BMP_FIREBALL_HEIGHT 16\nconst static uint8_t bmp_fireball_bits[] PROGMEM = {\n  0x00, 0x00,\n  0x01, 0x40,\n  0x0a, 0xb0,\n  0x0e, 0xd0,\n  0x00, 0x68,\n  0x53, 0xb4,\n  0x0f, 0x48,\n  0x27, 0x78,\n  0x17, 0xa8,\n  0x27, 0xf0,\n  0x21, 0xd6,\n  0x02, 0xf8,\n  0x20, 0x48,\n  0x06, 0x20,\n  0x01, 0x00,\n  0x00, 0x00,\n};\nconst static uint8_t bmp_fireball_mask[] PROGMEM = {\n  0x1f, 0x40,\n  0x0f, 0xf0,\n  0x3f, 0xf8,\n  0x1f, 0xfc,\n  0x7f, 0xfd,\n  0x7f, 0xfc,\n  0x7f, 0xfd,\n  0xff, 0xfe,\n  0xff, 0xff,\n  0xff, 0xff,\n  0xff, 0xfe,\n  0xff, 0xfe,\n  0x3f, 0xfe,\n  0x17, 0xf8,\n  0x07, 0xf4,\n  0x01, 0xe0,\n};\n\n#define BMP_DOOR_WIDTH    32\n#define BMP_DOOR_HEIGHT   32\nconst static uint8_t bmp_door_bits[] PROGMEM = {\n  0xff, 0xff, 0xff, 0xff,\n  0xb2, 0xbd, 0xcd, 0x5b,\n  0x9a, 0xf4, 0x6d, 0x71,\n  0xff, 0xff, 0xff, 0xff,\n  0x00, 0x00, 0x00, 0x00,\n  0xbf, 0xff, 0xff, 0xfd,\n  0x3f, 0x00, 0xfe, 0xfc,\n  0x3e, 0x00, 0xc6, 0xfc,\n  0xbc, 0xaa, 0xfe, 0xbd,\n  0x39, 0x54, 0xc6, 0xbc,\n  0x32, 0x8e, 0xfe, 0xac,\n  0xb5, 0xfe, 0xc6, 0xad,\n  0x3f, 0xe0, 0xfe, 0xac,\n  0x31, 0xe0, 0xc6, 0xac,\n  0xb3, 0xf4, 0xfe, 0xad,\n  0x3f, 0xe8, 0xc6, 0xac,\n  0x3c, 0xf4, 0xd6, 0xac,\n  0xb8, 0xff, 0xfe, 0xad,\n  0x34, 0xc7, 0xfe, 0xfc,\n  0x38, 0xd6, 0x0e, 0x0c,\n  0xb0, 0xd6, 0x4e, 0x0d,\n  0x3f, 0xd6, 0xaf, 0x5c,\n  0x30, 0x47, 0xff, 0xac,\n  0xb7, 0x57, 0xff, 0xfd,\n  0x3f, 0xc6, 0x0e, 0x0c,\n  0x35, 0x56, 0x40, 0x4c,\n  0xb5, 0x46, 0xaa, 0xad,\n  0x35, 0x56, 0x55, 0x4c,\n  0xff, 0xff, 0xff, 0xff,\n  0xb0, 0x1f, 0xf8, 0x0d,\n  0xd9, 0x30, 0x0c, 0x9b,\n  0xff, 0xe0, 0x07, 0xff,\n};\n\n#define BMP_ITEMS_WIDTH   16\n#define BMP_ITEMS_HEIGHT  16\n#define BMP_ITEMS_COUNT   2\nconst static uint8_t bmp_items_bits[] PROGMEM = {\n  0x1f, 0xf8,\n  0x3f, 0xfc,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x77, 0xee,\n  0x3f, 0xfc,\n  0x5f, 0xfa,\n  0x2f, 0xf6,\n  0x53, 0xcc,\n  0x3e, 0x7e,\n  0x5e, 0x7c,\n  0x38, 0x1e,\n  0x58, 0x1c,\n  0x3e, 0x7e,\n  0x5e, 0x7e,\n  0x2e, 0xfc,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x0f, 0xfc,\n  0x17, 0xfc,\n  0x22, 0x6c,\n  0x36, 0x44,\n  0x3f, 0xfc,\n  0x1f, 0xfc,\n  0x2b, 0xfc,\n  0x05, 0x54,\n  0x02, 0xa8,\n  0x00, 0x00,\n  0x00, 0x00,\n};\nconst static uint8_t bmp_items_mask[] PROGMEM = {\n  0x1f, 0xf8,\n  0x3f, 0xfc,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x7f, 0xfe,\n  0x3f, 0xfc,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x0f, 0xfc,\n  0x1f, 0xfc,\n  0x3f, 0xfc,\n  0x3f, 0xfc,\n  0x3f, 0xfc,\n  0x3f, 0xfc,\n  0x3f, 0xfc,\n  0x07, 0xfc,\n  0x03, 0xf8,\n  0x00, 0x00,\n  0x00, 0x00,\n};\n\n// Gradient for lighting.\n// Note: Width and height are in bytes\n#define GRADIENT_WIDTH  2\n#define GRADIENT_HEIGHT 8\n#define GRADIENT_COUNT  8\n#define GRADIENT_WHITE  7\n#define GRADIENT_BLACK  0\nconst static uint8_t gradient[] PROGMEM = {\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x00, 0x00,\n  0x88, 0x88,\n  0x00, 0x00,\n  0x22, 0x22,\n  0x00, 0x00,\n  0x8a, 0x8a,\n  0x00, 0x00,\n  0x22, 0x22,\n  0x00, 0x00,\n  0xaa, 0xaa,\n  0x10, 0x10,\n  0xaa, 0xaa,\n  0x00, 0x00,\n  0xaa, 0xaa,\n  0x01, 0x01,\n  0xaa, 0xaa,\n  0x44, 0x44,\n  0xaa, 0xaa,\n  0x55, 0x55,\n  0xaa, 0xaa,\n  0x44, 0x44,\n  0xaa, 0xaa,\n  0x15, 0x55,\n  0xaa, 0xaa,\n  0x55, 0x55,\n  0xaa, 0xaa,\n  0x55, 0x55,\n  0xbb, 0xbb,\n  0x55, 0x55,\n  0xaa, 0xea,\n  0x55, 0x55,\n  0xbb, 0xbb,\n  0x55, 0x55,\n  0xff, 0xff,\n  0x55, 0x55,\n  0xfb, 0xfb,\n  0x55, 0x55,\n  0xff, 0xff,\n  0x55, 0x55,\n  0xbb, 0xbf,\n  0x57, 0x57,\n  0xff, 0xff,\n  0xdd, 0xdd,\n  0xff, 0xff,\n  0x77, 0x75,\n  0xff, 0xff,\n  0xdd, 0xdd,\n  0xff, 0xff,\n  0xff, 0xff,\n  0xff, 0xff,\n  0xff, 0xff,\n  0xff, 0xff,\n  0xff, 0xff,\n  0xff, 0xff,\n  0xff, 0xff,\n  0xff, 0xff,\n};\n\n#endif\n\n"}}}Content-Length: 296

{"jsonrpc":"2.0","id":"16","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sprites.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 676

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sprites.h","version":1}}Content-Length: 39

{"id":"16","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 936

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.cpp","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\types.cpp\"\n#include \u003cstdint.h\u003e\n#include \u003cmath.h\u003e\n#include \"types.h\"\n#include \"constants.h\"\n\ntemplate \u003cclass T\u003e\ninline T sq(T value) {\n    return value * value;\n}\n\nCoords create_coords(double x, double y) {\n  return { x, y };\n}\n\nuint8_t coords_distance(Coords* a, Coords* b) {\n  return sqrt(sq(a-\u003ex - b-\u003ex) + sq(a-\u003ey - b-\u003ey)) * DISTANCE_MULTIPLIER;\n}\n\nUID create_uid(uint8_t type, uint8_t x, uint8_t y) {\n  return ((y \u003c\u003c LEVEL_WIDTH_BASE) | x) \u003c\u003c 4 | type;\n}\n  \nuint8_t uid_get_type(UID uid) {\n  return uid \u0026 0x0F;\n}\n"}}}Content-Length: 296

{"jsonrpc":"2.0","id":"17","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.cpp"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.cpp","version":1}}Content-Length: 39

{"id":"17","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 1174

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.h","languageId":"cpp","version":1,"text":"#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\types.h\"\n#ifndef _types_h\n#define _types_h\n\n#define UID_null  0\n\n// Entity types (legend applies to level.h)\n#define E_FLOOR             0x0   // . (also null)\n#define E_WALL              0xF   // #\n#define E_PLAYER            0x1   // P\n#define E_ENEMY             0x2   // E\n#define E_DOOR              0x4   // D\n#define E_LOCKEDDOOR        0x5   // L\n#define E_EXIT              0x7   // X\n// collectable entities \u003e= 0x8\n#define E_MEDIKIT           0x8   // M\n#define E_KEY               0x9   // K\n#define E_FIREBALL          0xA   // not in map\n\ntypedef uint16_t UID;\ntypedef uint8_t  EType;\n\nstruct Coords {\n  double x;\n  double y;\n};\n\nUID create_uid(EType type, uint8_t x, uint8_t y);\nEType uid_get_type(UID uid);\n\nCoords create_coords(double x, double y);\nuint8_t coords_distance(Coords* a, Coords* b);\n\n#endif\n\n"}}}Content-Length: 294

{"jsonrpc":"2.0","id":"18","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.h"},"range":{"start":{"line":1,"character":0},"end":{"line":1,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 1275

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":16,"line":19},"start":{"character":8,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":15,"line":20},"start":{"character":8,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":34,"line":27},"start":{"character":27,"line":27}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":45,"line":27},"start":{"character":38,"line":27}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":31},"start":{"character":0,"line":31}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.h","version":1}}Content-Length: 39

{"id":"18","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28837

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":2},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}
<<<
Content-Length: 111

{"id":1,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":1,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28837

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":3},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}Content-Length: 197

{"jsonrpc":"2.0","id":"19","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.cpp"}}}
<<<
Content-Length: 1316

{"id":"19","jsonrpc":"2.0","result":[{"detail":"void ()","kind":12,"name":"input_setup","range":{"end":{"character":1,"line":79},"start":{"character":0,"line":73}},"selectionRange":{"end":{"character":16,"line":73},"start":{"character":5,"line":73}}},{"detail":"bool ()","kind":12,"name":"input_left","range":{"end":{"character":1,"line":83},"start":{"character":0,"line":81}},"selectionRange":{"end":{"character":15,"line":81},"start":{"character":5,"line":81}}},{"detail":"bool ()","kind":12,"name":"input_right","range":{"end":{"character":1,"line":87},"start":{"character":0,"line":85}},"selectionRange":{"end":{"character":16,"line":85},"start":{"character":5,"line":85}}},{"detail":"bool ()","kind":12,"name":"input_up","range":{"end":{"character":1,"line":91},"start":{"character":0,"line":89}},"selectionRange":{"end":{"character":13,"line":89},"start":{"character":5,"line":89}}},{"detail":"bool ()","kind":12,"name":"input_down","range":{"end":{"character":1,"line":95},"start":{"character":0,"line":93}},"selectionRange":{"end":{"character":15,"line":93},"start":{"character":5,"line":93}}},{"detail":"bool ()","kind":12,"name":"input_fire","range":{"end":{"character":1,"line":99},"start":{"character":0,"line":97}},"selectionRange":{"end":{"character":15,"line":97},"start":{"character":5,"line":97}}}]}
>>>
Content-Length: 198

{"jsonrpc":"2.0","id":"20","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.h"}}}
<<<
Content-Length: 4476

{"id":"20","jsonrpc":"2.0","result":[{"children":[{"detail":"Coords","kind":8,"name":"pos","range":{"end":{"character":12,"line":32},"start":{"character":2,"line":32}},"selectionRange":{"end":{"character":12,"line":32},"start":{"character":9,"line":32}}},{"detail":"Coords","kind":8,"name":"dir","range":{"end":{"character":12,"line":33},"start":{"character":2,"line":33}},"selectionRange":{"end":{"character":12,"line":33},"start":{"character":9,"line":33}}},{"detail":"Coords","kind":8,"name":"plane","range":{"end":{"character":14,"line":34},"start":{"character":2,"line":34}},"selectionRange":{"end":{"character":14,"line":34},"start":{"character":9,"line":34}}},{"detail":"double","kind":8,"name":"velocity","range":{"end":{"character":17,"line":35},"start":{"character":2,"line":35}},"selectionRange":{"end":{"character":17,"line":35},"start":{"character":9,"line":35}}},{"detail":"int","kind":8,"name":"health","range":{"end":{"character":16,"line":36},"start":{"character":2,"line":36}},"selectionRange":{"end":{"character":16,"line":36},"start":{"character":10,"line":36}}},{"detail":"int","kind":8,"name":"keys","range":{"end":{"character":14,"line":37},"start":{"character":2,"line":37}},"selectionRange":{"end":{"character":14,"line":37},"start":{"character":10,"line":37}}}],"detail":"struct","kind":23,"name":"Player","range":{"end":{"character":1,"line":38},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":13,"line":31},"start":{"character":7,"line":31}}},{"children":[{"detail":"UID","kind":8,"name":"uid","range":{"end":{"character":9,"line":41},"start":{"character":2,"line":41}},"selectionRange":{"end":{"character":9,"line":41},"start":{"character":6,"line":41}}},{"detail":"Coords","kind":8,"name":"pos","range":{"end":{"character":12,"line":42},"start":{"character":2,"line":42}},"selectionRange":{"end":{"character":12,"line":42},"start":{"character":9,"line":42}}},{"detail":"int","kind":8,"name":"state","range":{"end":{"character":15,"line":43},"start":{"character":2,"line":43}},"selectionRange":{"end":{"character":15,"line":43},"start":{"character":10,"line":43}}},{"detail":"int","kind":8,"name":"health","range":{"end":{"character":16,"line":44},"start":{"character":2,"line":44}},"selectionRange":{"end":{"character":16,"line":44},"start":{"character":10,"line":44}}},{"detail":"int","kind":8,"name":"distance","range":{"end":{"character":18,"line":45},"start":{"character":2,"line":45}},"selectionRange":{"end":{"character":18,"line":45},"start":{"character":10,"line":45}}},{"detail":"int","kind":8,"name":"timer","range":{"end":{"character":15,"line":46},"start":{"character":2,"line":46}},"selectionRange":{"end":{"character":15,"line":46},"start":{"character":10,"line":46}}}],"detail":"struct","kind":23,"name":"Entity","range":{"end":{"character":1,"line":47},"start":{"character":0,"line":40}},"selectionRange":{"end":{"character":13,"line":40},"start":{"character":7,"line":40}}},{"children":[{"detail":"UID","kind":8,"name":"uid","range":{"end":{"character":9,"line":50},"start":{"character":2,"line":50}},"selectionRange":{"end":{"character":9,"line":50},"start":{"character":6,"line":50}}},{"detail":"int","kind":8,"name":"x","range":{"end":{"character":11,"line":51},"start":{"character":2,"line":51}},"selectionRange":{"end":{"character":11,"line":51},"start":{"character":10,"line":51}}},{"detail":"int","kind":8,"name":"y","range":{"end":{"character":11,"line":52},"start":{"character":2,"line":52}},"selectionRange":{"end":{"character":11,"line":52},"start":{"character":10,"line":52}}},{"detail":"bool","kind":8,"name":"active","range":{"end":{"character":13,"line":53},"start":{"character":2,"line":53}},"selectionRange":{"end":{"character":13,"line":53},"start":{"character":7,"line":53}}}],"detail":"struct","kind":23,"name":"StaticEntity","range":{"end":{"character":1,"line":54},"start":{"character":0,"line":49}},"selectionRange":{"end":{"character":19,"line":49},"start":{"character":7,"line":49}}},{"detail":"Entity (int, int, int, int, int)","kind":12,"name":"create_entity","range":{"end":{"character":102,"line":56},"start":{"character":0,"line":56}},"selectionRange":{"end":{"character":20,"line":56},"start":{"character":7,"line":56}}},{"detail":"StaticEntity (UID, int, int, bool)","kind":12,"name":"create_static_entity","range":{"end":{"character":78,"line":57},"start":{"character":0,"line":57}},"selectionRange":{"end":{"character":33,"line":57},"start":{"character":13,"line":57}}}]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"21","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.cpp"}}}
<<<
Content-Length: 554

{"id":"21","jsonrpc":"2.0","result":[{"detail":"Entity (uint8_t, uint8_t, uint8_t, uint8_t, uint8_t)","kind":12,"name":"create_entity","range":{"end":{"character":1,"line":11},"start":{"character":0,"line":6}},"selectionRange":{"end":{"character":20,"line":6},"start":{"character":7,"line":6}}},{"detail":"StaticEntity (UID, uint8_t, uint8_t, bool)","kind":12,"name":"crate_static_entity","range":{"end":{"character":1,"line":15},"start":{"character":0,"line":13}},"selectionRange":{"end":{"character":32,"line":13},"start":{"character":13,"line":13}}}]}
>>>
Content-Length: 197

{"jsonrpc":"2.0","id":"22","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"}}}
<<<
Content-Length: 7045

{"id":"22","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"PROGMEM","range":{"end":{"character":28,"line":11},"start":{"character":0,"line":11}},"selectionRange":{"end":{"character":28,"line":11},"start":{"character":21,"line":11}}},{"detail":"void ()","kind":12,"name":"setupDisplay","range":{"end":{"character":19,"line":14},"start":{"character":0,"line":14}},"selectionRange":{"end":{"character":17,"line":14},"start":{"character":5,"line":14}}},{"detail":"void ()","kind":12,"name":"fps","range":{"end":{"character":10,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":8,"line":15},"start":{"character":5,"line":15}}},{"detail":"bool (int, int, int)","kind":12,"name":"getGradientPixel","range":{"end":{"character":54,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":21,"line":16},"start":{"character":5,"line":16}}},{"detail":"void (int, bool)","kind":12,"name":"fadeScreen","range":{"end":{"character":46,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":15,"line":17},"start":{"character":5,"line":17}}},{"detail":"void (int, int, int)","kind":12,"name":"drawByte","range":{"end":{"character":46,"line":18},"start":{"character":0,"line":18}},"selectionRange":{"end":{"character":13,"line":18},"start":{"character":5,"line":18}}},{"detail":"int (int, int)","kind":12,"name":"getByte","range":{"end":{"character":37,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":15,"line":19},"start":{"character":8,"line":19}}},{"detail":"void (int, int, bool, bool)","kind":12,"name":"drawPixel","range":{"end":{"character":70,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":14,"line":20},"start":{"character":5,"line":20}}},{"detail":"void (int, int, int, int)","kind":12,"name":"drawVLine","range":{"end":{"character":74,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":14,"line":21},"start":{"character":5,"line":21}}},{"detail":"void (int, int, const int *, const int *, int, int, int, double)","kind":12,"name":"drawSprite","range":{"end":{"character":136,"line":22},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":15,"line":22},"start":{"character":5,"line":22}}},{"detail":"void (int, int, char)","kind":12,"name":"drawChar","range":{"end":{"character":42,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":13,"line":23},"start":{"character":5,"line":23}}},{"detail":"void (int, int, char *, int)","kind":12,"name":"drawText","range":{"end":{"character":63,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}}},{"detail":"void (int, int, const int, int)","kind":12,"name":"drawText","range":{"end":{"character":83,"line":25},"start":{"character":0,"line":25}},"selectionRange":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}}},{"detail":"int","kind":13,"name":"display","range":{"end":{"character":53,"line":28},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":53,"line":28},"start":{"character":46,"line":28}}},{"detail":"double","kind":13,"name":"delta","range":{"end":{"character":16,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":12,"line":31},"start":{"character":7,"line":31}}},{"detail":"int","kind":13,"name":"lastFrameTime","range":{"end":{"character":22,"line":32},"start":{"character":0,"line":32}},"selectionRange":{"end":{"character":22,"line":32},"start":{"character":9,"line":32}}},{"detail":"int *","kind":13,"name":"display_buf","range":{"end":{"character":20,"line":36},"start":{"character":0,"line":36}},"selectionRange":{"end":{"character":20,"line":36},"start":{"character":9,"line":36}}},{"detail":"int","kind":13,"name":"zbuffer","range":{"end":{"character":15,"line":41},"start":{"character":0,"line":41}},"selectionRange":{"end":{"character":15,"line":41},"start":{"character":8,"line":41}}},{"detail":"void ()","kind":12,"name":"setupDisplay","range":{"end":{"character":1,"line":57},"start":{"character":0,"line":43}},"selectionRange":{"end":{"character":17,"line":43},"start":{"character":5,"line":43}}},{"detail":"void ()","kind":12,"name":"fps","range":{"end":{"character":1,"line":65},"start":{"character":0,"line":61}},"selectionRange":{"end":{"character":8,"line":61},"start":{"character":5,"line":61}}},{"detail":"double ()","kind":12,"name":"getActualFps","range":{"end":{"character":1,"line":69},"start":{"character":0,"line":67}},"selectionRange":{"end":{"character":19,"line":67},"start":{"character":7,"line":67}}},{"detail":"void (int, int, int)","kind":12,"name":"drawByte","range":{"end":{"character":1,"line":76},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":13,"line":72},"start":{"character":5,"line":72}}},{"detail":"int (int, int, int)","kind":12,"name":"getGradientPixel","range":{"end":{"character":1,"line":88},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":24,"line":78},"start":{"character":8,"line":78}}},{"detail":"void (int, bool)","kind":12,"name":"fadeScreen","range":{"end":{"character":1,"line":97},"start":{"character":0,"line":90}},"selectionRange":{"end":{"character":15,"line":90},"start":{"character":5,"line":90}}},{"detail":"void (int, int, bool, bool)","kind":12,"name":"drawPixel","range":{"end":{"character":1,"line":118},"start":{"character":0,"line":101}},"selectionRange":{"end":{"character":14,"line":101},"start":{"character":5,"line":101}}},{"detail":"void (int, int, int, int)","kind":12,"name":"drawVLine","range":{"end":{"character":1,"line":166},"start":{"character":0,"line":123}},"selectionRange":{"end":{"character":14,"line":123},"start":{"character":5,"line":123}}},{"detail":"void (int, int, const int *, const int *, int, int, int, double)","kind":12,"name":"drawSprite","range":{"end":{"character":1,"line":220},"start":{"character":0,"line":169}},"selectionRange":{"end":{"character":15,"line":169},"start":{"character":5,"line":169}}},{"detail":"void (int, int, char)","kind":12,"name":"drawChar","range":{"end":{"character":1,"line":242},"start":{"character":0,"line":225}},"selectionRange":{"end":{"character":13,"line":225},"start":{"character":5,"line":225}}},{"detail":"void (int, int, char *, int)","kind":12,"name":"drawText","range":{"end":{"character":1,"line":257},"start":{"character":0,"line":245}},"selectionRange":{"end":{"character":13,"line":245},"start":{"character":5,"line":245}}},{"detail":"void (int, int, const int *, int)","kind":12,"name":"drawText","range":{"end":{"character":1,"line":269},"start":{"character":0,"line":260}},"selectionRange":{"end":{"character":13,"line":260},"start":{"character":5,"line":260}}},{"detail":"void (int, int, int)","kind":12,"name":"drawText","range":{"end":{"character":1,"line":276},"start":{"character":0,"line":272}},"selectionRange":{"end":{"character":13,"line":272},"start":{"character":5,"line":272}}}]}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"23","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2000

{"id":"23","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 195

{"jsonrpc":"2.0","id":"24","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/level.h"}}}
<<<
Content-Length: 266

{"id":"24","jsonrpc":"2.0","result":[{"detail":"const uint8_t[1824]","kind":13,"name":"sto_level_1","range":{"end":{"character":1,"line":130},"start":{"character":0,"line":72}},"selectionRange":{"end":{"character":32,"line":72},"start":{"character":21,"line":72}}}]}
>>>
Content-Length: 195

{"jsonrpc":"2.0","id":"25","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"}}}
<<<
Content-Length: 3989

{"id":"25","jsonrpc":"2.0","result":[{"children":[{"detail":"BUTTONS","kind":22,"name":"B","range":{"end":{"character":12,"line":5},"start":{"character":2,"line":5}},"selectionRange":{"end":{"character":3,"line":5},"start":{"character":2,"line":5}}},{"detail":"BUTTONS","kind":22,"name":"Y","range":{"end":{"character":12,"line":6},"start":{"character":2,"line":6}},"selectionRange":{"end":{"character":3,"line":6},"start":{"character":2,"line":6}}},{"detail":"BUTTONS","kind":22,"name":"SELECT","range":{"end":{"character":17,"line":7},"start":{"character":2,"line":7}},"selectionRange":{"end":{"character":8,"line":7},"start":{"character":2,"line":7}}},{"detail":"BUTTONS","kind":22,"name":"START","range":{"end":{"character":16,"line":8},"start":{"character":2,"line":8}},"selectionRange":{"end":{"character":7,"line":8},"start":{"character":2,"line":8}}},{"detail":"BUTTONS","kind":22,"name":"UP","range":{"end":{"character":13,"line":9},"start":{"character":2,"line":9}},"selectionRange":{"end":{"character":4,"line":9},"start":{"character":2,"line":9}}},{"detail":"BUTTONS","kind":22,"name":"DOWN","range":{"end":{"character":15,"line":10},"start":{"character":2,"line":10}},"selectionRange":{"end":{"character":6,"line":10},"start":{"character":2,"line":10}}},{"detail":"BUTTONS","kind":22,"name":"LEFT","range":{"end":{"character":15,"line":11},"start":{"character":2,"line":11}},"selectionRange":{"end":{"character":6,"line":11},"start":{"character":2,"line":11}}},{"detail":"BUTTONS","kind":22,"name":"RIGHT","range":{"end":{"character":16,"line":12},"start":{"character":2,"line":12}},"selectionRange":{"end":{"character":7,"line":12},"start":{"character":2,"line":12}}},{"detail":"BUTTONS","kind":22,"name":"A","range":{"end":{"character":12,"line":13},"start":{"character":2,"line":13}},"selectionRange":{"end":{"character":3,"line":13},"start":{"character":2,"line":13}}},{"detail":"BUTTONS","kind":22,"name":"X","range":{"end":{"character":12,"line":14},"start":{"character":2,"line":14}},"selectionRange":{"end":{"character":3,"line":14},"start":{"character":2,"line":14}}},{"detail":"BUTTONS","kind":22,"name":"LB","range":{"end":{"character":13,"line":15},"start":{"character":2,"line":15}},"selectionRange":{"end":{"character":4,"line":15},"start":{"character":2,"line":15}}},{"detail":"BUTTONS","kind":22,"name":"RB","range":{"end":{"character":13,"line":16},"start":{"character":2,"line":16}},"selectionRange":{"end":{"character":4,"line":16},"start":{"character":2,"line":16}}}],"detail":"enum","kind":10,"name":"BUTTONS","range":{"end":{"character":1,"line":17},"start":{"character":0,"line":4}},"selectionRange":{"end":{"character":12,"line":4},"start":{"character":5,"line":4}}},{"detail":"void ()","kind":12,"name":"input_setup","range":{"end":{"character":18,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":16,"line":19},"start":{"character":5,"line":19}}},{"detail":"bool ()","kind":12,"name":"input_up","range":{"end":{"character":15,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":13,"line":20},"start":{"character":5,"line":20}}},{"detail":"bool ()","kind":12,"name":"input_down","range":{"end":{"character":17,"line":21},"start":{"character":0,"line":21}},"selectionRange":{"end":{"character":15,"line":21},"start":{"character":5,"line":21}}},{"detail":"bool ()","kind":12,"name":"input_left","range":{"end":{"character":17,"line":22},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":15,"line":22},"start":{"character":5,"line":22}}},{"detail":"bool ()","kind":12,"name":"input_right","range":{"end":{"character":18,"line":23},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":16,"line":23},"start":{"character":5,"line":23}}},{"detail":"bool ()","kind":12,"name":"input_fire","range":{"end":{"character":17,"line":24},"start":{"character":0,"line":24}},"selectionRange":{"end":{"character":15,"line":24},"start":{"character":5,"line":24}}}]}
>>>
Content-Length: 197

{"jsonrpc":"2.0","id":"26","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sprites.h"}}}
<<<
Content-Length: 3034

{"id":"26","jsonrpc":"2.0","result":[{"detail":"const uint8_t[144]","kind":13,"name":"bmp_font","range":{"end":{"character":1,"line":19},"start":{"character":0,"line":12}},"selectionRange":{"end":{"character":29,"line":12},"start":{"character":21,"line":12}}},{"detail":"const uint8_t[423]","kind":13,"name":"bmp_logo_bits","range":{"end":{"character":1,"line":71},"start":{"character":0,"line":23}},"selectionRange":{"end":{"character":34,"line":23},"start":{"character":21,"line":23}}},{"detail":"const uint8_t[128]","kind":13,"name":"bmp_gun_bits","range":{"end":{"character":1,"line":108},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":33,"line":75},"start":{"character":21,"line":75}}},{"detail":"const uint8_t[128]","kind":13,"name":"bmp_gun_mask","range":{"end":{"character":1,"line":142},"start":{"character":0,"line":109}},"selectionRange":{"end":{"character":33,"line":109},"start":{"character":21,"line":109}}},{"detail":"const uint8_t[60]","kind":13,"name":"bmp_fire_bits","range":{"end":{"character":1,"line":167},"start":{"character":0,"line":146}},"selectionRange":{"end":{"character":34,"line":146},"start":{"character":21,"line":146}}},{"detail":"const uint8_t[640]","kind":13,"name":"bmp_imp_bits","range":{"end":{"character":1,"line":333},"start":{"character":0,"line":172}},"selectionRange":{"end":{"character":33,"line":172},"start":{"character":21,"line":172}}},{"detail":"const uint8_t[640]","kind":13,"name":"bmp_imp_mask","range":{"end":{"character":1,"line":495},"start":{"character":0,"line":334}},"selectionRange":{"end":{"character":33,"line":334},"start":{"character":21,"line":334}}},{"detail":"const uint8_t[32]","kind":13,"name":"bmp_fireball_bits","range":{"end":{"character":1,"line":516},"start":{"character":0,"line":499}},"selectionRange":{"end":{"character":38,"line":499},"start":{"character":21,"line":499}}},{"detail":"const uint8_t[32]","kind":13,"name":"bmp_fireball_mask","range":{"end":{"character":1,"line":534},"start":{"character":0,"line":517}},"selectionRange":{"end":{"character":38,"line":517},"start":{"character":21,"line":517}}},{"detail":"const uint8_t[128]","kind":13,"name":"bmp_door_bits","range":{"end":{"character":1,"line":571},"start":{"character":0,"line":538}},"selectionRange":{"end":{"character":34,"line":538},"start":{"character":21,"line":538}}},{"detail":"const uint8_t[64]","kind":13,"name":"bmp_items_bits","range":{"end":{"character":1,"line":609},"start":{"character":0,"line":576}},"selectionRange":{"end":{"character":35,"line":576},"start":{"character":21,"line":576}}},{"detail":"const uint8_t[64]","kind":13,"name":"bmp_items_mask","range":{"end":{"character":1,"line":643},"start":{"character":0,"line":610}},"selectionRange":{"end":{"character":35,"line":610},"start":{"character":21,"line":610}}},{"detail":"const uint8_t[128]","kind":13,"name":"gradient","range":{"end":{"character":1,"line":717},"start":{"character":0,"line":652}},"selectionRange":{"end":{"character":29,"line":652},"start":{"character":21,"line":652}}}]}
>>>
Content-Length: 227

{"jsonrpc":"2.0","id":"27","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sprites.h"},"position":{"line":16,"character":102}}}
<<<
Content-Length: 262

{"id":"27","jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### `expression`  \n\n---\nType: `const uint8_t[144]`  \nValue = `{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...}`"},"range":{"end":{"character":103,"line":16},"start":{"character":102,"line":16}}}}
>>>
Content-Length: 195

{"jsonrpc":"2.0","id":"28","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.h"}}}
<<<
Content-Length: 2004

{"id":"28","jsonrpc":"2.0","result":[{"detail":"type alias","kind":5,"name":"UID","range":{"end":{"character":20,"line":19},"start":{"character":0,"line":19}},"selectionRange":{"end":{"character":20,"line":19},"start":{"character":17,"line":19}}},{"detail":"type alias","kind":5,"name":"EType","range":{"end":{"character":22,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":22,"line":20},"start":{"character":17,"line":20}}},{"children":[{"detail":"double","kind":8,"name":"x","range":{"end":{"character":10,"line":23},"start":{"character":2,"line":23}},"selectionRange":{"end":{"character":10,"line":23},"start":{"character":9,"line":23}}},{"detail":"double","kind":8,"name":"y","range":{"end":{"character":10,"line":24},"start":{"character":2,"line":24}},"selectionRange":{"end":{"character":10,"line":24},"start":{"character":9,"line":24}}}],"detail":"struct","kind":23,"name":"Coords","range":{"end":{"character":1,"line":25},"start":{"character":0,"line":22}},"selectionRange":{"end":{"character":13,"line":22},"start":{"character":7,"line":22}}},{"detail":"UID (EType, int, int)","kind":12,"name":"create_uid","range":{"end":{"character":48,"line":27},"start":{"character":0,"line":27}},"selectionRange":{"end":{"character":14,"line":27},"start":{"character":4,"line":27}}},{"detail":"EType (UID)","kind":12,"name":"uid_get_type","range":{"end":{"character":27,"line":28},"start":{"character":0,"line":28}},"selectionRange":{"end":{"character":18,"line":28},"start":{"character":6,"line":28}}},{"detail":"Coords (double, double)","kind":12,"name":"create_coords","range":{"end":{"character":40,"line":30},"start":{"character":0,"line":30}},"selectionRange":{"end":{"character":20,"line":30},"start":{"character":7,"line":30}}},{"detail":"int (Coords *, Coords *)","kind":12,"name":"coords_distance","range":{"end":{"character":45,"line":31},"start":{"character":0,"line":31}},"selectionRange":{"end":{"character":23,"line":31},"start":{"character":8,"line":31}}}]}
>>>
Content-Length: 224

{"jsonrpc":"2.0","id":"29","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.h"},"position":{"line":17,"character":39}}}
<<<
Content-Length: 41

{"id":"29","jsonrpc":"2.0","result":null}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"30","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.cpp"}}}
<<<
Content-Length: 3783

{"id":"30","jsonrpc":"2.0","result":[{"detail":"const uint16_t","kind":13,"name":"WIRE_MAX","range":{"end":{"character":33,"line":55},"start":{"character":0,"line":55}},"selectionRange":{"end":{"character":27,"line":55},"start":{"character":19,"line":55}}},{"detail":"void (uint8_t)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::ssd1306_command1","range":{"end":{"character":1,"line":70},"start":{"character":0,"line":66}},"selectionRange":{"end":{"character":54,"line":67},"start":{"character":38,"line":67}}},{"detail":"void (const uint8_t *, uint8_t)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::ssd1306_commandList","range":{"end":{"character":1,"line":81},"start":{"character":0,"line":74}},"selectionRange":{"end":{"character":57,"line":75},"start":{"character":38,"line":75}}},{"detail":"bool (uint8_t, uint8_t)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::begin","range":{"end":{"character":1,"line":199},"start":{"character":0,"line":120}},"selectionRange":{"end":{"character":43,"line":121},"start":{"character":38,"line":121}}},{"detail":"void (int16_t, int16_t, uint16_t)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::drawPixel","range":{"end":{"character":1,"line":228},"start":{"character":0,"line":218}},"selectionRange":{"end":{"character":47,"line":219},"start":{"character":38,"line":219}}},{"detail":"void ()","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::clearDisplay","range":{"end":{"character":1,"line":240},"start":{"character":0,"line":237}},"selectionRange":{"end":{"character":50,"line":238},"start":{"character":38,"line":238}}},{"detail":"void (int16_t, int16_t, int16_t, uint16_t)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::drawFastVLine","range":{"end":{"character":1,"line":262},"start":{"character":0,"line":258}},"selectionRange":{"end":{"character":51,"line":259},"start":{"character":38,"line":259}}},{"detail":"void (int16_t, int16_t, int16_t, uint16_t)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::drawFastVLineInternal","range":{"end":{"character":1,"line":346},"start":{"character":0,"line":264}},"selectionRange":{"end":{"character":59,"line":265},"start":{"character":38,"line":265}}},{"detail":"void (uint8_t, uint8_t, uint8_t, uint8_t)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::clearRect","range":{"end":{"character":1,"line":353},"start":{"character":0,"line":348}},"selectionRange":{"end":{"character":47,"line":349},"start":{"character":38,"line":349}}},{"detail":"void (int16_t, int16_t, const uint8_t *, int16_t, int16_t, uint16_t)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::drawBitmap","range":{"end":{"character":1,"line":369},"start":{"character":0,"line":355}},"selectionRange":{"end":{"character":48,"line":356},"start":{"character":38,"line":356}}},{"detail":"bool (int16_t, int16_t)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::getPixel","range":{"end":{"character":1,"line":389},"start":{"character":0,"line":382}},"selectionRange":{"end":{"character":46,"line":383},"start":{"character":38,"line":383}}},{"detail":"uint8_t *()","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::getBuffer","range":{"end":{"character":1,"line":399},"start":{"character":0,"line":396}},"selectionRange":{"end":{"character":51,"line":397},"start":{"character":42,"line":397}}},{"detail":"void ()","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::display","range":{"end":{"character":1,"line":432},"start":{"character":0,"line":410}},"selectionRange":{"end":{"character":45,"line":411},"start":{"character":38,"line":411}}},{"detail":"void (bool)","kind":6,"name":"Adafruit_SSD1306<WIDTH, HEIGHT>::invertDisplay","range":{"end":{"character":1,"line":452},"start":{"character":0,"line":449}},"selectionRange":{"end":{"character":51,"line":450},"start":{"character":38,"line":450}}}]}
>>>
Content-Length: 197

{"jsonrpc":"2.0","id":"31","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h"}}}
<<<
Content-Length: 4289

{"id":"31","jsonrpc":"2.0","result":[{"children":[{"detail":"()","kind":9,"name":"Adafruit_SSD1306","range":{"end":{"character":30,"line":87},"start":{"character":2,"line":87}},"selectionRange":{"end":{"character":18,"line":87},"start":{"character":2,"line":87}}},{"kind":9,"name":"~Adafruit_SSD1306","range":{"end":{"character":35,"line":89},"start":{"character":2,"line":89}},"selectionRange":{"end":{"character":3,"line":89},"start":{"character":2,"line":89}}},{"detail":"bool (int, int)","kind":6,"name":"begin","range":{"end":{"character":35,"line":92},"start":{"character":2,"line":91}},"selectionRange":{"end":{"character":17,"line":91},"start":{"character":12,"line":91}}},{"detail":"void ()","kind":6,"name":"display","range":{"end":{"character":28,"line":93},"start":{"character":2,"line":93}},"selectionRange":{"end":{"character":22,"line":93},"start":{"character":15,"line":93}}},{"detail":"void ()","kind":6,"name":"clearDisplay","range":{"end":{"character":33,"line":94},"start":{"character":2,"line":94}},"selectionRange":{"end":{"character":27,"line":94},"start":{"character":15,"line":94}}},{"detail":"void (bool)","kind":6,"name":"invertDisplay","range":{"end":{"character":36,"line":95},"start":{"character":2,"line":95}},"selectionRange":{"end":{"character":28,"line":95},"start":{"character":15,"line":95}}},{"detail":"void (int, int, int)","kind":6,"name":"drawPixel","range":{"end":{"character":62,"line":96},"start":{"character":2,"line":96}},"selectionRange":{"end":{"character":24,"line":96},"start":{"character":15,"line":96}}},{"detail":"void (int, int, int, int)","kind":6,"name":"drawFastVLine","range":{"end":{"character":69,"line":97},"start":{"character":2,"line":97}},"selectionRange":{"end":{"character":20,"line":97},"start":{"character":7,"line":97}}},{"detail":"bool (int, int)","kind":6,"name":"getPixel","range":{"end":{"character":42,"line":98},"start":{"character":2,"line":98}},"selectionRange":{"end":{"character":20,"line":98},"start":{"character":12,"line":98}}},{"detail":"int *()","kind":6,"name":"getBuffer","range":{"end":{"character":30,"line":99},"start":{"character":2,"line":99}},"selectionRange":{"end":{"character":24,"line":99},"start":{"character":15,"line":99}}},{"detail":"void (int, int, int, int)","kind":6,"name":"clearRect","range":{"end":{"character":52,"line":100},"start":{"character":2,"line":100}},"selectionRange":{"end":{"character":16,"line":100},"start":{"character":7,"line":100}}},{"detail":"void (int, int, const int *, int, int, int)","kind":6,"name":"drawBitmap","range":{"end":{"character":101,"line":101},"start":{"character":2,"line":101}},"selectionRange":{"end":{"character":17,"line":101},"start":{"character":7,"line":101}}},{"detail":"void (int, int, int, int)","kind":6,"name":"drawFastVLineInternal","range":{"end":{"character":32,"line":105},"start":{"character":2,"line":104}},"selectionRange":{"end":{"character":36,"line":104},"start":{"character":15,"line":104}}},{"detail":"void (int)","kind":6,"name":"ssd1306_command1","range":{"end":{"character":42,"line":106},"start":{"character":2,"line":106}},"selectionRange":{"end":{"character":31,"line":106},"start":{"character":15,"line":106}}},{"detail":"void (const int *, int)","kind":6,"name":"ssd1306_commandList","range":{"end":{"character":63,"line":107},"start":{"character":2,"line":107}},"selectionRange":{"end":{"character":34,"line":107},"start":{"character":15,"line":107}}},{"detail":"int","kind":8,"name":"i2caddr","range":{"end":{"character":22,"line":110},"start":{"character":2,"line":110}},"selectionRange":{"end":{"character":22,"line":110},"start":{"character":15,"line":110}}},{"detail":"int","kind":8,"name":"vccstate","range":{"end":{"character":32,"line":110},"start":{"character":2,"line":110}},"selectionRange":{"end":{"character":32,"line":110},"start":{"character":24,"line":110}}},{"detail":"int","kind":8,"name":"page_end","range":{"end":{"character":42,"line":110},"start":{"character":2,"line":110}},"selectionRange":{"end":{"character":42,"line":110},"start":{"character":34,"line":110}}}],"detail":"template class","kind":5,"name":"Adafruit_SSD1306","range":{"end":{"character":1,"line":111},"start":{"character":0,"line":85}},"selectionRange":{"end":{"character":22,"line":85},"start":{"character":6,"line":85}}}]}
>>>
Content-Length: 202

{"jsonrpc":"2.0","id":"32","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.cpp"}}}
<<<
Content-Length: 3249

{"id":"32","jsonrpc":"2.0","result":[{"detail":"unsigned char[344]","kind":13,"name":"TWI_buf","range":{"end":{"character":47,"line":51},"start":{"character":0,"line":51}},"selectionRange":{"end":{"character":28,"line":51},"start":{"character":21,"line":51}}},{"detail":"uint16_t","kind":13,"name":"TWI_msgSize","range":{"end":{"character":27,"line":52},"start":{"character":0,"line":52}},"selectionRange":{"end":{"character":27,"line":52},"start":{"character":16,"line":52}}},{"detail":"unsigned char","kind":13,"name":"TWI_state","range":{"end":{"character":45,"line":53},"start":{"character":0,"line":53}},"selectionRange":{"end":{"character":30,"line":53},"start":{"character":21,"line":53}}},{"detail":"unsigned char","kind":13,"name":"lastTransOK","range":{"end":{"character":32,"line":54},"start":{"character":0,"line":54}},"selectionRange":{"end":{"character":32,"line":54},"start":{"character":21,"line":54}}},{"detail":"void ()","kind":12,"name":"TWI_Master_Initialise","range":{"end":{"character":1,"line":68},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":26,"line":60},"start":{"character":5,"line":60}}},{"detail":"unsigned char ()","kind":12,"name":"TWI_Transceiver_Busy","range":{"end":{"character":1,"line":76},"start":{"character":0,"line":73}},"selectionRange":{"end":{"character":34,"line":73},"start":{"character":14,"line":73}}},{"detail":"unsigned char ()","kind":12,"name":"TWI_Get_State_Info","range":{"end":{"character":1,"line":87},"start":{"character":0,"line":83}},"selectionRange":{"end":{"character":32,"line":83},"start":{"character":14,"line":83}}},{"detail":"void (uint8_t, unsigned char *, uint16_t)","kind":12,"name":"TWI_Start_Transceiver_With_Data","range":{"end":{"character":1,"line":114},"start":{"character":0,"line":96}},"selectionRange":{"end":{"character":36,"line":96},"start":{"character":5,"line":96}}},{"detail":"void ()","kind":12,"name":"TWI_Start_Transceiver","range":{"end":{"character":1,"line":130},"start":{"character":0,"line":121}},"selectionRange":{"end":{"character":26,"line":121},"start":{"character":5,"line":121}}},{"detail":"unsigned char (unsigned char *, unsigned char)","kind":12,"name":"TWI_Get_Data_From_Transceiver","range":{"end":{"character":1,"line":154},"start":{"character":0,"line":140}},"selectionRange":{"end":{"character":43,"line":140},"start":{"character":14,"line":140}}},{"children":[{"children":[{"detail":"void ()","kind":12,"name":"__vector_24","range":{"end":{"character":3,"line":162},"start":{"character":0,"line":162}},"selectionRange":{"end":{"character":3,"line":162},"start":{"character":0,"line":162}}},{"detail":"void ()","kind":12,"name":"__vector_24","range":{"end":{"character":1,"line":232},"start":{"character":0,"line":162}},"selectionRange":{"end":{"character":3,"line":162},"start":{"character":0,"line":162}}}],"kind":21,"name":"TWI_vect","range":{"end":{"character":1,"line":232},"start":{"character":0,"line":162}},"selectionRange":{"end":{"character":12,"line":162},"start":{"character":4,"line":162}}}],"detail":"(TWI_vect)","kind":21,"name":"ISR","range":{"end":{"character":1,"line":232},"start":{"character":0,"line":162}},"selectionRange":{"end":{"character":3,"line":162},"start":{"character":0,"line":162}}}]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"33","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"}}}
<<<
Content-Length: 1709

{"id":"33","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"TWI_BUFFER_SIZE","range":{"end":{"character":34,"line":50},"start":{"character":0,"line":50}},"selectionRange":{"end":{"character":34,"line":50},"start":{"character":19,"line":50}}},{"detail":"void ()","kind":12,"name":"TWI_Master_Initialise","range":{"end":{"character":34,"line":57},"start":{"character":0,"line":57}},"selectionRange":{"end":{"character":26,"line":57},"start":{"character":5,"line":57}}},{"detail":"unsigned char ()","kind":12,"name":"TWI_Transceiver_Busy","range":{"end":{"character":42,"line":58},"start":{"character":0,"line":58}},"selectionRange":{"end":{"character":34,"line":58},"start":{"character":14,"line":58}}},{"detail":"unsigned char ()","kind":12,"name":"TWI_Get_State_Info","range":{"end":{"character":40,"line":59},"start":{"character":0,"line":59}},"selectionRange":{"end":{"character":32,"line":59},"start":{"character":14,"line":59}}},{"detail":"void (int, unsigned char *, int)","kind":12,"name":"TWI_Start_Transceiver_With_Data","range":{"end":{"character":78,"line":60},"start":{"character":0,"line":60}},"selectionRange":{"end":{"character":36,"line":60},"start":{"character":5,"line":60}}},{"detail":"void ()","kind":12,"name":"TWI_Start_Transceiver","range":{"end":{"character":34,"line":61},"start":{"character":0,"line":61}},"selectionRange":{"end":{"character":26,"line":61},"start":{"character":5,"line":61}}},{"detail":"unsigned char (unsigned char *, unsigned char)","kind":12,"name":"TWI_Get_Data_From_Transceiver","range":{"end":{"character":77,"line":62},"start":{"character":0,"line":62}},"selectionRange":{"end":{"character":43,"line":62},"start":{"character":14,"line":62}}}]}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"34","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2000

{"id":"34","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"35","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":12,"character":17}}}
<<<
Content-Length: 41

{"id":"35","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"36","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":29}}}
<<<
Content-Length: 41

{"id":"36","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"37","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":33}}}
<<<
Content-Length: 41

{"id":"37","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"38","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":17,"character":33}}}
<<<
Content-Length: 41

{"id":"38","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"39","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":17,"character":26}}}
<<<
Content-Length: 269

{"id":"39","jsonrpc":"2.0","result":{"contents":{"kind":"markdown","value":"### variable `DATA_SERIAL`  \n\n---\nType: `const int`  \n\n---\n```cpp\npublic: constexpr int DATA_SERIAL\n```"},"range":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}}}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"40","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":10,"character":29}}}
<<<
Content-Length: 41

{"id":"40","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"41","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":10,"character":28}}}
<<<
Content-Length: 41

{"id":"41","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"42","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":50}}}
<<<
Content-Length: 41

{"id":"42","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"43","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":50}}}
<<<
Content-Length: 41

{"id":"43","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"44","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":51}}}
<<<
Content-Length: 41

{"id":"44","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"45","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":52}}}
<<<
Content-Length: 41

{"id":"45","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"46","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":52}}}
<<<
Content-Length: 41

{"id":"46","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"47","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":52}}}
<<<
Content-Length: 41

{"id":"47","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"48","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":53}}}
<<<
Content-Length: 41

{"id":"48","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"49","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":53}}}
<<<
Content-Length: 41

{"id":"49","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"50","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":54}}}
<<<
Content-Length: 41

{"id":"50","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"51","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":54}}}
<<<
Content-Length: 41

{"id":"51","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"52","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":54}}}
<<<
Content-Length: 41

{"id":"52","jsonrpc":"2.0","result":null}
>>>
Content-Length: 227

{"jsonrpc":"2.0","id":"53","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":9,"character":28}}}
<<<
Content-Length: 41

{"id":"53","jsonrpc":"2.0","result":null}
>>>
Content-Length: 227

{"jsonrpc":"2.0","id":"54","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":9,"character":26}}}
<<<
Content-Length: 41

{"id":"54","jsonrpc":"2.0","result":null}
>>>
Content-Length: 228

{"jsonrpc":"2.0","id":"55","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":25,"character":34}}}
<<<
Content-Length: 41

{"id":"55","jsonrpc":"2.0","result":null}
>>>
Content-Length: 240

{"jsonrpc":"2.0","id":"56","method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":10,"character":30}}}
<<<
Content-Length: 39

{"id":"56","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 302

{"jsonrpc":"2.0","id":"57","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":10,"character":30},"end":{"line":10,"character":30}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 39

{"id":"57","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":2},"contentChanges":[{"range":{"start":{"line":10,"character":29},"end":{"line":10,"character":30}},"text":""}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"58","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 111

{"id":2,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":2,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 2000

{"id":"58","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"59","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 2146

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":2}}Content-Length: 2000

{"id":"59","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":3},"contentChanges":[{"range":{"start":{"line":10,"character":28},"end":{"line":10,"character":29}},"text":""}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"60","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2000

{"id":"60","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"61","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2146

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":3}}Content-Length: 2000

{"id":"61","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 306

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":4},"contentChanges":[{"range":{"start":{"line":10,"character":28},"end":{"line":10,"character":28}},"text":"A"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"62","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2000

{"id":"62","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"63","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2146

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":4}}Content-Length: 2000

{"id":"63","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 302

{"jsonrpc":"2.0","id":"64","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":10,"character":29},"end":{"line":10,"character":29}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 39

{"id":"64","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 306

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":5},"contentChanges":[{"range":{"start":{"line":10,"character":29},"end":{"line":10,"character":29}},"text":"0"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"65","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2000

{"id":"65","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"66","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2146

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":5}}Content-Length: 2000

{"id":"66","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 302

{"jsonrpc":"2.0","id":"67","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":10,"character":30},"end":{"line":10,"character":30}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 39

{"id":"67","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 240

{"jsonrpc":"2.0","id":"68","method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":10,"character":30}}}
<<<
Content-Length: 39

{"id":"68","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 302

{"jsonrpc":"2.0","id":"69","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":10,"character":30},"end":{"line":10,"character":30}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 39

{"id":"69","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28837

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":4},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}
<<<
Content-Length: 204

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.cpp","version":1}}Content-Length: 8281

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":23,"line":27},"start":{"character":9,"line":27}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":19,"line":28},"start":{"character":9,"line":28}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":45},"start":{"character":9,"line":45}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/string.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":84},"start":{"character":10,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":84},"start":{"character":25,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":25,"line":91},"start":{"character":18,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":92},"start":{"character":17,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":32,"line":96},"start":{"character":25,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":43,"line":96},"start":{"character":36,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":55,"line":96},"start":{"character":47,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":97},"start":{"character":21,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":97},"start":{"character":32,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":50,"line":97},"start":{"character":43,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":62,"line":97},"start":{"character":54,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":98},"start":{"character":21,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":98},"start":{"character":32,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":99},"start":{"character":2,"line":99}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":100},"start":{"character":17,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":33,"line":100},"start":{"character":26,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":42,"line":100},"start":{"character":35,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":100},"start":{"character":44,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":25,"line":101},"start":{"character":18,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":36,"line":101},"start":{"character":29,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":53,"line":101},"start":{"character":46,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":71,"line":101},"start":{"character":64,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":82,"line":101},"start":{"character":75,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":94,"line":101},"start":{"character":86,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":44,"line":104},"start":{"character":37,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":55,"line":104},"start":{"character":48,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":66,"line":104},"start":{"character":59,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":25,"line":105},"start":{"character":17,"line":105}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":106},"start":{"character":32,"line":106}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":48,"line":107},"start":{"character":41,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":60,"line":107},"start":{"character":53,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":109},"start":{"character":2,"line":109}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":110},"start":{"character":2,"line":110}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h","version":1}}Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.cpp","version":1}}Content-Length: 203

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.cpp","version":1}}Content-Length: 674

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/level.h","version":1}}Content-Length: 1556

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":13},"start":{"character":9,"line":13}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUTPUT' (fix available)","range":{"end":{"character":27,"line":35},"start":{"character":21,"line":35}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'ISR' (fix available)","range":{"end":{"character":3,"line":83},"start":{"character":0,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":4,"line":84},"start":{"character":2,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":96},"start":{"character":0,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sound.h","version":1}}Content-Length: 28505

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":20,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":11},"start":{"character":13,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":37,"line":11},"start":{"character":29,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":29,"line":16},"start":{"character":22,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":40,"line":16},"start":{"character":33,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":16},"start":{"character":44,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":17},"start":{"character":16,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":18},"start":{"character":14,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":18},"start":{"character":25,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":18},"start":{"character":36,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":19},"start":{"character":0,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":19},"start":{"character":16,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":34,"line":19},"start":{"character":27,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":20},"start":{"character":15,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":20},"start":{"character":25,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":21},"start":{"character":15,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":21},"start":{"character":26,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":21},"start":{"character":42,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":21},"start":{"character":56,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":22,"line":22},"start":{"character":16,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":22},"start":{"character":26,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":49,"line":22},"start":{"character":42,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":73,"line":22},"start":{"character":66,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":89,"line":22},"start":{"character":82,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":100,"line":22},"start":{"character":93,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":111,"line":22},"start":{"character":104,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":23},"start":{"character":14,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":23},"start":{"character":24,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":24},"start":{"character":24,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":24},"start":{"character":45,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":25},"start":{"character":14,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":25},"start":{"character":24,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":25},"start":{"character":40,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":72,"line":25},"start":{"character":65,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint32_t' (fix available)","range":{"end":{"character":8,"line":32},"start":{"character":0,"line":32}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":36},"start":{"character":0,"line":36}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":41},"start":{"character":0,"line":41}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":10,"line":47},"start":{"character":4,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'F'","range":{"end":{"character":20,"line":47},"start":{"character":19,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":15,"line":62},"start":{"character":9,"line":62}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":25,"line":63},"start":{"character":19,"line":63}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":24,"line":64},"start":{"character":18,"line":64}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":72},"start":{"character":14,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":72},"start":{"character":25,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":72},"start":{"character":36,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'boolean'","range":{"end":{"character":7,"line":78},"start":{"character":0,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":78},"start":{"character":25,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":78},"start":{"character":36,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":54,"line":78},"start":{"character":47,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":25,"line":80},"start":{"character":11,"line":80}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":82},"start":{"character":2,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":43,"line":82},"start":{"character":29,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":69,"line":82},"start":{"character":55,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":87,"line":82},"start":{"character":72,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":38,"line":83},"start":{"character":24,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":83},"start":{"character":42,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":74,"line":83},"start":{"character":59,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":39,"line":84},"start":{"character":24,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":84},"start":{"character":42,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'gradient'","range":{"end":{"character":40,"line":87},"start":{"character":32,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":17,"line":87},"start":{"character":9,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":90},"start":{"character":16,"line":90}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":91},"start":{"character":7,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":92},"start":{"character":9,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":101},"start":{"character":15,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":101},"start":{"character":25,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":123},"start":{"character":15,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":123},"start":{"character":26,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":123},"start":{"character":42,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":123},"start":{"character":56,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":124},"start":{"character":2,"line":124}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":125},"start":{"character":2,"line":125}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":126},"start":{"character":2,"line":126}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":127},"start":{"character":2,"line":127}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":130},"start":{"character":2,"line":130}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":131},"start":{"character":2,"line":131}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":170},"start":{"character":2,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":18,"line":170},"start":{"character":12,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":15,"line":171},"start":{"character":8,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":171},"start":{"character":32,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":9,"line":172},"start":{"character":2,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":20,"line":172},"start":{"character":13,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":173},"start":{"character":2,"line":173}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":176},"start":{"character":2,"line":176}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":177},"start":{"character":2,"line":177}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":178},"start":{"character":2,"line":178}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":179},"start":{"character":2,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'max'","range":{"end":{"character":26,"line":179},"start":{"character":23,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":10,"line":180},"start":{"character":2,"line":180}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":191},"start":{"character":7,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":11,"line":197},"start":{"character":4,"line":197}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":199},"start":{"character":9,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":13,"line":200},"start":{"character":6,"line":200}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":14,"line":201},"start":{"character":6,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":26,"line":208},"start":{"character":18,"line":208}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":24,"line":211},"start":{"character":16,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":212},"start":{"character":13,"line":212}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":213},"start":{"character":15,"line":213}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":225},"start":{"character":14,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":225},"start":{"character":24,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":226},"start":{"character":2,"line":226}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":227},"start":{"character":2,"line":227}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":228},"start":{"character":2,"line":228}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":229},"start":{"character":2,"line":229}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":230},"start":{"character":2,"line":230}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":17,"line":233},"start":{"character":9,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":38,"line":233},"start":{"character":30,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_HEIGHT'","range":{"end":{"character":27,"line":236},"start":{"character":16,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font'","range":{"end":{"character":30,"line":237},"start":{"character":22,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font_width'","range":{"end":{"character":55,"line":237},"start":{"character":41,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":30,"line":238},"start":{"character":20,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":18,"line":239},"start":{"character":10,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":245},"start":{"character":14,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":245},"start":{"character":24,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":245},"start":{"character":45,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":246},"start":{"character":2,"line":246}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":247},"start":{"character":2,"line":247}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":252},"start":{"character":11,"line":252}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":260},"start":{"character":14,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":260},"start":{"character":24,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":260},"start":{"character":40,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":75,"line":260},"start":{"character":68,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":261},"start":{"character":2,"line":261}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":262},"start":{"character":2,"line":262}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'PGM_P'","range":{"end":{"character":43,"line":264},"start":{"character":37,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":267},"start":{"character":11,"line":267}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":272},"start":{"character":14,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":272},"start":{"character":25,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":272},"start":{"character":36,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h","version":1}}Content-Length: 201

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.cpp","version":1}}Content-Length: 3244

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":51,"line":506},"start":{"character":50,"line":506}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":51,"line":508},"start":{"character":50,"line":508}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":44,"line":519},"start":{"character":33,"line":519}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":64,"line":519},"start":{"character":51,"line":519}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":44,"line":520},"start":{"character":33,"line":520}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":64,"line":520},"start":{"character":51,"line":520}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":42,"line":576},"start":{"character":29,"line":576}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":48,"line":624},"start":{"character":30,"line":624}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":49,"line":625},"start":{"character":30,"line":625}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":638},"start":{"character":30,"line":638}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":652},"start":{"character":30,"line":652}},"relatedInformation":[],"severity":2,"source":"clang-tidy"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":4}}
>>>
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":6},"contentChanges":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"text":"i"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"70","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 111

{"id":3,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 1996

{"id":"70","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"uint8_t","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"71","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2371

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'i'","range":{"end":{"character":1,"line":3},"start":{"character":0,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":6}}Content-Length: 1996

{"id":"71","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"uint8_t","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":7},"contentChanges":[{"range":{"start":{"line":3,"character":1},"end":{"line":3,"character":1}},"text":"n"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"72","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1996

{"id":"72","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"uint8_t","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2372

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'in'","range":{"end":{"character":2,"line":3},"start":{"character":0,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":7}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"73","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1996

{"id":"73","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"uint8_t","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 298

{"jsonrpc":"2.0","id":"74","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 39

{"id":"74","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":8},"contentChanges":[{"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":2}},"text":"t"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"75","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1996

{"id":"75","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"uint8_t","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2433

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":8}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"76","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1996

{"id":"76","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"uint8_t","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 298

{"jsonrpc":"2.0","id":"77","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":3},"end":{"line":3,"character":3}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 39

{"id":"77","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 302

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":9},"contentChanges":[{"range":{"start":{"line":3,"character":3},"end":{"line":3,"character":3}},"text":" "}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"78","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1996

{"id":"78","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"uint8_t","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2433

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"default_init_const","message":"Default initialization of an object of const type 'const int' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":9}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"79","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1996

{"id":"79","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"uint8_t","range":{"end":{"character":17,"line":15},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28837

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":5},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}
<<<
Content-Length: 1556

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":13},"start":{"character":9,"line":13}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUTPUT' (fix available)","range":{"end":{"character":27,"line":35},"start":{"character":21,"line":35}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'ISR' (fix available)","range":{"end":{"character":3,"line":83},"start":{"character":0,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":4,"line":84},"start":{"character":2,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":96},"start":{"character":0,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sound.h","version":1}}Content-Length: 950

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"redefinition_different_kind","message":"In included file: redefinition of 'uint8_t' as different kind of symbol","range":{"end":{"character":22,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"},{"location":{"range":{"end":{"character":28,"line":125},"start":{"character":21,"line":125}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdint.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.cpp","version":1}}Content-Length: 947

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"redefinition_different_kind","message":"In included file: redefinition of 'uint8_t' as different kind of symbol","range":{"end":{"character":22,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"},{"location":{"range":{"end":{"character":28,"line":125},"start":{"character":21,"line":125}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdint.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.cpp","version":1}}Content-Length: 674

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/level.h","version":1}}Content-Length: 8281

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":23,"line":27},"start":{"character":9,"line":27}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":19,"line":28},"start":{"character":9,"line":28}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":45},"start":{"character":9,"line":45}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/string.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":84},"start":{"character":10,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":84},"start":{"character":25,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":25,"line":91},"start":{"character":18,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":92},"start":{"character":17,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":32,"line":96},"start":{"character":25,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":43,"line":96},"start":{"character":36,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":55,"line":96},"start":{"character":47,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":97},"start":{"character":21,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":97},"start":{"character":32,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":50,"line":97},"start":{"character":43,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":62,"line":97},"start":{"character":54,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":98},"start":{"character":21,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":98},"start":{"character":32,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":99},"start":{"character":2,"line":99}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":100},"start":{"character":17,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":33,"line":100},"start":{"character":26,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":42,"line":100},"start":{"character":35,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":100},"start":{"character":44,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":25,"line":101},"start":{"character":18,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":36,"line":101},"start":{"character":29,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":53,"line":101},"start":{"character":46,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":71,"line":101},"start":{"character":64,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":82,"line":101},"start":{"character":75,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":94,"line":101},"start":{"character":86,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":44,"line":104},"start":{"character":37,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":55,"line":104},"start":{"character":48,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":66,"line":104},"start":{"character":59,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":25,"line":105},"start":{"character":17,"line":105}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":106},"start":{"character":32,"line":106}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":48,"line":107},"start":{"character":41,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":60,"line":107},"start":{"character":53,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":109},"start":{"character":2,"line":109}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":110},"start":{"character":2,"line":110}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h","version":1}}Content-Length: 951

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"redefinition_different_kind","message":"In included file: redefinition of 'uint8_t' as different kind of symbol","range":{"end":{"character":20,"line":51},"start":{"character":9,"line":51}},"relatedInformation":[{"location":{"range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"},{"location":{"range":{"end":{"character":28,"line":125},"start":{"character":21,"line":125}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdint.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.cpp","version":1}}Content-Length: 947

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"redefinition_different_kind","message":"In included file: redefinition of 'uint8_t' as different kind of symbol","range":{"end":{"character":22,"line":3},"start":{"character":9,"line":3}},"relatedInformation":[{"location":{"range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"},{"location":{"range":{"end":{"character":28,"line":125},"start":{"character":21,"line":125}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdint.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.cpp","version":1}}Content-Length: 44728

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":20,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":11},"start":{"character":13,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":37,"line":11},"start":{"character":29,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":29,"line":16},"start":{"character":22,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":40,"line":16},"start":{"character":33,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":16},"start":{"character":44,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":17},"start":{"character":16,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":18},"start":{"character":14,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":18},"start":{"character":25,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":18},"start":{"character":36,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":19},"start":{"character":0,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":19},"start":{"character":16,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":34,"line":19},"start":{"character":27,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":20},"start":{"character":15,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":20},"start":{"character":25,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":21},"start":{"character":15,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":21},"start":{"character":26,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":21},"start":{"character":42,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":21},"start":{"character":56,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":22,"line":22},"start":{"character":16,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":22},"start":{"character":26,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":49,"line":22},"start":{"character":42,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":73,"line":22},"start":{"character":66,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":89,"line":22},"start":{"character":82,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":100,"line":22},"start":{"character":93,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":111,"line":22},"start":{"character":104,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":23},"start":{"character":14,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":23},"start":{"character":24,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":24},"start":{"character":24,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":24},"start":{"character":45,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":25},"start":{"character":14,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":25},"start":{"character":24,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":25},"start":{"character":40,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":72,"line":25},"start":{"character":65,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint32_t' (fix available)","range":{"end":{"character":8,"line":32},"start":{"character":0,"line":32}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":36},"start":{"character":0,"line":36}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":41},"start":{"character":0,"line":41}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":10,"line":47},"start":{"character":4,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'F'","range":{"end":{"character":20,"line":47},"start":{"character":19,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":15,"line":62},"start":{"character":9,"line":62}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":25,"line":63},"start":{"character":19,"line":63}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":24,"line":64},"start":{"character":18,"line":64}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":72},"start":{"character":14,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":72},"start":{"character":25,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":72},"start":{"character":36,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'boolean'","range":{"end":{"character":7,"line":78},"start":{"character":0,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":78},"start":{"character":25,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":78},"start":{"character":36,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":54,"line":78},"start":{"character":47,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":25,"line":80},"start":{"character":11,"line":80}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":15,"line":82},"start":{"character":10,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'index'","range":{"end":{"character":15,"line":82},"start":{"character":10,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":43,"line":82},"start":{"character":29,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":69,"line":82},"start":{"character":55,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":87,"line":82},"start":{"character":72,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":38,"line":83},"start":{"character":24,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":83},"start":{"character":42,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":74,"line":83},"start":{"character":59,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":39,"line":84},"start":{"character":24,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":84},"start":{"character":42,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'gradient'","range":{"end":{"character":40,"line":87},"start":{"character":32,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'index'","range":{"end":{"character":48,"line":87},"start":{"character":43,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":17,"line":87},"start":{"character":9,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":90},"start":{"character":16,"line":90}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":91},"start":{"character":7,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":92},"start":{"character":9,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":101},"start":{"character":15,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":101},"start":{"character":25,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":123},"start":{"character":15,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":123},"start":{"character":26,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":123},"start":{"character":42,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":123},"start":{"character":56,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":124},"start":{"character":2,"line":124}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":125},"start":{"character":2,"line":125}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":126},"start":{"character":2,"line":126}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":127},"start":{"character":10,"line":127}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":11,"line":127},"start":{"character":10,"line":127}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":12,"line":130},"start":{"character":10,"line":130}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bp'","range":{"end":{"character":12,"line":130},"start":{"character":10,"line":130}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":131},"start":{"character":10,"line":131}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":11,"line":131},"start":{"character":10,"line":131}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":8,"line":132},"start":{"character":7,"line":132}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":15,"line":132},"start":{"character":14,"line":132}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":32,"line":132},"start":{"character":31,"line":132}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":5,"line":134},"start":{"character":4,"line":134}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bp'","range":{"end":{"character":8,"line":136},"start":{"character":6,"line":136}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":7,"line":137},"start":{"character":6,"line":137}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":11,"line":137},"start":{"character":10,"line":137}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":36,"line":137},"start":{"character":35,"line":137}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bp'","range":{"end":{"character":57,"line":137},"start":{"character":55,"line":137}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bp'","range":{"end":{"character":12,"line":139},"start":{"character":10,"line":139}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":22,"line":141},"start":{"character":21,"line":141}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":28,"line":141},"start":{"character":27,"line":141}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":9,"line":142},"start":{"character":8,"line":142}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bp'","range":{"end":{"character":10,"line":149},"start":{"character":8,"line":149}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":20,"line":150},"start":{"character":19,"line":150}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":30,"line":150},"start":{"character":29,"line":150}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":170},"start":{"character":2,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":18,"line":170},"start":{"character":12,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":15,"line":171},"start":{"character":8,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":171},"start":{"character":32,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":9,"line":172},"start":{"character":2,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":20,"line":172},"start":{"character":13,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":173},"start":{"character":2,"line":173}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":12,"line":176},"start":{"character":10,"line":176}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'tw'","range":{"end":{"character":12,"line":176},"start":{"character":10,"line":176}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":12,"line":177},"start":{"character":10,"line":177}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'th'","range":{"end":{"character":12,"line":177},"start":{"character":10,"line":177}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":20,"line":178},"start":{"character":10,"line":178}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'byte_width'","range":{"end":{"character":20,"line":178},"start":{"character":10,"line":178}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":20,"line":179},"start":{"character":10,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":20,"line":179},"start":{"character":10,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'max'","range":{"end":{"character":26,"line":179},"start":{"character":23,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":10,"line":180},"start":{"character":2,"line":180}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'byte_width'","range":{"end":{"character":37,"line":180},"start":{"character":27,"line":180}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":191},"start":{"character":7,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'th'","range":{"end":{"character":30,"line":191},"start":{"character":28,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":48,"line":191},"start":{"character":38,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":14,"line":197},"start":{"character":12,"line":197}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sy'","range":{"end":{"character":14,"line":197},"start":{"character":12,"line":197}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":199},"start":{"character":9,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'tw'","range":{"end":{"character":32,"line":199},"start":{"character":30,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":50,"line":199},"start":{"character":40,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":16,"line":200},"start":{"character":14,"line":200}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sx'","range":{"end":{"character":16,"line":200},"start":{"character":14,"line":200}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":14,"line":201},"start":{"character":6,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sy'","range":{"end":{"character":47,"line":201},"start":{"character":45,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'byte_width'","range":{"end":{"character":60,"line":201},"start":{"character":50,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sx'","range":{"end":{"character":65,"line":201},"start":{"character":63,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":26,"line":208},"start":{"character":18,"line":208}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sx'","range":{"end":{"character":64,"line":208},"start":{"character":62,"line":208}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":24,"line":211},"start":{"character":16,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sx'","range":{"end":{"character":64,"line":211},"start":{"character":62,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":212},"start":{"character":13,"line":212}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":44,"line":212},"start":{"character":34,"line":212}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":213},"start":{"character":15,"line":213}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":46,"line":213},"start":{"character":36,"line":213}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":225},"start":{"character":14,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":225},"start":{"character":24,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":226},"start":{"character":10,"line":226}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":11,"line":226},"start":{"character":10,"line":226}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":227},"start":{"character":10,"line":227}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":11,"line":227},"start":{"character":10,"line":227}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":17,"line":228},"start":{"character":10,"line":228}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bOffset'","range":{"end":{"character":17,"line":228},"start":{"character":10,"line":228}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":229},"start":{"character":10,"line":229}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":11,"line":229},"start":{"character":10,"line":229}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":14,"line":230},"start":{"character":10,"line":230}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":14,"line":230},"start":{"character":10,"line":230}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":17,"line":233},"start":{"character":9,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":19,"line":233},"start":{"character":18,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":38,"line":233},"start":{"character":30,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":40,"line":233},"start":{"character":39,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":52,"line":233},"start":{"character":51,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bOffset'","range":{"end":{"character":9,"line":235},"start":{"character":2,"line":235}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":13,"line":235},"start":{"character":12,"line":235}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":13,"line":236},"start":{"character":9,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_HEIGHT'","range":{"end":{"character":27,"line":236},"start":{"character":16,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":33,"line":236},"start":{"character":29,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":5,"line":237},"start":{"character":4,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font'","range":{"end":{"character":30,"line":237},"start":{"character":22,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":38,"line":237},"start":{"character":34,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font_width'","range":{"end":{"character":55,"line":237},"start":{"character":41,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bOffset'","range":{"end":{"character":65,"line":237},"start":{"character":58,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":10,"line":238},"start":{"character":9,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":17,"line":238},"start":{"character":16,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":30,"line":238},"start":{"character":20,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":33,"line":238},"start":{"character":32,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":20,"line":239},"start":{"character":19,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":18,"line":239},"start":{"character":10,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":24,"line":239},"start":{"character":23,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":46,"line":239},"start":{"character":45,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":23,"line":240},"start":{"character":22,"line":240}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":33,"line":240},"start":{"character":29,"line":240}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":245},"start":{"character":14,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":245},"start":{"character":24,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":245},"start":{"character":45,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":13,"line":246},"start":{"character":10,"line":246}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":13,"line":246},"start":{"character":10,"line":246}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":247},"start":{"character":10,"line":247}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":11,"line":247},"start":{"character":10,"line":247}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":20,"line":249},"start":{"character":19,"line":249}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":16,"line":250},"start":{"character":13,"line":250}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":5,"line":251},"start":{"character":4,"line":251}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":7,"line":252},"start":{"character":4,"line":252}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":252},"start":{"character":11,"line":252}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":11,"line":255},"start":{"character":8,"line":255}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":260},"start":{"character":14,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":260},"start":{"character":24,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":260},"start":{"character":40,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":75,"line":260},"start":{"character":68,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":13,"line":261},"start":{"character":10,"line":261}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":13,"line":261},"start":{"character":10,"line":261}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":262},"start":{"character":10,"line":262}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":11,"line":262},"start":{"character":10,"line":262}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":12,"line":264},"start":{"character":9,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'PGM_P'","range":{"end":{"character":43,"line":264},"start":{"character":37,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":52,"line":264},"start":{"character":51,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":16,"line":265},"start":{"character":13,"line":265}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":5,"line":266},"start":{"character":4,"line":266}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":7,"line":267},"start":{"character":4,"line":267}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":267},"start":{"character":11,"line":267}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":272},"start":{"character":14,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":272},"start":{"character":25,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":272},"start":{"character":36,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h","version":1}}
>>>
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":10},"contentChanges":[{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":4}},"text":"f"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"80","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 111

{"id":4,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 2195

{"id":"80","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"f","range":{"end":{"character":5,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":5,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2394

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":5,"line":3},"start":{"character":5,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":10}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 3714

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":47},"start":{"character":9,"line":47}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":51,"line":506},"start":{"character":50,"line":506}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":51,"line":508},"start":{"character":50,"line":508}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":44,"line":519},"start":{"character":33,"line":519}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":64,"line":519},"start":{"character":51,"line":519}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":44,"line":520},"start":{"character":33,"line":520}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":64,"line":520},"start":{"character":51,"line":520}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":42,"line":576},"start":{"character":29,"line":576}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":48,"line":624},"start":{"character":30,"line":624}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":49,"line":625},"start":{"character":30,"line":625}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":638},"start":{"character":30,"line":638}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":652},"start":{"character":30,"line":652}},"relatedInformation":[],"severity":2,"source":"clang-tidy"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":5}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"81","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2195

{"id":"81","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"f","range":{"end":{"character":5,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":5,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 298

{"jsonrpc":"2.0","id":"82","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":5}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 39

{"id":"82","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":11},"contentChanges":[{"range":{"start":{"line":3,"character":5},"end":{"line":3,"character":5}},"text":"o"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"83","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2196

{"id":"83","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fo","range":{"end":{"character":6,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":6,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2394

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":6,"line":3},"start":{"character":6,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":11}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"84","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2196

{"id":"84","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fo","range":{"end":{"character":6,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":6,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":12},"contentChanges":[{"range":{"start":{"line":3,"character":6},"end":{"line":3,"character":6}},"text":"t"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"85","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2197

{"id":"85","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fot","range":{"end":{"character":7,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":7,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2394

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":7,"line":3},"start":{"character":7,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":12}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"86","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2197

{"id":"86","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fot","range":{"end":{"character":7,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":7,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":13},"contentChanges":[{"range":{"start":{"line":3,"character":7},"end":{"line":3,"character":7}},"text":"o"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"87","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2198

{"id":"87","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"foto","range":{"end":{"character":8,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":8,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2394

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":13}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"88","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2198

{"id":"88","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"foto","range":{"end":{"character":8,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":8,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 298

{"jsonrpc":"2.0","id":"89","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":8},"end":{"line":3,"character":8}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 39

{"id":"89","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":14},"contentChanges":[{"range":{"start":{"line":3,"character":8},"end":{"line":3,"character":8}},"text":"s"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"90","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2199

{"id":"90","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotos","range":{"end":{"character":9,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":9,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2394

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":9,"line":3},"start":{"character":9,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":14}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"91","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2199

{"id":"91","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotos","range":{"end":{"character":9,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":9,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 298

{"jsonrpc":"2.0","id":"92","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":9}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 39

{"id":"92","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":15},"contentChanges":[{"range":{"start":{"line":3,"character":9},"end":{"line":3,"character":9}},"text":"e"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"93","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2202

{"id":"93","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotose","range":{"end":{"character":10,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":10,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":10,"line":3},"start":{"character":10,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":15}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"94","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2202

{"id":"94","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotose","range":{"end":{"character":10,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":10,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":16},"contentChanges":[{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":10}},"text":"n"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"95","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2203

{"id":"95","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosen","range":{"end":{"character":11,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":11,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":11,"line":3},"start":{"character":11,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":16}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"96","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2203

{"id":"96","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosen","range":{"end":{"character":11,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":11,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":17},"contentChanges":[{"range":{"start":{"line":3,"character":11},"end":{"line":3,"character":11}},"text":"s"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"97","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2204

{"id":"97","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosens","range":{"end":{"character":12,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":12,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":12,"line":3},"start":{"character":12,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":17}}
>>>
Content-Length: 199

{"jsonrpc":"2.0","id":"98","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2204

{"id":"98","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosens","range":{"end":{"character":12,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":12,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":18},"contentChanges":[{"range":{"start":{"line":3,"character":12},"end":{"line":3,"character":12}},"text":"i"}]}}Content-Length: 199

{"jsonrpc":"2.0","id":"99","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2205

{"id":"99","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensi","range":{"end":{"character":13,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":13,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":13,"line":3},"start":{"character":13,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":18}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"100","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2206

{"id":"100","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensi","range":{"end":{"character":13,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":13,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 301

{"jsonrpc":"2.0","id":"101","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":13}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"101","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":19},"contentChanges":[{"range":{"start":{"line":3,"character":13},"end":{"line":3,"character":13}},"text":"b"}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"102","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2207

{"id":"102","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensib","range":{"end":{"character":14,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":14,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":14,"line":3},"start":{"character":14,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":19}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"103","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2207

{"id":"103","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensib","range":{"end":{"character":14,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":14,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":20},"contentChanges":[{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":14}},"text":"l"}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"104","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2208

{"id":"104","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensibl","range":{"end":{"character":15,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":15,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":15,"line":3},"start":{"character":15,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":20}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"105","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2208

{"id":"105","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensibl","range":{"end":{"character":15,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":15,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":21},"contentChanges":[{"range":{"start":{"line":3,"character":15},"end":{"line":3,"character":15}},"text":"e"}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"106","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"106","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":16,"line":3},"start":{"character":16,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":21}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"107","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"107","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 301

{"jsonrpc":"2.0","id":"108","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"108","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":22},"contentChanges":[{"range":{"start":{"line":3,"character":16},"end":{"line":3,"character":16}},"text":" "}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"109","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 111

{"id":5,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 2209

{"id":"109","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":16,"line":3},"start":{"character":16,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":22}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"110","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"110","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 306

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":23},"contentChanges":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":17}},"text":"¡"}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"111","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"111","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2617

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"character_not_allowed","message":"Unexpected character <U+00A1> (fix available)","range":{"end":{"character":18,"line":3},"start":{"character":17,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":18,"line":3},"start":{"character":17,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":23}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"112","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"112","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 301

{"jsonrpc":"2.0","id":"113","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":18},"end":{"line":3,"character":18}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"113","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":24},"contentChanges":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":18}},"text":""}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"114","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"114","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":16,"line":3},"start":{"character":16,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":24}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"115","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"115","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 306

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":25},"contentChanges":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":17}},"text":"¿"}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"116","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"116","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2617

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"character_not_allowed","message":"Unexpected character <U+00BF> (fix available)","range":{"end":{"character":18,"line":3},"start":{"character":17,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":18,"line":3},"start":{"character":17,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":25}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"117","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"117","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 301

{"jsonrpc":"2.0","id":"118","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":18},"end":{"line":3,"character":18}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"118","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 304

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":26},"contentChanges":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":18}},"text":""}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"119","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"119","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":16,"line":3},"start":{"character":16,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":26}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"120","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"120","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28837

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":6},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}
<<<
Content-Length: 111

{"id":6,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 2396

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":16,"line":3},"start":{"character":16,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":26}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 1103

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":70,"line":16},"start":{"character":51,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH_BASE'","range":{"end":{"character":32,"line":20},"start":{"character":16,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.cpp","version":1}}Content-Length: 659

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.cpp","version":1}}Content-Length: 1771

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":13},"start":{"character":9,"line":13}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SOUND_PIN'","range":{"end":{"character":19,"line":35},"start":{"character":10,"line":35}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUTPUT' (fix available)","range":{"end":{"character":27,"line":35},"start":{"character":21,"line":35}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'ISR' (fix available)","range":{"end":{"character":3,"line":83},"start":{"character":0,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":4,"line":84},"start":{"character":2,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":96},"start":{"character":0,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sound.h","version":1}}Content-Length: 8501

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":23,"line":27},"start":{"character":9,"line":27}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":19,"line":28},"start":{"character":9,"line":28}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":45},"start":{"character":9,"line":45}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/string.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":84},"start":{"character":10,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":84},"start":{"character":25,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":25,"line":91},"start":{"character":18,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":92},"start":{"character":17,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":32,"line":96},"start":{"character":25,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":43,"line":96},"start":{"character":36,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":55,"line":96},"start":{"character":47,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":97},"start":{"character":21,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":97},"start":{"character":32,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":50,"line":97},"start":{"character":43,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":62,"line":97},"start":{"character":54,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":98},"start":{"character":21,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":98},"start":{"character":32,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":99},"start":{"character":2,"line":99}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":100},"start":{"character":17,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":33,"line":100},"start":{"character":26,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":42,"line":100},"start":{"character":35,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":100},"start":{"character":44,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":25,"line":101},"start":{"character":18,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":36,"line":101},"start":{"character":29,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":53,"line":101},"start":{"character":46,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":71,"line":101},"start":{"character":64,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":82,"line":101},"start":{"character":75,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":94,"line":101},"start":{"character":86,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":44,"line":104},"start":{"character":37,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":55,"line":104},"start":{"character":48,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":66,"line":104},"start":{"character":59,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":25,"line":105},"start":{"character":17,"line":105}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":106},"start":{"character":32,"line":106}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":48,"line":107},"start":{"character":41,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":60,"line":107},"start":{"character":53,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":109},"start":{"character":2,"line":109}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":110},"start":{"character":2,"line":110}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":44,"line":113},"start":{"character":32,"line":113}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h","version":1}}Content-Length: 10031

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":20,"line":51},"start":{"character":9,"line":51}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":67},"start":{"character":5,"line":67}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":67},"start":{"character":21,"line":67}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":67},"start":{"character":21,"line":67}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":75},"start":{"character":5,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":75},"start":{"character":21,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":75},"start":{"character":21,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"redefinition_different_kind","message":"Redefinition of 'Adafruit_SSD1306' as different kind of symbol","range":{"end":{"character":21,"line":121},"start":{"character":5,"line":121}},"relatedInformation":[{"location":{"range":{"end":{"character":31,"line":113},"start":{"character":15,"line":113}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":121},"start":{"character":21,"line":121}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":121},"start":{"character":21,"line":121}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":219},"start":{"character":5,"line":219}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":219},"start":{"character":21,"line":219}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":219},"start":{"character":21,"line":219}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":238},"start":{"character":5,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":238},"start":{"character":21,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":238},"start":{"character":21,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":259},"start":{"character":5,"line":259}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":259},"start":{"character":21,"line":259}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":259},"start":{"character":21,"line":259}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":265},"start":{"character":5,"line":265}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":265},"start":{"character":21,"line":265}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":265},"start":{"character":21,"line":265}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":349},"start":{"character":5,"line":349}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":349},"start":{"character":21,"line":349}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":349},"start":{"character":21,"line":349}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":356},"start":{"character":5,"line":356}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":356},"start":{"character":21,"line":356}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":356},"start":{"character":21,"line":356}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"redefinition_different_kind","message":"Redefinition of 'Adafruit_SSD1306' as different kind of symbol","range":{"end":{"character":21,"line":383},"start":{"character":5,"line":383}},"relatedInformation":[{"location":{"range":{"end":{"character":31,"line":113},"start":{"character":15,"line":113}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":383},"start":{"character":21,"line":383}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":383},"start":{"character":21,"line":383}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"redefinition_different_kind","message":"Redefinition of 'Adafruit_SSD1306' as different kind of symbol","range":{"end":{"character":25,"line":397},"start":{"character":9,"line":397}},"relatedInformation":[{"location":{"range":{"end":{"character":31,"line":113},"start":{"character":15,"line":113}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":26,"line":397},"start":{"character":25,"line":397}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":26,"line":397},"start":{"character":25,"line":397}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":411},"start":{"character":5,"line":411}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":411},"start":{"character":21,"line":411}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":411},"start":{"character":21,"line":411}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":450},"start":{"character":5,"line":450}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":450},"start":{"character":21,"line":450}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":450},"start":{"character":21,"line":450}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.cpp","version":1}}Content-Length: 32660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":20,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":11},"start":{"character":13,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":37,"line":11},"start":{"character":29,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":29,"line":16},"start":{"character":22,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":40,"line":16},"start":{"character":33,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":16},"start":{"character":44,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":17},"start":{"character":16,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":18},"start":{"character":14,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":18},"start":{"character":25,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":18},"start":{"character":36,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":19},"start":{"character":0,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":19},"start":{"character":16,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":34,"line":19},"start":{"character":27,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":20},"start":{"character":15,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":20},"start":{"character":25,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":21},"start":{"character":15,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":21},"start":{"character":26,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":21},"start":{"character":42,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":21},"start":{"character":56,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":22,"line":22},"start":{"character":16,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":22},"start":{"character":26,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":49,"line":22},"start":{"character":42,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":73,"line":22},"start":{"character":66,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":89,"line":22},"start":{"character":82,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":100,"line":22},"start":{"character":93,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":111,"line":22},"start":{"character":104,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":23},"start":{"character":14,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":23},"start":{"character":24,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":24},"start":{"character":24,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":24},"start":{"character":45,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":25},"start":{"character":14,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":25},"start":{"character":24,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":25},"start":{"character":40,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":72,"line":25},"start":{"character":65,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":17,"line":28},"start":{"character":16,"line":28}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint32_t' (fix available)","range":{"end":{"character":8,"line":32},"start":{"character":0,"line":32}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":41},"start":{"character":0,"line":41}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ZBUFFER_SIZE'","range":{"end":{"character":28,"line":41},"start":{"character":16,"line":41}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":14,"line":46},"start":{"character":7,"line":46}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":10,"line":47},"start":{"character":4,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'F'","range":{"end":{"character":20,"line":47},"start":{"character":19,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ZBUFFER_SIZE'","range":{"end":{"character":36,"line":56},"start":{"character":24,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":15,"line":62},"start":{"character":9,"line":62}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FRAME_TIME'","range":{"end":{"character":46,"line":62},"start":{"character":36,"line":62}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":25,"line":63},"start":{"character":19,"line":63}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FRAME_TIME'","range":{"end":{"character":57,"line":63},"start":{"character":47,"line":63}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":24,"line":64},"start":{"character":18,"line":64}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FRAME_TIME'","range":{"end":{"character":27,"line":68},"start":{"character":17,"line":68}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":72},"start":{"character":14,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":72},"start":{"character":25,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":72},"start":{"character":36,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'boolean'","range":{"end":{"character":7,"line":78},"start":{"character":0,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":78},"start":{"character":25,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":78},"start":{"character":36,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":54,"line":78},"start":{"character":47,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":25,"line":80},"start":{"character":11,"line":80}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":82},"start":{"character":2,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":43,"line":82},"start":{"character":29,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":69,"line":82},"start":{"character":55,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":87,"line":82},"start":{"character":72,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":38,"line":83},"start":{"character":24,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":83},"start":{"character":42,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":74,"line":83},"start":{"character":59,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":39,"line":84},"start":{"character":24,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":84},"start":{"character":42,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'gradient'","range":{"end":{"character":40,"line":87},"start":{"character":32,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":17,"line":87},"start":{"character":9,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":90},"start":{"character":16,"line":90}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":91},"start":{"character":7,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":38,"line":91},"start":{"character":26,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":92},"start":{"character":9,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":41,"line":92},"start":{"character":28,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":101},"start":{"character":15,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":101},"start":{"character":25,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":32,"line":103},"start":{"character":20,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":84,"line":103},"start":{"character":71,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":100,"line":103},"start":{"character":87,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":9,"line":116},"start":{"character":2,"line":116}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":123},"start":{"character":15,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":123},"start":{"character":26,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":123},"start":{"character":42,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":123},"start":{"character":56,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":124},"start":{"character":2,"line":124}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":125},"start":{"character":2,"line":125}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":126},"start":{"character":2,"line":126}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":58,"line":126},"start":{"character":45,"line":126}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":127},"start":{"character":2,"line":127}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RES_DIVIDER'","range":{"end":{"character":31,"line":156},"start":{"character":20,"line":156}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":170},"start":{"character":2,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":18,"line":170},"start":{"character":12,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":15,"line":171},"start":{"character":8,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":171},"start":{"character":32,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":9,"line":172},"start":{"character":2,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":20,"line":172},"start":{"character":13,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":173},"start":{"character":2,"line":173}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":176},"start":{"character":2,"line":176}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":177},"start":{"character":2,"line":177}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":178},"start":{"character":2,"line":178}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":179},"start":{"character":2,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'max'","range":{"end":{"character":26,"line":179},"start":{"character":23,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":10,"line":180},"start":{"character":2,"line":180}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ZBUFFER_SIZE'","range":{"end":{"character":41,"line":187},"start":{"character":29,"line":187}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Z_RES_DIVIDER'","range":{"end":{"character":62,"line":187},"start":{"character":49,"line":187}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":96,"line":187},"start":{"character":77,"line":187}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":191},"start":{"character":7,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":45,"line":193},"start":{"character":32,"line":193}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":11,"line":197},"start":{"character":4,"line":197}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":199},"start":{"character":9,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":13,"line":200},"start":{"character":6,"line":200}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":14,"line":201},"start":{"character":6,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":46,"line":204},"start":{"character":34,"line":204}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":26,"line":208},"start":{"character":18,"line":208}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":24,"line":211},"start":{"character":16,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":212},"start":{"character":13,"line":212}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":213},"start":{"character":15,"line":213}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":225},"start":{"character":14,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":225},"start":{"character":24,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":226},"start":{"character":2,"line":226}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":227},"start":{"character":2,"line":227}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":228},"start":{"character":2,"line":228}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":229},"start":{"character":2,"line":229}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":230},"start":{"character":2,"line":230}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":17,"line":233},"start":{"character":9,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":38,"line":233},"start":{"character":30,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_HEIGHT'","range":{"end":{"character":27,"line":236},"start":{"character":16,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font'","range":{"end":{"character":30,"line":237},"start":{"character":22,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font_width'","range":{"end":{"character":55,"line":237},"start":{"character":41,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":30,"line":238},"start":{"character":20,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":18,"line":239},"start":{"character":10,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":245},"start":{"character":14,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":245},"start":{"character":24,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":245},"start":{"character":45,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":246},"start":{"character":2,"line":246}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":247},"start":{"character":2,"line":247}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":252},"start":{"character":11,"line":252}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":26,"line":255},"start":{"character":14,"line":255}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":260},"start":{"character":14,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":260},"start":{"character":24,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":260},"start":{"character":40,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":75,"line":260},"start":{"character":68,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":261},"start":{"character":2,"line":261}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":262},"start":{"character":2,"line":262}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":27,"line":264},"start":{"character":15,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'PGM_P'","range":{"end":{"character":43,"line":264},"start":{"character":37,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":267},"start":{"character":11,"line":267}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":272},"start":{"character":14,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":272},"start":{"character":25,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":272},"start":{"character":36,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h","version":1}}Content-Length: 890

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_SIZE'","range":{"end":{"character":43,"line":72},"start":{"character":33,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/level.h","version":1}}Content-Length: 4386

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":3},"start":{"character":9,"line":3}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_LEFT'; did you mean 'LEFT'? (fix available)","range":{"end":{"character":16,"line":74},"start":{"character":10,"line":74}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":11},"start":{"character":2,"line":11}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'LEFT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_RIGHT'; did you mean 'RIGHT'? (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":12},"start":{"character":2,"line":12}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'RIGHT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_UP'","range":{"end":{"character":14,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_DOWN'; did you mean 'DOWN'? (fix available)","range":{"end":{"character":16,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":10},"start":{"character":2,"line":10}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'DOWN' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_FIRE'","range":{"end":{"character":16,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_LEFT'; did you mean 'LEFT'? (fix available)","range":{"end":{"character":27,"line":82},"start":{"character":21,"line":82}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":11},"start":{"character":2,"line":11}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'LEFT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_RIGHT'; did you mean 'RIGHT'? (fix available)","range":{"end":{"character":28,"line":86},"start":{"character":21,"line":86}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":12},"start":{"character":2,"line":12}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'RIGHT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_UP'","range":{"end":{"character":25,"line":90},"start":{"character":21,"line":90}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_DOWN'; did you mean 'DOWN'? (fix available)","range":{"end":{"character":27,"line":94},"start":{"character":21,"line":94}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":10},"start":{"character":2,"line":10}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'DOWN' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_FIRE'","range":{"end":{"character":27,"line":98},"start":{"character":21,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.cpp","version":1}}Content-Length: 26493

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":2},"start":{"character":9,"line":2}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":18,"line":3},"start":{"character":9,"line":3}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_endif_without_if","message":"In included file: #endif without #if","range":{"end":{"character":18,"line":5},"start":{"character":9,"line":5}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":31},"start":{"character":1,"line":31}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":20,"line":8},"start":{"character":9,"line":8}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":21,"line":16},"start":{"character":16,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":26,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_STATIC_ENTITIES'","range":{"end":{"character":46,"line":25},"start":{"character":27,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":31,"line":88},"start":{"character":19,"line":88}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":39,"line":89},"start":{"character":28,"line":89}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":31,"line":103},"start":{"character":20,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":61,"line":103},"start":{"character":49,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":46,"line":108},"start":{"character":34,"line":108}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":69,"line":108},"start":{"character":58,"line":108}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":34,"line":131},"start":{"character":22,"line":131}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":34,"line":157},"start":{"character":22,"line":157}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":31,"line":166},"start":{"character":16,"line":166}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":98,"line":166},"start":{"character":83,"line":166}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":37,"line":167},"start":{"character":22,"line":167}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_COLLIDER_DIST'","range":{"end":{"character":38,"line":244},"start":{"character":19,"line":244}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_MAX_DAMAGE'","range":{"end":{"character":50,"line":264},"start":{"character":36,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_MAX_DAMAGE'","range":{"end":{"character":66,"line":264},"start":{"character":52,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITY_DISTANCE'","range":{"end":{"character":48,"line":296},"start":{"character":29,"line":296}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DIST'","range":{"end":{"character":53,"line":332},"start":{"character":37,"line":332}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENEMY_VIEW'","range":{"end":{"character":92,"line":332},"start":{"character":78,"line":332}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_SPEED'","range":{"end":{"character":69,"line":347},"start":{"character":58,"line":347}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_SPEED'","range":{"end":{"character":69,"line":348},"start":{"character":58,"line":348}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DIST'","range":{"end":{"character":61,"line":353},"start":{"character":45,"line":353}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DAMAGE'","range":{"end":{"character":73,"line":360},"start":{"character":55,"line":360}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_COLLIDER_DIST'","range":{"end":{"character":57,"line":374},"start":{"character":35,"line":374}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_FIREBALL_DAMAGE'","range":{"end":{"character":72,"line":376},"start":{"character":51,"line":376}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":61,"line":387},"start":{"character":46,"line":387}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_SPEED'","range":{"end":{"character":84,"line":387},"start":{"character":70,"line":387}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":61,"line":388},"start":{"character":46,"line":388}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_SPEED'","range":{"end":{"character":84,"line":388},"start":{"character":70,"line":388}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ITEM_COLLIDER_DIST'","range":{"end":{"character":53,"line":401},"start":{"character":35,"line":401}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ITEM_COLLIDER_DIST'","range":{"end":{"character":53,"line":413},"start":{"character":35,"line":413}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":38,"line":433},"start":{"character":26,"line":433}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RES_DIVIDER'","range":{"end":{"character":56,"line":433},"start":{"character":45,"line":433}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":51,"line":434},"start":{"character":39,"line":434}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_RENDER_DEPTH'","range":{"end":{"character":43,"line":468},"start":{"character":27,"line":468}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITY_DISTANCE'","range":{"end":{"character":79,"line":489},"start":{"character":60,"line":489}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'zbuffer'","range":{"end":{"character":13,"line":512},"start":{"character":6,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Z_RES_DIVIDER'","range":{"end":{"character":31,"line":512},"start":{"character":18,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":69,"line":512},"start":{"character":50,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":41,"line":515},"start":{"character":28,"line":515}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_RENDER_DEPTH'","range":{"end":{"character":56,"line":521},"start":{"character":40,"line":521}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":64,"line":519},"start":{"character":51,"line":519}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":64,"line":520},"start":{"character":51,"line":520}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_SPRITE_DEPTH'","range":{"end":{"character":60,"line":571},"start":{"character":44,"line":571}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":40,"line":575},"start":{"character":30,"line":575}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":42,"line":576},"start":{"character":29,"line":576}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":38,"line":582},"start":{"character":28,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":72,"line":582},"start":{"character":60,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":85,"line":582},"start":{"character":75,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":53,"line":669},"start":{"character":40,"line":669}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":24,"line":670},"start":{"character":11,"line":670}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":78,"line":670},"start":{"character":65,"line":670}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_SHOT_POS'","range":{"end":{"character":28,"line":672},"start":{"character":16,"line":672}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":68,"line":678},"start":{"character":55,"line":678}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":687},"start":{"character":2,"line":687}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'const __FlashStringHelper' for 3rd argument; dereference the argument with *"},{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'char *' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":688},"start":{"character":2,"line":688}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'const __FlashStringHelper' for 3rd argument; dereference the argument with *"},{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'char *' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":697},"start":{"character":2,"line":697}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":698},"start":{"character":2,"line":698}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getActualFps'","range":{"end":{"character":36,"line":704},"start":{"character":24,"line":704}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":704},"start":{"character":2,"line":704}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'int' to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'int' to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":705},"start":{"character":2,"line":705}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":17,"line":712},"start":{"character":5,"line":712}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":18,"line":713},"start":{"character":5,"line":713}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":23,"line":721},"start":{"character":11,"line":721}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":47,"line":721},"start":{"character":34,"line":721}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GAME_PLAY'","range":{"end":{"character":38,"line":729},"start":{"character":29,"line":729}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display_buf'","range":{"end":{"character":22,"line":750},"start":{"character":11,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":39,"line":750},"start":{"character":27,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":56,"line":750},"start":{"character":43,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED'","range":{"end":{"character":37,"line":760},"start":{"character":28,"line":760}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":761},"start":{"character":41,"line":761}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED'","range":{"end":{"character":39,"line":763},"start":{"character":30,"line":763}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":764},"start":{"character":41,"line":764}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":767},"start":{"character":41,"line":767}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ROT_SPEED'","range":{"end":{"character":29,"line":772},"start":{"character":20,"line":772}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ROT_SPEED'","range":{"end":{"character":29,"line":780},"start":{"character":20,"line":780}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":61,"line":789},"start":{"character":48,"line":789}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_TARGET_POS'","range":{"end":{"character":34,"line":803},"start":{"character":20,"line":803}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_TARGET_POS'","range":{"end":{"character":41,"line":806},"start":{"character":27,"line":806}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_SHOT_POS'","range":{"end":{"character":30,"line":811},"start":{"character":18,"line":811}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":41,"line":821},"start":{"character":36,"line":821}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'fadeScreen'","range":{"end":{"character":16,"line":848},"start":{"character":6,"line":848}},"relatedInformation":[{"location":{"range":{"end":{"character":15,"line":17},"start":{"character":5,"line":17}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: requires 2 arguments, but 1 was provided"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":18,"line":877},"start":{"character":13,"line":877}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":14,"line":884},"start":{"character":9,"line":884}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GAME_PLAY'","range":{"end":{"character":18,"line":888},"start":{"character":9,"line":888}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":48,"line":624},"start":{"character":30,"line":624}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":49,"line":625},"start":{"character":30,"line":625}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":638},"start":{"character":30,"line":638}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":652},"start":{"character":30,"line":652}},"relatedInformation":[],"severity":2,"source":"clang-tidy"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":6}}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":27},"contentChanges":[{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":17}},"text":"="}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"121","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1992

{"id":"121","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2124

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":9,"line":15},"start":{"character":0,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":27}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"122","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1992

{"id":"122","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 301

{"jsonrpc":"2.0","id":"123","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":18},"end":{"line":3,"character":18}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"123","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":28},"contentChanges":[{"range":{"start":{"line":3,"character":18},"end":{"line":3,"character":18}},"text":" "}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"124","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1992

{"id":"124","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2124

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":9,"line":15},"start":{"character":0,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":28}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"125","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 1992

{"id":"125","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":16,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":29},"contentChanges":[{"range":{"start":{"line":3,"character":19},"end":{"line":3,"character":19}},"text":"A"}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"126","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"126","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":20,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2601

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'A'","range":{"end":{"character":20,"line":3},"start":{"character":19,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":20,"line":3},"start":{"character":20,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":29}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"127","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"127","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":20,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 301

{"jsonrpc":"2.0","id":"128","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":20},"end":{"line":3,"character":20}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"128","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 305

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":30},"contentChanges":[{"range":{"start":{"line":3,"character":20},"end":{"line":3,"character":20}},"text":"0"}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"129","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"129","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":21,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 2618

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"undeclared_var_use","message":"Use of undeclared identifier 'A0' (fix available)","range":{"end":{"character":21,"line":3},"start":{"character":19,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":21,"line":3},"start":{"character":21,"line":3}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":30}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"130","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2209

{"id":"130","jsonrpc":"2.0","result":[{"detail":"int","kind":13,"name":"fotosensible","range":{"end":{"character":21,"line":3},"start":{"character":0,"line":3}},"selectionRange":{"end":{"character":16,"line":3},"start":{"character":4,"line":3}}},{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 301

{"jsonrpc":"2.0","id":"131","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":21},"end":{"line":3,"character":21}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"131","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 241

{"jsonrpc":"2.0","id":"132","method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":10,"character":30}}}
<<<
Content-Length: 40

{"id":"132","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 303

{"jsonrpc":"2.0","id":"133","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":10,"character":30},"end":{"line":10,"character":30}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"133","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28837

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":7},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}
<<<
Content-Length: 111

{"id":7,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 1103

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":70,"line":16},"start":{"character":51,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH_BASE'","range":{"end":{"character":32,"line":20},"start":{"character":16,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.cpp","version":1}}Content-Length: 659

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.cpp","version":1}}Content-Length: 8501

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":23,"line":27},"start":{"character":9,"line":27}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":19,"line":28},"start":{"character":9,"line":28}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":45},"start":{"character":9,"line":45}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/string.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":84},"start":{"character":10,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":84},"start":{"character":25,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":25,"line":91},"start":{"character":18,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":92},"start":{"character":17,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":32,"line":96},"start":{"character":25,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":43,"line":96},"start":{"character":36,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":55,"line":96},"start":{"character":47,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":97},"start":{"character":21,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":97},"start":{"character":32,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":50,"line":97},"start":{"character":43,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":62,"line":97},"start":{"character":54,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":98},"start":{"character":21,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":98},"start":{"character":32,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":99},"start":{"character":2,"line":99}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":100},"start":{"character":17,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":33,"line":100},"start":{"character":26,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":42,"line":100},"start":{"character":35,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":100},"start":{"character":44,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":25,"line":101},"start":{"character":18,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":36,"line":101},"start":{"character":29,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":53,"line":101},"start":{"character":46,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":71,"line":101},"start":{"character":64,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":82,"line":101},"start":{"character":75,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":94,"line":101},"start":{"character":86,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":44,"line":104},"start":{"character":37,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":55,"line":104},"start":{"character":48,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":66,"line":104},"start":{"character":59,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":25,"line":105},"start":{"character":17,"line":105}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":106},"start":{"character":32,"line":106}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":48,"line":107},"start":{"character":41,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":60,"line":107},"start":{"character":53,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":109},"start":{"character":2,"line":109}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":110},"start":{"character":2,"line":110}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":44,"line":113},"start":{"character":32,"line":113}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h","version":1}}Content-Length: 1771

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":13},"start":{"character":9,"line":13}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SOUND_PIN'","range":{"end":{"character":19,"line":35},"start":{"character":10,"line":35}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUTPUT' (fix available)","range":{"end":{"character":27,"line":35},"start":{"character":21,"line":35}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'ISR' (fix available)","range":{"end":{"character":3,"line":83},"start":{"character":0,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":4,"line":84},"start":{"character":2,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":96},"start":{"character":0,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sound.h","version":1}}Content-Length: 890

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_SIZE'","range":{"end":{"character":43,"line":72},"start":{"character":33,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/level.h","version":1}}Content-Length: 46147

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":20,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":11},"start":{"character":13,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":37,"line":11},"start":{"character":29,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":29,"line":16},"start":{"character":22,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":40,"line":16},"start":{"character":33,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":16},"start":{"character":44,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":17},"start":{"character":16,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":18},"start":{"character":14,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":18},"start":{"character":25,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":18},"start":{"character":36,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":19},"start":{"character":0,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":19},"start":{"character":16,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":34,"line":19},"start":{"character":27,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":20},"start":{"character":15,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":20},"start":{"character":25,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":21},"start":{"character":15,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":21},"start":{"character":26,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":21},"start":{"character":42,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":21},"start":{"character":56,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":22,"line":22},"start":{"character":16,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":22},"start":{"character":26,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":49,"line":22},"start":{"character":42,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":73,"line":22},"start":{"character":66,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":89,"line":22},"start":{"character":82,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":100,"line":22},"start":{"character":93,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":111,"line":22},"start":{"character":104,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":23},"start":{"character":14,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":23},"start":{"character":24,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":24},"start":{"character":24,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":24},"start":{"character":45,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":25},"start":{"character":14,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":25},"start":{"character":24,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":25},"start":{"character":40,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":72,"line":25},"start":{"character":65,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":17,"line":28},"start":{"character":16,"line":28}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint32_t' (fix available)","range":{"end":{"character":8,"line":32},"start":{"character":0,"line":32}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":41},"start":{"character":0,"line":41}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ZBUFFER_SIZE'","range":{"end":{"character":28,"line":41},"start":{"character":16,"line":41}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":14,"line":46},"start":{"character":7,"line":46}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":10,"line":47},"start":{"character":4,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'F'","range":{"end":{"character":20,"line":47},"start":{"character":19,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ZBUFFER_SIZE'","range":{"end":{"character":36,"line":56},"start":{"character":24,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":15,"line":62},"start":{"character":9,"line":62}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FRAME_TIME'","range":{"end":{"character":46,"line":62},"start":{"character":36,"line":62}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":25,"line":63},"start":{"character":19,"line":63}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FRAME_TIME'","range":{"end":{"character":57,"line":63},"start":{"character":47,"line":63}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":24,"line":64},"start":{"character":18,"line":64}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FRAME_TIME'","range":{"end":{"character":27,"line":68},"start":{"character":17,"line":68}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":72},"start":{"character":14,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":72},"start":{"character":25,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":72},"start":{"character":36,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'boolean'","range":{"end":{"character":7,"line":78},"start":{"character":0,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":78},"start":{"character":25,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":78},"start":{"character":36,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":54,"line":78},"start":{"character":47,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":25,"line":80},"start":{"character":11,"line":80}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":15,"line":82},"start":{"character":10,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'index'","range":{"end":{"character":15,"line":82},"start":{"character":10,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":43,"line":82},"start":{"character":29,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":69,"line":82},"start":{"character":55,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":87,"line":82},"start":{"character":72,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":38,"line":83},"start":{"character":24,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":83},"start":{"character":42,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":74,"line":83},"start":{"character":59,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":39,"line":84},"start":{"character":24,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":84},"start":{"character":42,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'gradient'","range":{"end":{"character":40,"line":87},"start":{"character":32,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'index'","range":{"end":{"character":48,"line":87},"start":{"character":43,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":17,"line":87},"start":{"character":9,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":90},"start":{"character":16,"line":90}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":91},"start":{"character":7,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":38,"line":91},"start":{"character":26,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":92},"start":{"character":9,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":41,"line":92},"start":{"character":28,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":101},"start":{"character":15,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":101},"start":{"character":25,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":32,"line":103},"start":{"character":20,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":84,"line":103},"start":{"character":71,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":100,"line":103},"start":{"character":87,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display'","range":{"end":{"character":9,"line":116},"start":{"character":2,"line":116}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":123},"start":{"character":15,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":123},"start":{"character":26,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":123},"start":{"character":42,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":123},"start":{"character":56,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":124},"start":{"character":2,"line":124}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":125},"start":{"character":2,"line":125}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":126},"start":{"character":2,"line":126}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":58,"line":126},"start":{"character":45,"line":126}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":127},"start":{"character":10,"line":127}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":11,"line":127},"start":{"character":10,"line":127}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":10,"line":156},"start":{"character":9,"line":156}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":17,"line":156},"start":{"character":16,"line":156}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RES_DIVIDER'","range":{"end":{"character":31,"line":156},"start":{"character":20,"line":156}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":34,"line":156},"start":{"character":33,"line":156}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":32,"line":158},"start":{"character":31,"line":158}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":23,"line":159},"start":{"character":22,"line":159}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":170},"start":{"character":2,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":18,"line":170},"start":{"character":12,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":15,"line":171},"start":{"character":8,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":171},"start":{"character":32,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":9,"line":172},"start":{"character":2,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":20,"line":172},"start":{"character":13,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":173},"start":{"character":2,"line":173}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":12,"line":176},"start":{"character":10,"line":176}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'tw'","range":{"end":{"character":12,"line":176},"start":{"character":10,"line":176}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":12,"line":177},"start":{"character":10,"line":177}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'th'","range":{"end":{"character":12,"line":177},"start":{"character":10,"line":177}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":20,"line":178},"start":{"character":10,"line":178}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'byte_width'","range":{"end":{"character":20,"line":178},"start":{"character":10,"line":178}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":20,"line":179},"start":{"character":10,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":20,"line":179},"start":{"character":10,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'max'","range":{"end":{"character":26,"line":179},"start":{"character":23,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":10,"line":180},"start":{"character":2,"line":180}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'byte_width'","range":{"end":{"character":37,"line":180},"start":{"character":27,"line":180}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ZBUFFER_SIZE'","range":{"end":{"character":41,"line":187},"start":{"character":29,"line":187}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Z_RES_DIVIDER'","range":{"end":{"character":62,"line":187},"start":{"character":49,"line":187}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":96,"line":187},"start":{"character":77,"line":187}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":191},"start":{"character":7,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'th'","range":{"end":{"character":30,"line":191},"start":{"character":28,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":48,"line":191},"start":{"character":38,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":45,"line":193},"start":{"character":32,"line":193}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":14,"line":197},"start":{"character":12,"line":197}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sy'","range":{"end":{"character":14,"line":197},"start":{"character":12,"line":197}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":199},"start":{"character":9,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'tw'","range":{"end":{"character":32,"line":199},"start":{"character":30,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":50,"line":199},"start":{"character":40,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":16,"line":200},"start":{"character":14,"line":200}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sx'","range":{"end":{"character":16,"line":200},"start":{"character":14,"line":200}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":14,"line":201},"start":{"character":6,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sy'","range":{"end":{"character":47,"line":201},"start":{"character":45,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'byte_width'","range":{"end":{"character":60,"line":201},"start":{"character":50,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sx'","range":{"end":{"character":65,"line":201},"start":{"character":63,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":46,"line":204},"start":{"character":34,"line":204}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":26,"line":208},"start":{"character":18,"line":208}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sx'","range":{"end":{"character":64,"line":208},"start":{"character":62,"line":208}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":24,"line":211},"start":{"character":16,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'sx'","range":{"end":{"character":64,"line":211},"start":{"character":62,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":212},"start":{"character":13,"line":212}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":44,"line":212},"start":{"character":34,"line":212}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":213},"start":{"character":15,"line":213}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pixel_size'","range":{"end":{"character":46,"line":213},"start":{"character":36,"line":213}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":225},"start":{"character":14,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":225},"start":{"character":24,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":226},"start":{"character":10,"line":226}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":11,"line":226},"start":{"character":10,"line":226}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":227},"start":{"character":10,"line":227}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":11,"line":227},"start":{"character":10,"line":227}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":17,"line":228},"start":{"character":10,"line":228}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bOffset'","range":{"end":{"character":17,"line":228},"start":{"character":10,"line":228}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":229},"start":{"character":10,"line":229}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":11,"line":229},"start":{"character":10,"line":229}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":14,"line":230},"start":{"character":10,"line":230}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":14,"line":230},"start":{"character":10,"line":230}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":17,"line":233},"start":{"character":9,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":19,"line":233},"start":{"character":18,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":38,"line":233},"start":{"character":30,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":40,"line":233},"start":{"character":39,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":52,"line":233},"start":{"character":51,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bOffset'","range":{"end":{"character":9,"line":235},"start":{"character":2,"line":235}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":13,"line":235},"start":{"character":12,"line":235}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":13,"line":236},"start":{"character":9,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_HEIGHT'","range":{"end":{"character":27,"line":236},"start":{"character":16,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":33,"line":236},"start":{"character":29,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":5,"line":237},"start":{"character":4,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font'","range":{"end":{"character":30,"line":237},"start":{"character":22,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":38,"line":237},"start":{"character":34,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font_width'","range":{"end":{"character":55,"line":237},"start":{"character":41,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bOffset'","range":{"end":{"character":65,"line":237},"start":{"character":58,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":10,"line":238},"start":{"character":9,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":17,"line":238},"start":{"character":16,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":30,"line":238},"start":{"character":20,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":33,"line":238},"start":{"character":32,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'b'","range":{"end":{"character":20,"line":239},"start":{"character":19,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":18,"line":239},"start":{"character":10,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'c'","range":{"end":{"character":24,"line":239},"start":{"character":23,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":46,"line":239},"start":{"character":45,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'n'","range":{"end":{"character":23,"line":240},"start":{"character":22,"line":240}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'line'","range":{"end":{"character":33,"line":240},"start":{"character":29,"line":240}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":245},"start":{"character":14,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":245},"start":{"character":24,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":245},"start":{"character":45,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":13,"line":246},"start":{"character":10,"line":246}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":13,"line":246},"start":{"character":10,"line":246}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":247},"start":{"character":10,"line":247}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":11,"line":247},"start":{"character":10,"line":247}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":20,"line":249},"start":{"character":19,"line":249}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":16,"line":250},"start":{"character":13,"line":250}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":5,"line":251},"start":{"character":4,"line":251}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":7,"line":252},"start":{"character":4,"line":252}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":252},"start":{"character":11,"line":252}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":11,"line":255},"start":{"character":8,"line":255}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":26,"line":255},"start":{"character":14,"line":255}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":260},"start":{"character":14,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":260},"start":{"character":24,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":260},"start":{"character":40,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":75,"line":260},"start":{"character":68,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":13,"line":261},"start":{"character":10,"line":261}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":13,"line":261},"start":{"character":10,"line":261}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":11,"line":262},"start":{"character":10,"line":262}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":11,"line":262},"start":{"character":10,"line":262}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":12,"line":264},"start":{"character":9,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":27,"line":264},"start":{"character":15,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'PGM_P'","range":{"end":{"character":43,"line":264},"start":{"character":37,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":52,"line":264},"start":{"character":51,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":16,"line":265},"start":{"character":13,"line":265}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'i'","range":{"end":{"character":5,"line":266},"start":{"character":4,"line":266}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'pos'","range":{"end":{"character":7,"line":267},"start":{"character":4,"line":267}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":267},"start":{"character":11,"line":267}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":272},"start":{"character":14,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":272},"start":{"character":25,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":272},"start":{"character":36,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h","version":1}}Content-Length: 10031

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":20,"line":51},"start":{"character":9,"line":51}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":67},"start":{"character":5,"line":67}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":67},"start":{"character":21,"line":67}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":67},"start":{"character":21,"line":67}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":75},"start":{"character":5,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":75},"start":{"character":21,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":75},"start":{"character":21,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"redefinition_different_kind","message":"Redefinition of 'Adafruit_SSD1306' as different kind of symbol","range":{"end":{"character":21,"line":121},"start":{"character":5,"line":121}},"relatedInformation":[{"location":{"range":{"end":{"character":31,"line":113},"start":{"character":15,"line":113}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":121},"start":{"character":21,"line":121}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":121},"start":{"character":21,"line":121}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":219},"start":{"character":5,"line":219}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":219},"start":{"character":21,"line":219}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":219},"start":{"character":21,"line":219}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":238},"start":{"character":5,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":238},"start":{"character":21,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":238},"start":{"character":21,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":259},"start":{"character":5,"line":259}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":259},"start":{"character":21,"line":259}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":259},"start":{"character":21,"line":259}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":265},"start":{"character":5,"line":265}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":265},"start":{"character":21,"line":265}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":265},"start":{"character":21,"line":265}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":349},"start":{"character":5,"line":349}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":349},"start":{"character":21,"line":349}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":349},"start":{"character":21,"line":349}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":356},"start":{"character":5,"line":356}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":356},"start":{"character":21,"line":356}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":356},"start":{"character":21,"line":356}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"redefinition_different_kind","message":"Redefinition of 'Adafruit_SSD1306' as different kind of symbol","range":{"end":{"character":21,"line":383},"start":{"character":5,"line":383}},"relatedInformation":[{"location":{"range":{"end":{"character":31,"line":113},"start":{"character":15,"line":113}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":383},"start":{"character":21,"line":383}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":383},"start":{"character":21,"line":383}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"redefinition_different_kind","message":"Redefinition of 'Adafruit_SSD1306' as different kind of symbol","range":{"end":{"character":25,"line":397},"start":{"character":9,"line":397}},"relatedInformation":[{"location":{"range":{"end":{"character":31,"line":113},"start":{"character":15,"line":113}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h"},"message":"Previous definition is here"}],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":26,"line":397},"start":{"character":25,"line":397}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":26,"line":397},"start":{"character":25,"line":397}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":411},"start":{"character":5,"line":411}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":411},"start":{"character":21,"line":411}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":411},"start":{"character":21,"line":411}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"typecheck_decl_incomplete_type","message":"Variable has incomplete type 'void'","range":{"end":{"character":21,"line":450},"start":{"character":5,"line":450}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_semi_declaration","message":"Expected ';' at end of declaration (fix available)","range":{"end":{"character":22,"line":450},"start":{"character":21,"line":450}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":22,"line":450},"start":{"character":21,"line":450}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.cpp","version":1}}Content-Length: 4386

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":3},"start":{"character":9,"line":3}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_LEFT'; did you mean 'LEFT'? (fix available)","range":{"end":{"character":16,"line":74},"start":{"character":10,"line":74}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":11},"start":{"character":2,"line":11}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'LEFT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_RIGHT'; did you mean 'RIGHT'? (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":12},"start":{"character":2,"line":12}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'RIGHT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_UP'","range":{"end":{"character":14,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_DOWN'; did you mean 'DOWN'? (fix available)","range":{"end":{"character":16,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":10},"start":{"character":2,"line":10}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'DOWN' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_FIRE'","range":{"end":{"character":16,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_LEFT'; did you mean 'LEFT'? (fix available)","range":{"end":{"character":27,"line":82},"start":{"character":21,"line":82}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":11},"start":{"character":2,"line":11}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'LEFT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_RIGHT'; did you mean 'RIGHT'? (fix available)","range":{"end":{"character":28,"line":86},"start":{"character":21,"line":86}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":12},"start":{"character":2,"line":12}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'RIGHT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_UP'","range":{"end":{"character":25,"line":90},"start":{"character":21,"line":90}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_DOWN'; did you mean 'DOWN'? (fix available)","range":{"end":{"character":27,"line":94},"start":{"character":21,"line":94}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":10},"start":{"character":2,"line":10}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'DOWN' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_FIRE'","range":{"end":{"character":27,"line":98},"start":{"character":21,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.cpp","version":1}}Content-Length: 26493

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":2},"start":{"character":9,"line":2}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":18,"line":3},"start":{"character":9,"line":3}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_endif_without_if","message":"In included file: #endif without #if","range":{"end":{"character":18,"line":5},"start":{"character":9,"line":5}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":31},"start":{"character":1,"line":31}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":20,"line":8},"start":{"character":9,"line":8}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":21,"line":16},"start":{"character":16,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":26,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_STATIC_ENTITIES'","range":{"end":{"character":46,"line":25},"start":{"character":27,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":31,"line":88},"start":{"character":19,"line":88}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":39,"line":89},"start":{"character":28,"line":89}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":31,"line":103},"start":{"character":20,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":61,"line":103},"start":{"character":49,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":46,"line":108},"start":{"character":34,"line":108}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":69,"line":108},"start":{"character":58,"line":108}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":34,"line":131},"start":{"character":22,"line":131}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":34,"line":157},"start":{"character":22,"line":157}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":31,"line":166},"start":{"character":16,"line":166}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":98,"line":166},"start":{"character":83,"line":166}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":37,"line":167},"start":{"character":22,"line":167}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_COLLIDER_DIST'","range":{"end":{"character":38,"line":244},"start":{"character":19,"line":244}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_MAX_DAMAGE'","range":{"end":{"character":50,"line":264},"start":{"character":36,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_MAX_DAMAGE'","range":{"end":{"character":66,"line":264},"start":{"character":52,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITY_DISTANCE'","range":{"end":{"character":48,"line":296},"start":{"character":29,"line":296}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DIST'","range":{"end":{"character":53,"line":332},"start":{"character":37,"line":332}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENEMY_VIEW'","range":{"end":{"character":92,"line":332},"start":{"character":78,"line":332}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_SPEED'","range":{"end":{"character":69,"line":347},"start":{"character":58,"line":347}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_SPEED'","range":{"end":{"character":69,"line":348},"start":{"character":58,"line":348}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DIST'","range":{"end":{"character":61,"line":353},"start":{"character":45,"line":353}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DAMAGE'","range":{"end":{"character":73,"line":360},"start":{"character":55,"line":360}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_COLLIDER_DIST'","range":{"end":{"character":57,"line":374},"start":{"character":35,"line":374}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_FIREBALL_DAMAGE'","range":{"end":{"character":72,"line":376},"start":{"character":51,"line":376}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":61,"line":387},"start":{"character":46,"line":387}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_SPEED'","range":{"end":{"character":84,"line":387},"start":{"character":70,"line":387}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":61,"line":388},"start":{"character":46,"line":388}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_SPEED'","range":{"end":{"character":84,"line":388},"start":{"character":70,"line":388}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ITEM_COLLIDER_DIST'","range":{"end":{"character":53,"line":401},"start":{"character":35,"line":401}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ITEM_COLLIDER_DIST'","range":{"end":{"character":53,"line":413},"start":{"character":35,"line":413}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":38,"line":433},"start":{"character":26,"line":433}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RES_DIVIDER'","range":{"end":{"character":56,"line":433},"start":{"character":45,"line":433}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":51,"line":434},"start":{"character":39,"line":434}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_RENDER_DEPTH'","range":{"end":{"character":43,"line":468},"start":{"character":27,"line":468}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITY_DISTANCE'","range":{"end":{"character":79,"line":489},"start":{"character":60,"line":489}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'zbuffer'","range":{"end":{"character":13,"line":512},"start":{"character":6,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Z_RES_DIVIDER'","range":{"end":{"character":31,"line":512},"start":{"character":18,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":69,"line":512},"start":{"character":50,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":41,"line":515},"start":{"character":28,"line":515}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_RENDER_DEPTH'","range":{"end":{"character":56,"line":521},"start":{"character":40,"line":521}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":64,"line":519},"start":{"character":51,"line":519}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":64,"line":520},"start":{"character":51,"line":520}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_SPRITE_DEPTH'","range":{"end":{"character":60,"line":571},"start":{"character":44,"line":571}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":40,"line":575},"start":{"character":30,"line":575}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":42,"line":576},"start":{"character":29,"line":576}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":38,"line":582},"start":{"character":28,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":72,"line":582},"start":{"character":60,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":85,"line":582},"start":{"character":75,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":53,"line":669},"start":{"character":40,"line":669}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":24,"line":670},"start":{"character":11,"line":670}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":78,"line":670},"start":{"character":65,"line":670}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_SHOT_POS'","range":{"end":{"character":28,"line":672},"start":{"character":16,"line":672}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":68,"line":678},"start":{"character":55,"line":678}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":687},"start":{"character":2,"line":687}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'const __FlashStringHelper' for 3rd argument; dereference the argument with *"},{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'char *' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":688},"start":{"character":2,"line":688}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'const __FlashStringHelper' for 3rd argument; dereference the argument with *"},{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'char *' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":697},"start":{"character":2,"line":697}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":698},"start":{"character":2,"line":698}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getActualFps'","range":{"end":{"character":36,"line":704},"start":{"character":24,"line":704}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":704},"start":{"character":2,"line":704}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'int' to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'int' to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":705},"start":{"character":2,"line":705}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":17,"line":712},"start":{"character":5,"line":712}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":18,"line":713},"start":{"character":5,"line":713}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":23,"line":721},"start":{"character":11,"line":721}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":47,"line":721},"start":{"character":34,"line":721}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GAME_PLAY'","range":{"end":{"character":38,"line":729},"start":{"character":29,"line":729}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display_buf'","range":{"end":{"character":22,"line":750},"start":{"character":11,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":39,"line":750},"start":{"character":27,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":56,"line":750},"start":{"character":43,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED'","range":{"end":{"character":37,"line":760},"start":{"character":28,"line":760}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":761},"start":{"character":41,"line":761}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED'","range":{"end":{"character":39,"line":763},"start":{"character":30,"line":763}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":764},"start":{"character":41,"line":764}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":767},"start":{"character":41,"line":767}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ROT_SPEED'","range":{"end":{"character":29,"line":772},"start":{"character":20,"line":772}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ROT_SPEED'","range":{"end":{"character":29,"line":780},"start":{"character":20,"line":780}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":61,"line":789},"start":{"character":48,"line":789}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_TARGET_POS'","range":{"end":{"character":34,"line":803},"start":{"character":20,"line":803}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_TARGET_POS'","range":{"end":{"character":41,"line":806},"start":{"character":27,"line":806}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_SHOT_POS'","range":{"end":{"character":30,"line":811},"start":{"character":18,"line":811}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":41,"line":821},"start":{"character":36,"line":821}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'fadeScreen'","range":{"end":{"character":16,"line":848},"start":{"character":6,"line":848}},"relatedInformation":[{"location":{"range":{"end":{"character":15,"line":17},"start":{"character":5,"line":17}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: requires 2 arguments, but 1 was provided"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":18,"line":877},"start":{"character":13,"line":877}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":14,"line":884},"start":{"character":9,"line":884}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GAME_PLAY'","range":{"end":{"character":18,"line":888},"start":{"character":9,"line":888}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":48,"line":624},"start":{"character":30,"line":624}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":49,"line":625},"start":{"character":30,"line":625}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":638},"start":{"character":30,"line":638}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":652},"start":{"character":30,"line":652}},"relatedInformation":[],"severity":2,"source":"clang-tidy"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":7}}
>>>
Content-Length: 299

{"jsonrpc":"2.0","id":"134","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":0}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"134","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28837

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":8},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}Content-Length: 229

{"jsonrpc":"2.0","id":"135","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":13,"character":49}}}
<<<
Content-Length: 42

{"id":"135","jsonrpc":"2.0","result":null}
>>>
Content-Length: 229

{"jsonrpc":"2.0","id":"136","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":23,"character":49}}}
<<<
Content-Length: 42

{"id":"136","jsonrpc":"2.0","result":null}
>>>
Content-Length: 240

{"jsonrpc":"2.0","id":"137","method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":3,"character":21}}}
<<<
Content-Length: 40

{"id":"137","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 300

{"jsonrpc":"2.0","id":"138","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":2},"end":{"line":3,"character":21}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"138","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 300

{"jsonrpc":"2.0","id":"139","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":21}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"139","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 227

{"jsonrpc":"2.0","id":"140","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":3,"character":0}}}
<<<
Content-Length: 42

{"id":"140","jsonrpc":"2.0","result":null}
>>>
Content-Length: 227

{"jsonrpc":"2.0","id":"141","method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":3,"character":0}}}
<<<
Content-Length: 42

{"id":"141","jsonrpc":"2.0","result":null}
>>>
Content-Length: 303

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":31},"contentChanges":[{"range":{"start":{"line":3,"character":0},"end":{"line":3,"character":21}},"text":""}]}}Content-Length: 200

{"jsonrpc":"2.0","id":"142","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 111

{"id":8,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":8,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 2001

{"id":"142","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"143","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2147

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":15},"start":{"character":10,"line":15}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":16},"start":{"character":10,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":17},"start":{"character":10,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":20},"start":{"character":10,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":79},"start":{"character":10,"line":79}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h","version":31}}Content-Length: 2001

{"id":"143","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28837

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":9},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}
<<<
Content-Length: 1103

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":70,"line":16},"start":{"character":51,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH_BASE'","range":{"end":{"character":32,"line":20},"start":{"character":16,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/types.cpp","version":1}}Content-Length: 8501

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":23,"line":27},"start":{"character":9,"line":27}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":19,"line":28},"start":{"character":9,"line":28}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":45},"start":{"character":9,"line":45}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/string.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":17,"line":84},"start":{"character":10,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":84},"start":{"character":25,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":25,"line":91},"start":{"character":18,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":92},"start":{"character":17,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":32,"line":96},"start":{"character":25,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":43,"line":96},"start":{"character":36,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":55,"line":96},"start":{"character":47,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":97},"start":{"character":21,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":97},"start":{"character":32,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":50,"line":97},"start":{"character":43,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":62,"line":97},"start":{"character":54,"line":97}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":28,"line":98},"start":{"character":21,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":39,"line":98},"start":{"character":32,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":99},"start":{"character":2,"line":99}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":24,"line":100},"start":{"character":17,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":33,"line":100},"start":{"character":26,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":42,"line":100},"start":{"character":35,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":100},"start":{"character":44,"line":100}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":25,"line":101},"start":{"character":18,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":36,"line":101},"start":{"character":29,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":53,"line":101},"start":{"character":46,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":71,"line":101},"start":{"character":64,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":82,"line":101},"start":{"character":75,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":94,"line":101},"start":{"character":86,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":44,"line":104},"start":{"character":37,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":55,"line":104},"start":{"character":48,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":66,"line":104},"start":{"character":59,"line":104}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t' (fix available)","range":{"end":{"character":25,"line":105},"start":{"character":17,"line":105}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":106},"start":{"character":32,"line":106}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":48,"line":107},"start":{"character":41,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":60,"line":107},"start":{"character":53,"line":107}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":109},"start":{"character":2,"line":109}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":110},"start":{"character":2,"line":110}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":44,"line":113},"start":{"character":32,"line":113}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.h","version":1}}Content-Length: 1771

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":13},"start":{"character":9,"line":13}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SOUND_PIN'","range":{"end":{"character":19,"line":35},"start":{"character":10,"line":35}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'OUTPUT' (fix available)","range":{"end":{"character":27,"line":35},"start":{"character":21,"line":35}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'ISR' (fix available)","range":{"end":{"character":3,"line":83},"start":{"character":0,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"expected_expression","message":"Expected expression","range":{"end":{"character":4,"line":84},"start":{"character":2,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":1,"line":96},"start":{"character":0,"line":96}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/sound.h","version":1}}Content-Length: 660

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":20,"line":51},"start":{"character":9,"line":51}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/SSD1306.cpp","version":1}}Content-Length: 32234

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"unknown_typename","message":"In included file: unknown type name 'uint16_t'","range":{"end":{"character":20,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":18,"line":50},"start":{"character":10,"line":50}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/TWI_Master.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":11},"start":{"character":13,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"invalid_token_after_toplevel_declarator","message":"Expected ';' after top level declarator (fix available)","range":{"end":{"character":37,"line":11},"start":{"character":29,"line":11}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":29,"line":16},"start":{"character":22,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":40,"line":16},"start":{"character":33,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":51,"line":16},"start":{"character":44,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":17},"start":{"character":16,"line":17}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":18},"start":{"character":14,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":18},"start":{"character":25,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":18},"start":{"character":36,"line":18}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":19},"start":{"character":0,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":19},"start":{"character":16,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":34,"line":19},"start":{"character":27,"line":19}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":20},"start":{"character":15,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":20},"start":{"character":25,"line":20}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":21},"start":{"character":15,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":21},"start":{"character":26,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":21},"start":{"character":42,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":21},"start":{"character":56,"line":21}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":22,"line":22},"start":{"character":16,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":22},"start":{"character":26,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":49,"line":22},"start":{"character":42,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":73,"line":22},"start":{"character":66,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":89,"line":22},"start":{"character":82,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":100,"line":22},"start":{"character":93,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":111,"line":22},"start":{"character":104,"line":22}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":23},"start":{"character":14,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":23},"start":{"character":24,"line":23}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":24},"start":{"character":24,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":24},"start":{"character":45,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":25},"start":{"character":14,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":25},"start":{"character":24,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":25},"start":{"character":40,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":72,"line":25},"start":{"character":65,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":29,"line":28},"start":{"character":17,"line":28}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint32_t'","range":{"end":{"character":8,"line":32},"start":{"character":0,"line":32}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":7,"line":41},"start":{"character":0,"line":41}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ZBUFFER_SIZE'","range":{"end":{"character":28,"line":41},"start":{"character":16,"line":41}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Serial'","range":{"end":{"character":10,"line":47},"start":{"character":4,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'F'","range":{"end":{"character":20,"line":47},"start":{"character":19,"line":47}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ZBUFFER_SIZE'","range":{"end":{"character":36,"line":56},"start":{"character":24,"line":56}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":15,"line":62},"start":{"character":9,"line":62}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FRAME_TIME'","range":{"end":{"character":46,"line":62},"start":{"character":36,"line":62}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":25,"line":63},"start":{"character":19,"line":63}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FRAME_TIME'","range":{"end":{"character":57,"line":63},"start":{"character":47,"line":63}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'millis'","range":{"end":{"character":24,"line":64},"start":{"character":18,"line":64}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FRAME_TIME'","range":{"end":{"character":27,"line":68},"start":{"character":17,"line":68}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":72},"start":{"character":14,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":72},"start":{"character":25,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":72},"start":{"character":36,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'boolean'","range":{"end":{"character":7,"line":78},"start":{"character":0,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":78},"start":{"character":25,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":78},"start":{"character":36,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":54,"line":78},"start":{"character":47,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":25,"line":80},"start":{"character":11,"line":80}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":82},"start":{"character":2,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_COUNT'","range":{"end":{"character":43,"line":82},"start":{"character":29,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":69,"line":82},"start":{"character":55,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":87,"line":82},"start":{"character":72,"line":82}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":38,"line":83},"start":{"character":24,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":83},"start":{"character":42,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":74,"line":83},"start":{"character":59,"line":83}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_HEIGHT'","range":{"end":{"character":39,"line":84},"start":{"character":24,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GRADIENT_WIDTH'","range":{"end":{"character":56,"line":84},"start":{"character":42,"line":84}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'gradient'","range":{"end":{"character":40,"line":87},"start":{"character":32,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":17,"line":87},"start":{"character":9,"line":87}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":23,"line":90},"start":{"character":16,"line":90}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":91},"start":{"character":7,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":38,"line":91},"start":{"character":26,"line":91}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":92},"start":{"character":9,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":41,"line":92},"start":{"character":28,"line":92}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":21,"line":101},"start":{"character":15,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":31,"line":101},"start":{"character":25,"line":101}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":32,"line":103},"start":{"character":20,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":84,"line":103},"start":{"character":71,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":100,"line":103},"start":{"character":87,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":123},"start":{"character":15,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":32,"line":123},"start":{"character":26,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":48,"line":123},"start":{"character":42,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":63,"line":123},"start":{"character":56,"line":123}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":124},"start":{"character":2,"line":124}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":125},"start":{"character":2,"line":125}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":126},"start":{"character":2,"line":126}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":58,"line":126},"start":{"character":45,"line":126}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":127},"start":{"character":2,"line":127}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RES_DIVIDER'","range":{"end":{"character":31,"line":156},"start":{"character":20,"line":156}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":8,"line":170},"start":{"character":2,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":18,"line":170},"start":{"character":12,"line":170}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":15,"line":171},"start":{"character":8,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":39,"line":171},"start":{"character":32,"line":171}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":9,"line":172},"start":{"character":2,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int16_t' (fix available)","range":{"end":{"character":20,"line":172},"start":{"character":13,"line":172}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":173},"start":{"character":2,"line":173}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":176},"start":{"character":2,"line":176}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":177},"start":{"character":2,"line":177}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":178},"start":{"character":2,"line":178}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":179},"start":{"character":2,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'max'","range":{"end":{"character":26,"line":179},"start":{"character":23,"line":179}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":10,"line":180},"start":{"character":2,"line":180}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ZBUFFER_SIZE'","range":{"end":{"character":41,"line":187},"start":{"character":29,"line":187}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Z_RES_DIVIDER'","range":{"end":{"character":62,"line":187},"start":{"character":49,"line":187}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":96,"line":187},"start":{"character":77,"line":187}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":14,"line":191},"start":{"character":7,"line":191}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":45,"line":193},"start":{"character":32,"line":193}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":11,"line":197},"start":{"character":4,"line":197}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":16,"line":199},"start":{"character":9,"line":199}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":13,"line":200},"start":{"character":6,"line":200}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint16_t'","range":{"end":{"character":14,"line":201},"start":{"character":6,"line":201}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":46,"line":204},"start":{"character":34,"line":204}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":26,"line":208},"start":{"character":18,"line":208}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":24,"line":211},"start":{"character":16,"line":211}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":20,"line":212},"start":{"character":13,"line":212}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":22,"line":213},"start":{"character":15,"line":213}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":225},"start":{"character":14,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":225},"start":{"character":24,"line":225}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":226},"start":{"character":2,"line":226}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":227},"start":{"character":2,"line":227}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":228},"start":{"character":2,"line":228}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":229},"start":{"character":2,"line":229}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":230},"start":{"character":2,"line":230}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":17,"line":233},"start":{"character":9,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_MAP'","range":{"end":{"character":38,"line":233},"start":{"character":30,"line":233}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_HEIGHT'","range":{"end":{"character":27,"line":236},"start":{"character":16,"line":236}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font'","range":{"end":{"character":30,"line":237},"start":{"character":22,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bmp_font_width'","range":{"end":{"character":55,"line":237},"start":{"character":41,"line":237}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":30,"line":238},"start":{"character":20,"line":238}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'bit_mask'","range":{"end":{"character":18,"line":239},"start":{"character":10,"line":239}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":245},"start":{"character":14,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":245},"start":{"character":24,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":52,"line":245},"start":{"character":45,"line":245}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":246},"start":{"character":2,"line":246}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":247},"start":{"character":2,"line":247}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":252},"start":{"character":11,"line":252}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":26,"line":255},"start":{"character":14,"line":255}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":20,"line":260},"start":{"character":14,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'int8_t' (fix available)","range":{"end":{"character":30,"line":260},"start":{"character":24,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name '__FlashStringHelper'","range":{"end":{"character":59,"line":260},"start":{"character":40,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":75,"line":260},"start":{"character":68,"line":260}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":261},"start":{"character":2,"line":261}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":9,"line":262},"start":{"character":2,"line":262}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":27,"line":264},"start":{"character":15,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'PGM_P'","range":{"end":{"character":43,"line":264},"start":{"character":37,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'CHAR_WIDTH'","range":{"end":{"character":21,"line":267},"start":{"character":11,"line":267}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":21,"line":272},"start":{"character":14,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":32,"line":272},"start":{"character":25,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"unknown_typename","message":"Unknown type name 'uint8_t' (fix available)","range":{"end":{"character":43,"line":272},"start":{"character":36,"line":272}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h","version":1}}Content-Length: 659

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/entities.cpp","version":1}}Content-Length: 890

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_file_not_found","message":"In included file: 'stddef.h' file not found","range":{"end":{"character":10,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[{"location":{"range":{"end":{"character":19,"line":88},"start":{"character":9,"line":88}},"uri":"file:///C:/Users/krys-/AppData/Local/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/pgmspace.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_SIZE'","range":{"end":{"character":43,"line":72},"start":{"character":33,"line":72}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/level.h","version":1}}Content-Length: 4386

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":3},"start":{"character":9,"line":3}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_LEFT'; did you mean 'LEFT'? (fix available)","range":{"end":{"character":16,"line":74},"start":{"character":10,"line":74}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":11},"start":{"character":2,"line":11}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'LEFT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_RIGHT'; did you mean 'RIGHT'? (fix available)","range":{"end":{"character":17,"line":75},"start":{"character":10,"line":75}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":12},"start":{"character":2,"line":12}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'RIGHT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_UP'","range":{"end":{"character":14,"line":76},"start":{"character":10,"line":76}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_DOWN'; did you mean 'DOWN'? (fix available)","range":{"end":{"character":16,"line":77},"start":{"character":10,"line":77}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":10},"start":{"character":2,"line":10}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'DOWN' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_FIRE'","range":{"end":{"character":16,"line":78},"start":{"character":10,"line":78}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_LEFT'; did you mean 'LEFT'? (fix available)","range":{"end":{"character":27,"line":82},"start":{"character":21,"line":82}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":11},"start":{"character":2,"line":11}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'LEFT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_RIGHT'; did you mean 'RIGHT'? (fix available)","range":{"end":{"character":28,"line":86},"start":{"character":21,"line":86}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":12},"start":{"character":2,"line":12}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'RIGHT' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_UP'","range":{"end":{"character":25,"line":90},"start":{"character":21,"line":90}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use_suggest","message":"Use of undeclared identifier 'K_DOWN'; did you mean 'DOWN'? (fix available)","range":{"end":{"character":27,"line":94},"start":{"character":21,"line":94}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":10},"start":{"character":2,"line":10}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"'DOWN' declared here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'K_FIRE'","range":{"end":{"character":27,"line":98},"start":{"character":21,"line":98}},"relatedInformation":[],"severity":1,"source":"clang"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.cpp","version":1}}Content-Length: 26493

{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":22,"line":2},"start":{"character":9,"line":2}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":18,"line":3},"start":{"character":9,"line":3}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_endif_without_if","message":"In included file: #endif without #if","range":{"end":{"character":18,"line":5},"start":{"character":9,"line":5}},"relatedInformation":[{"location":{"range":{"end":{"character":6,"line":31},"start":{"character":1,"line":31}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/input.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"pp_unterminated_conditional","message":"In included file: unterminated conditional directive","range":{"end":{"character":20,"line":8},"start":{"character":9,"line":8}},"relatedInformation":[{"location":{"range":{"end":{"character":7,"line":1},"start":{"character":1,"line":1}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"message":"Error occurred here"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":21,"line":16},"start":{"character":16,"line":16}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":26,"line":24},"start":{"character":14,"line":24}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_STATIC_ENTITIES'","range":{"end":{"character":46,"line":25},"start":{"character":27,"line":25}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":31,"line":88},"start":{"character":19,"line":88}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":39,"line":89},"start":{"character":28,"line":89}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":31,"line":103},"start":{"character":20,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":61,"line":103},"start":{"character":49,"line":103}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_HEIGHT'","range":{"end":{"character":46,"line":108},"start":{"character":34,"line":108}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'LEVEL_WIDTH'","range":{"end":{"character":69,"line":108},"start":{"character":58,"line":108}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":34,"line":131},"start":{"character":22,"line":131}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITIES'","range":{"end":{"character":34,"line":157},"start":{"character":22,"line":157}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":31,"line":166},"start":{"character":16,"line":166}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":98,"line":166},"start":{"character":83,"line":166}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":37,"line":167},"start":{"character":22,"line":167}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_COLLIDER_DIST'","range":{"end":{"character":38,"line":244},"start":{"character":19,"line":244}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_MAX_DAMAGE'","range":{"end":{"character":50,"line":264},"start":{"character":36,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_MAX_DAMAGE'","range":{"end":{"character":66,"line":264},"start":{"character":52,"line":264}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITY_DISTANCE'","range":{"end":{"character":48,"line":296},"start":{"character":29,"line":296}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DIST'","range":{"end":{"character":53,"line":332},"start":{"character":37,"line":332}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENEMY_VIEW'","range":{"end":{"character":92,"line":332},"start":{"character":78,"line":332}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_SPEED'","range":{"end":{"character":69,"line":347},"start":{"character":58,"line":347}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_SPEED'","range":{"end":{"character":69,"line":348},"start":{"character":58,"line":348}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DIST'","range":{"end":{"character":61,"line":353},"start":{"character":45,"line":353}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_MELEE_DAMAGE'","range":{"end":{"character":73,"line":360},"start":{"character":55,"line":360}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_COLLIDER_DIST'","range":{"end":{"character":57,"line":374},"start":{"character":35,"line":374}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ENEMY_FIREBALL_DAMAGE'","range":{"end":{"character":72,"line":376},"start":{"character":51,"line":376}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":61,"line":387},"start":{"character":46,"line":387}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_SPEED'","range":{"end":{"character":84,"line":387},"start":{"character":70,"line":387}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_ANGLES'","range":{"end":{"character":61,"line":388},"start":{"character":46,"line":388}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'FIREBALL_SPEED'","range":{"end":{"character":84,"line":388},"start":{"character":70,"line":388}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ITEM_COLLIDER_DIST'","range":{"end":{"character":53,"line":401},"start":{"character":35,"line":401}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ITEM_COLLIDER_DIST'","range":{"end":{"character":53,"line":413},"start":{"character":35,"line":413}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":38,"line":433},"start":{"character":26,"line":433}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RES_DIVIDER'","range":{"end":{"character":56,"line":433},"start":{"character":45,"line":433}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":51,"line":434},"start":{"character":39,"line":434}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_RENDER_DEPTH'","range":{"end":{"character":43,"line":468},"start":{"character":27,"line":468}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_ENTITY_DISTANCE'","range":{"end":{"character":79,"line":489},"start":{"character":60,"line":489}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'zbuffer'","range":{"end":{"character":13,"line":512},"start":{"character":6,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'Z_RES_DIVIDER'","range":{"end":{"character":31,"line":512},"start":{"character":18,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'DISTANCE_MULTIPLIER'","range":{"end":{"character":69,"line":512},"start":{"character":50,"line":512}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":41,"line":515},"start":{"character":28,"line":515}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_RENDER_DEPTH'","range":{"end":{"character":56,"line":521},"start":{"character":40,"line":521}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":64,"line":519},"start":{"character":51,"line":519}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":64,"line":520},"start":{"character":51,"line":520}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MAX_SPRITE_DEPTH'","range":{"end":{"character":60,"line":571},"start":{"character":44,"line":571}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":40,"line":575},"start":{"character":30,"line":575}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":42,"line":576},"start":{"character":29,"line":576}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":38,"line":582},"start":{"character":28,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":72,"line":582},"start":{"character":60,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'HALF_WIDTH'","range":{"end":{"character":85,"line":582},"start":{"character":75,"line":582}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":53,"line":669},"start":{"character":40,"line":669}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":24,"line":670},"start":{"character":11,"line":670}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":78,"line":670},"start":{"character":65,"line":670}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_SHOT_POS'","range":{"end":{"character":28,"line":672},"start":{"character":16,"line":672}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":68,"line":678},"start":{"character":55,"line":678}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":687},"start":{"character":2,"line":687}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'const __FlashStringHelper' for 3rd argument; dereference the argument with *"},{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'char *' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":688},"start":{"character":2,"line":688}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'const __FlashStringHelper' for 3rd argument; dereference the argument with *"},{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: cannot convert argument of incomplete type 'const __FlashStringHelper *' to 'char *' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":697},"start":{"character":2,"line":697}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":698},"start":{"character":2,"line":698}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'getActualFps'","range":{"end":{"character":36,"line":704},"start":{"character":24,"line":704}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":704},"start":{"character":2,"line":704}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'int' to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'int' to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'drawText'","range":{"end":{"character":10,"line":705},"start":{"character":2,"line":705}},"relatedInformation":[{"location":{"range":{"end":{"character":13,"line":24},"start":{"character":5,"line":24}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'char *' for 3rd argument"},{"location":{"range":{"end":{"character":13,"line":25},"start":{"character":5,"line":25}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: no known conversion from 'uint8_t' (aka 'unsigned char') to 'const __FlashStringHelper' for 3rd argument"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":17,"line":712},"start":{"character":5,"line":712}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":18,"line":713},"start":{"character":5,"line":713}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":23,"line":721},"start":{"character":11,"line":721}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_HEIGHT'","range":{"end":{"character":47,"line":721},"start":{"character":34,"line":721}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GAME_PLAY'","range":{"end":{"character":38,"line":729},"start":{"character":29,"line":729}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'display_buf'","range":{"end":{"character":22,"line":750},"start":{"character":11,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'SCREEN_WIDTH'","range":{"end":{"character":39,"line":750},"start":{"character":27,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'RENDER_HEIGHT'","range":{"end":{"character":56,"line":750},"start":{"character":43,"line":750}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED'","range":{"end":{"character":37,"line":760},"start":{"character":28,"line":760}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":761},"start":{"character":41,"line":761}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED'","range":{"end":{"character":39,"line":763},"start":{"character":30,"line":763}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":764},"start":{"character":41,"line":764}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'MOV_SPEED_INV'","range":{"end":{"character":54,"line":767},"start":{"character":41,"line":767}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ROT_SPEED'","range":{"end":{"character":29,"line":772},"start":{"character":20,"line":772}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'ROT_SPEED'","range":{"end":{"character":29,"line":780},"start":{"character":20,"line":780}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'JOGGING_SPEED'","range":{"end":{"character":61,"line":789},"start":{"character":48,"line":789}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_TARGET_POS'","range":{"end":{"character":34,"line":803},"start":{"character":20,"line":803}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_TARGET_POS'","range":{"end":{"character":41,"line":806},"start":{"character":27,"line":806}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GUN_SHOT_POS'","range":{"end":{"character":30,"line":811},"start":{"character":18,"line":811}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":41,"line":821},"start":{"character":36,"line":821}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"ovl_no_viable_function_in_call","message":"No matching function for call to 'fadeScreen'","range":{"end":{"character":16,"line":848},"start":{"character":6,"line":848}},"relatedInformation":[{"location":{"range":{"end":{"character":15,"line":17},"start":{"character":5,"line":17}},"uri":"file:///C:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/display.h"},"message":"Candidate function not viable: requires 2 arguments, but 1 was provided"}],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":18,"line":877},"start":{"character":13,"line":877}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'INTRO'","range":{"end":{"character":14,"line":884},"start":{"character":9,"line":884}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"undeclared_var_use","message":"Use of undeclared identifier 'GAME_PLAY'","range":{"end":{"character":18,"line":888},"start":{"character":9,"line":888}},"relatedInformation":[],"severity":1,"source":"clang"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":48,"line":624},"start":{"character":30,"line":624}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":49,"line":625},"start":{"character":30,"line":625}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":638},"start":{"character":30,"line":638}},"relatedInformation":[],"severity":2,"source":"clang-tidy"},{"code":"bugprone-integer-division","message":"Result of integer division used in a floating point context; possible loss of precision","range":{"end":{"character":45,"line":652},"start":{"character":30,"line":652}},"relatedInformation":[],"severity":2,"source":"clang-tidy"}],"uri":"file:///c:/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":9}}
>>>
Content-Length: 241

{"jsonrpc":"2.0","id":"144","method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"position":{"line":10,"character":30}}}
<<<
Content-Length: 40

{"id":"144","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 303

{"jsonrpc":"2.0","id":"145","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":10,"character":30},"end":{"line":10,"character":30}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"145","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"146","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2001

{"id":"146","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"147","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2001

{"id":"147","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"148","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2001

{"id":"148","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"149","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2001

{"id":"149","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"150","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2001

{"id":"150","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"151","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2001

{"id":"151","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 303

{"jsonrpc":"2.0","id":"152","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":10,"character":29},"end":{"line":10,"character":29}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"152","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"153","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2001

{"id":"153","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 200

{"jsonrpc":"2.0","id":"154","method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"}}}
<<<
Content-Length: 2001

{"id":"154","jsonrpc":"2.0","result":[{"detail":"const int","kind":13,"name":"DATA_CLOCK","range":{"end":{"character":28,"line":15},"start":{"character":0,"line":15}},"selectionRange":{"end":{"character":28,"line":15},"start":{"character":18,"line":15}}},{"detail":"const int","kind":13,"name":"DATA_LATCH","range":{"end":{"character":28,"line":16},"start":{"character":0,"line":16}},"selectionRange":{"end":{"character":28,"line":16},"start":{"character":18,"line":16}}},{"detail":"const int","kind":13,"name":"DATA_SERIAL","range":{"end":{"character":29,"line":17},"start":{"character":0,"line":17}},"selectionRange":{"end":{"character":29,"line":17},"start":{"character":18,"line":17}}},{"detail":"const int","kind":13,"name":"SOUND_PIN","range":{"end":{"character":27,"line":20},"start":{"character":0,"line":20}},"selectionRange":{"end":{"character":27,"line":20},"start":{"character":18,"line":20}}},{"detail":"const int","kind":13,"name":"SCREEN_WIDTH","range":{"end":{"character":30,"line":75},"start":{"character":0,"line":75}},"selectionRange":{"end":{"character":30,"line":75},"start":{"character":18,"line":75}}},{"detail":"const int","kind":13,"name":"SCREEN_HEIGHT","range":{"end":{"character":31,"line":76},"start":{"character":0,"line":76}},"selectionRange":{"end":{"character":31,"line":76},"start":{"character":18,"line":76}}},{"detail":"const int","kind":13,"name":"HALF_WIDTH","range":{"end":{"character":28,"line":77},"start":{"character":0,"line":77}},"selectionRange":{"end":{"character":28,"line":77},"start":{"character":18,"line":77}}},{"detail":"const int","kind":13,"name":"RENDER_HEIGHT","range":{"end":{"character":31,"line":78},"start":{"character":0,"line":78}},"selectionRange":{"end":{"character":31,"line":78},"start":{"character":18,"line":78}}},{"detail":"const int","kind":13,"name":"HALF_HEIGHT","range":{"end":{"character":29,"line":79},"start":{"character":0,"line":79}},"selectionRange":{"end":{"character":29,"line":79},"start":{"character":18,"line":79}}}]}
>>>
Content-Length: 303

{"jsonrpc":"2.0","id":"155","method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/constants.h"},"range":{"start":{"line":10,"character":30},"end":{"line":10,"character":30}},"context":{"diagnostics":[]}}}
<<<
Content-Length: 40

{"id":"155","jsonrpc":"2.0","result":[]}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28838

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":10},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}
<<<
Content-Length: 111

{"id":9,"jsonrpc":"2.0","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":9,"result":null}
<<<
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","percentage":0,"title":"indexing"}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
>>>
Content-Length: 188

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp"}}}Content-Length: 28838

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///c%3A/Users/krys-/AppData/Local/Temp/arduino-language-server4122172524/sketch/doom-nano.ino.cpp","version":11},"contentChanges":[{"text":"#include \u003cArduino.h\u003e\n#line 1 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\n#include \"constants.h\"\n#include \"level.h\"\n#include \"sprites.h\"\n#include \"input.h\"\n#include \"entities.h\"\n#include \"types.h\"\n#include \"display.h\"\n#include \"sound.h\"\n\n// Useful macros\n#define swap(a, b)            do { typeof(a) temp = a; a = b; b = temp; } while (0)\n#define sign(a, b)            (double) (a \u003e b ? 1 : (b \u003e a ? -1 : 0))\n\n// general\nuint8_t scene = INTRO;\nbool exit_scene = false;\nbool invert_screen = false;\nuint8_t flash_screen = 0;\n\n// game\n// player and entities\nPlayer player;\nEntity entity[MAX_ENTITIES];\nStaticEntity static_entity[MAX_STATIC_ENTITIES];\nuint8_t num_entities = 0;\nuint8_t num_static_entities = 0;\n\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void);\n#line 35 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid jumpTo(uint8_t target_scene);\n#line 41 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid initializeLevel(const uint8_t level[]);\n#line 56 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y);\n#line 67 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isSpawned(UID uid);\n#line 75 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nbool isStatic(UID uid);\n#line 83 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y);\n#line 109 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid spawnFireball(double x, double y);\n#line 146 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid removeStaticEntity(UID uid);\n#line 207 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid fire();\n#line 239 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateEntities(const uint8_t level[]);\n#line 384 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderMap(const uint8_t level[], double view_height);\n#line 482 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nuint8_t sortEntities();\n#line 503 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nCoords translateIntoView(Coords *pos);\n#line 516 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderEntities(double view_height);\n#line 621 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderGun(uint8_t gun_pos, double amount_jogging);\n#line 640 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderHud();\n#line 647 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid updateHud();\n#line 656 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid renderStats();\n#line 664 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopIntro();\n#line 687 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loopGamePlay();\n#line 836 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid loop(void);\n#line 28 \"C:\\\\Users\\\\krys-\\\\OneDrive\\\\Escritorio\\\\doom-nano-master\\\\doom-nano\\\\doom-nano.ino\"\nvoid setup(void) {\n  setupDisplay();\n  input_setup();\n  sound_init();\n}\n\n// Jump to another scene\nvoid jumpTo(uint8_t target_scene) {\n  scene = target_scene;\n  exit_scene = true;\n}\n\n// Finds the player in the map\nvoid initializeLevel(const uint8_t level[]) {\n  for (uint8_t y = LEVEL_HEIGHT - 1; y \u003e= 0; y--) {\n    for (uint8_t x = 0; x \u003c LEVEL_WIDTH; x++) {\n      uint8_t block = getBlockAt(level, x, y);\n\n      if (block == E_PLAYER) {\n        player = create_player(x, y);\n        return;\n      }\n\n      // todo create other static entities\n    }\n  }\n}\n\nuint8_t getBlockAt(const uint8_t level[], uint8_t x, uint8_t y) {\n  if (x \u003c 0 || x \u003e= LEVEL_WIDTH || y \u003c 0 || y \u003e= LEVEL_HEIGHT) {\n    return E_FLOOR;\n  }\n\n  // y is read in inverse order\n  return pgm_read_byte(level + (((LEVEL_HEIGHT - 1 - y) * LEVEL_WIDTH + x) / 2))\n         \u003e\u003e (!(x % 2) * 4)       // displace part of wanted bits\n         \u0026 0b1111;               // mask wanted bits\n}\n\nbool isSpawned(UID uid) {\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nbool isStatic(UID uid) {\n  for (uint8_t i = 0; i \u003c num_static_entities; i++) {\n    if (static_entity[i].uid == uid) return true;\n  }\n\n  return false;\n}\n\nvoid spawnEntity(uint8_t type, uint8_t x, uint8_t y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  // todo: read static entity status\n  \n  switch (type) {\n    case E_ENEMY:\n      entity[num_entities] = create_enemy(x, y);\n      num_entities++;\n      break;\n\n    case E_KEY:\n      entity[num_entities] = create_key(x, y);\n      num_entities++;\n      break;\n\n    case E_MEDIKIT:\n      entity[num_entities] = create_medikit(x, y);\n      num_entities++;\n      break;\n  }\n}\n\nvoid spawnFireball(double x, double y) {\n  // Limit the number of spawned entities\n  if (num_entities \u003e= MAX_ENTITIES) {\n    return;\n  }\n\n  UID uid = create_uid(E_FIREBALL, x, y);\n  // Remove if already exists, don't throw anything. Not the best, but shouldn't happen too often\n  if (isSpawned(uid)) return;\n\n  // Calculate direction. 32 angles\n  int16_t dir = FIREBALL_ANGLES + atan2(y - player.pos.y, x - player.pos.x) / PI * FIREBALL_ANGLES;\n  if (dir \u003c 0) dir += FIREBALL_ANGLES * 2;\n  entity[num_entities] = create_fireball(x, y, dir);\n  num_entities++;\n}\n\nvoid removeEntity(UID uid, bool makeStatic = false) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_entities) {\n    if (!found \u0026\u0026 entity[i].uid == uid) {\n      // todo: doze it\n      found = true;\n      num_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      entity[i] = entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nvoid removeStaticEntity(UID uid) {\n  uint8_t i = 0;\n  bool found = false;\n\n  while (i \u003c num_static_entities) {\n    if (!found \u0026\u0026 static_entity[i].uid == uid) {\n      found = true;\n      num_static_entities--;\n    }\n\n    // displace entities\n    if (found) {\n      static_entity[i] = static_entity[i + 1];\n    }\n\n    i++;\n  }\n}\n\nUID detectCollision(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  // Wall collision\n  uint8_t round_x = int(pos-\u003ex + relative_x);\n  uint8_t round_y = int(pos-\u003ey + relative_y);\n  uint8_t block = getBlockAt(level, round_x, round_y);\n\n  if (block == E_WALL) {\n    playSound(hit_wall_snd, HIT_WALL_SND_LEN);\n    return create_uid(block, round_x, round_y);\n  }\n\n  if (only_walls) {\n    return UID_null;\n  }\n\n  // Entity collision\n  for (uint8_t i=0; i \u003c num_entities; i++) {\n    // Don't collide with itself\n    if (\u0026(entity[i].pos) == pos) {\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // Only ALIVE enemy collision\n    if (type != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords new_coords = { entity[i].pos.x - relative_x, entity[i].pos.y - relative_y };\n    uint8_t distance = coords_distance(pos, \u0026new_coords);\n\n    // Check distance and if it's getting closer\n    if (distance \u003c ENEMY_COLLIDER_DIST \u0026\u0026 distance \u003c entity[i].distance) {\n      return entity[i].uid;\n    }\n  }\n\n  return UID_null;\n}\n\n// Shoot\nvoid fire() {\n  playSound(shoot_snd, SHOOT_SND_LEN);\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    // Shoot only ALIVE enemies\n    if (uid_get_type(entity[i].uid) != E_ENEMY || entity[i].state == S_DEAD || entity[i].state == S_HIDDEN) {\n      continue;\n    }\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n    if (abs(transform.x) \u003c 20 \u0026\u0026 transform.y \u003e 0) {\n      uint8_t damage = (double) min(GUN_MAX_DAMAGE, GUN_MAX_DAMAGE / (abs(transform.x) * entity[i].distance) / 5);\n      if (damage \u003e 0) {\n        entity[i].health = max(0, entity[i].health - damage);\n        entity[i].state = S_HIT;\n        entity[i].timer = 4;\n      }\n    }\n  }\n}\n\n// Update coords if possible. Return the collided uid, if any\nUID updatePosition(const uint8_t level[], Coords *pos, double relative_x, double relative_y, bool only_walls = false) {\n  UID collide_x = detectCollision(level, pos, relative_x, 0, only_walls);\n  UID collide_y = detectCollision(level, pos, 0, relative_y, only_walls);\n\n  if (!collide_x) pos-\u003ex += relative_x;\n  if (!collide_y) pos-\u003ey += relative_y;\n\n  return collide_x || collide_y || UID_null;\n}\n\nvoid updateEntities(const uint8_t level[]) {\n  uint8_t i = 0;\n  while (i \u003c num_entities) {\n    // update distance\n    entity[i].distance = coords_distance(\u0026(player.pos), \u0026(entity[i].pos));\n\n    // Run the timer. Works with actual frames.\n    // Todo: use delta here. But needs double type and more memory\n    if (entity[i].timer \u003e 0) entity[i].timer--;\n\n    // too far away. put it in doze mode\n    if (entity[i].distance \u003e MAX_ENTITY_DISTANCE) {\n      removeEntity(entity[i].uid);\n      // don't increase 'i', since current one has been removed\n      continue;\n    }\n\n    // bypass render if hidden\n    if (entity[i].state == S_HIDDEN) {\n      i++;\n      continue;\n    }\n\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    switch (type) {\n      case E_ENEMY: {\n          // Enemy \"IA\"\n          if (entity[i].health == 0) {\n            if (entity[i].state != S_DEAD) {\n              entity[i].state = S_DEAD;\n              entity[i].timer = 6;\n            }\n          } else  if (entity[i].state == S_HIT) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball thrown\n            }\n          } else if (entity[i].state == S_FIRING) {\n            if (entity[i].timer == 0) {\n              // Back to alert state\n              entity[i].state = S_ALERT;\n              entity[i].timer = 40;     // delay next fireball throwm\n            }\n          } else {\n            // ALERT STATE\n            if (entity[i].distance \u003e ENEMY_MELEE_DIST \u0026\u0026 entity[i].distance \u003c MAX_ENEMY_VIEW) {\n              if (entity[i].state != S_ALERT) {\n                entity[i].state = S_ALERT;\n                entity[i].timer = 20;   // used to throw fireballs\n              } else {\n                if (entity[i].timer == 0) {\n                  // Throw a fireball\n                  spawnFireball(entity[i].pos.x, entity[i].pos.y);\n                  entity[i].state = S_FIRING;\n                  entity[i].timer = 6;\n                } else {\n                  // move towards to the player.\n                  updatePosition(\n                    level,\n                    \u0026(entity[i].pos),\n                    sign(player.pos.x, entity[i].pos.x) * ENEMY_SPEED * delta,\n                    sign(player.pos.y, entity[i].pos.y) * ENEMY_SPEED * delta,\n                    true\n                  );\n                }\n              }\n            } else if (entity[i].distance \u003c= ENEMY_MELEE_DIST) {\n              if (entity[i].state != S_MELEE) {\n                // Preparing the melee attack\n                entity[i].state = S_MELEE;\n                entity[i].timer = 10;\n              } else if (entity[i].timer == 0) {\n                // Melee attack\n                player.health = max(0, player.health - ENEMY_MELEE_DAMAGE);\n                entity[i].timer = 14;\n                flash_screen = 1;\n                updateHud();\n              }\n            } else {\n              // stand\n              entity[i].state = S_STAND;\n            }\n          }\n          break;\n        }\n\n      case E_FIREBALL: {\n          if (entity[i].distance \u003c FIREBALL_COLLIDER_DIST) {\n            // Hit the player and disappear\n            player.health = max(0, player.health - ENEMY_FIREBALL_DAMAGE);\n            flash_screen = 1;\n            updateHud();\n            removeEntity(entity[i].uid);\n            continue; // continue in the loop\n          } else {\n            // Move. Only collide with walls.\n            // Note: using health to store the angle of the movement\n            UID collided = updatePosition(\n              level,\n              \u0026(entity[i].pos),\n              cos((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              sin((double) entity[i].health / FIREBALL_ANGLES * PI) * FIREBALL_SPEED,\n              true\n            );\n\n            if (collided) {\n              removeEntity(entity[i].uid);\n              continue; // continue in the entity check loop\n            }\n          }\n          break;\n        }\n\n      case E_MEDIKIT: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(medkit_snd, MEDKIT_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.health = min(100, player.health + 50);\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n\n      case E_KEY: {\n          if (entity[i].distance \u003c ITEM_COLLIDER_DIST) {\n            // pickup\n            playSound(get_key_snd, GET_KEY_SND_LEN);\n            entity[i].state = S_HIDDEN;\n            player.keys++;\n            updateHud();\n            flash_screen = 1;\n          }\n          break;\n        }\n    }\n\n    i++;\n  }\n}\n\n// The map raycaster. Based on https://lodev.org/cgtutor/raycasting.html\nvoid renderMap(const uint8_t level[], double view_height) {\n  UID last_uid;\n\n  for (uint8_t x = 0; x \u003c SCREEN_WIDTH; x += RES_DIVIDER) {\n    double camera_x = 2 * (double) x / SCREEN_WIDTH - 1;\n    double ray_x = player.dir.x + player.plane.x * camera_x;\n    double ray_y = player.dir.y + player.plane.y * camera_x;\n    uint8_t map_x = uint8_t(player.pos.x);\n    uint8_t map_y = uint8_t(player.pos.y);\n    Coords map_coords = { player.pos.x, player.pos.y };\n    double delta_x = abs(1 / ray_x);\n    double delta_y = abs(1 / ray_y);\n\n    int8_t step_x; \n    int8_t step_y;\n    double side_x;\n    double side_y;\n\n    if (ray_x \u003c 0) {\n      step_x = -1;\n      side_x = (player.pos.x - map_x) * delta_x;\n    } else {\n      step_x = 1;\n      side_x = (map_x + 1.0 - player.pos.x) * delta_x;\n    }\n\n    if (ray_y \u003c 0) {\n      step_y = -1;\n      side_y = (player.pos.y - map_y) * delta_y;\n    } else {\n      step_y = 1;\n      side_y = (map_y + 1.0 - player.pos.y) * delta_y;\n    }\n\n    // Wall detection\n    uint8_t depth = 0;\n    bool hit = 0;\n    bool side; \n    while (!hit \u0026\u0026 depth \u003c MAX_RENDER_DEPTH) {\n      if (side_x \u003c side_y) {\n        side_x += delta_x;\n        map_x += step_x;\n        side = 0;\n      } else {\n        side_y += delta_y;\n        map_y += step_y;\n        side = 1;\n      }\n\n      uint8_t block = getBlockAt(level, map_x, map_y);\n\n      if (block == E_WALL) {\n        hit = 1;\n      } else {\n        // Spawning entities here, as soon they are visible for the\n        // player. Not the best place, but would be a very performance\n        // cost scan for them in another loop\n        if (block == E_ENEMY || (block \u0026 0b00001000) /* all collectable items */) {\n          // Check that it's close to the player\n          if (coords_distance(\u0026(player.pos), \u0026map_coords) \u003c MAX_ENTITY_DISTANCE) {\n            UID uid = create_uid(block, map_x, map_y);\n            if (last_uid != uid \u0026\u0026 !isSpawned(uid)) {\n              spawnEntity(block, map_x, map_y);\n              last_uid = uid;\n            }\n          }\n        }\n      }\n\n      depth++;\n    }\n\n    if (hit) {\n      double distance;\n      \n      if (side == 0) {\n        distance = max(1, (map_x - player.pos.x + (1 - step_x) / 2) / ray_x);\n      } else {\n        distance = max(1, (map_y - player.pos.y + (1 - step_y) / 2) / ray_y);\n      }\n\n      // store zbuffer value for the column\n      zbuffer[x / Z_RES_DIVIDER] = min(distance * DISTANCE_MULTIPLIER, 255);\n\n      // rendered line height\n      uint8_t line_height = RENDER_HEIGHT / distance;\n\n      drawVLine(\n        x,\n        view_height / distance - line_height / 2 + RENDER_HEIGHT / 2,\n        view_height / distance + line_height / 2 + RENDER_HEIGHT / 2,\n        GRADIENT_COUNT - int(distance / MAX_RENDER_DEPTH * GRADIENT_COUNT) - side * 2\n      );\n    }\n  }\n}\n\n// Sort entities from far to close\nuint8_t sortEntities() {\n  uint8_t gap = num_entities;\n  bool swapped = false;\n  while (gap \u003e 1 || swapped) {\n    //shrink factor 1.3\n    gap = (gap * 10) / 13;\n    if (gap == 9 || gap == 10) gap = 11;\n    if (gap \u003c 1) gap = 1;\n    swapped = false;\n    for (uint8_t i = 0; i \u003c num_entities - gap; i++)\n    {\n      uint8_t j = i + gap;\n      if (entity[i].distance \u003c entity[j].distance)\n      {\n        swap(entity[i], entity[j]);\n        swapped = true;\n      }\n    }\n  }\n}\n\nCoords translateIntoView(Coords *pos) {\n  //translate sprite position to relative to camera\n  double sprite_x = pos-\u003ex - player.pos.x;\n  double sprite_y = pos-\u003ey - player.pos.y;\n\n  //required for correct matrix multiplication\n  double inv_det = 1.0 / (player.plane.x * player.dir.y - player.dir.x * player.plane.y);\n  double transform_x = inv_det * (player.dir.y * sprite_x - player.dir.x * sprite_y);\n  double transform_y = inv_det * (- player.plane.y * sprite_x + player.plane.x * sprite_y); // Z in screen\n\n  return { transform_x, transform_y };\n}\n\nvoid renderEntities(double view_height) {\n  sortEntities();\n\n  for (uint8_t i = 0; i \u003c num_entities; i++) {\n    if (entity[i].state == S_HIDDEN) continue;\n\n    Coords transform = translateIntoView(\u0026(entity[i].pos));\n\n    // don´t render if behind the player or too far away\n    if (transform.y \u003c= 0.1 || transform.y \u003e MAX_SPRITE_DEPTH) {\n      continue;\n    }\n\n    int16_t sprite_screen_x = HALF_WIDTH * (1.0 + transform.x / transform.y);\n    int8_t sprite_screen_y = RENDER_HEIGHT / 2 + view_height / transform.y;\n    uint8_t type = uid_get_type(entity[i].uid);\n\n    // don´t try to render if outside of screen\n    // doing this pre-shortcut due int16 -\u003e int8 conversion makes out-of-screen\n    // values fit into the screen space\n    if (sprite_screen_x \u003c - HALF_WIDTH || sprite_screen_x \u003e SCREEN_WIDTH + HALF_WIDTH) {\n      continue;\n    }\n\n    switch (type) {\n      case E_ENEMY: {\n          uint8_t sprite;\n          if (entity[i].state == S_ALERT) {\n            // walking\n            sprite = int(millis() / 500) % 2;\n          } else if (entity[i].state == S_FIRING) {\n            // fireball\n            sprite = 2;\n          } else if (entity[i].state == S_HIT) {\n            // hit\n            sprite = 3;\n          } else if (entity[i].state == S_MELEE) {\n            // melee atack\n            sprite = entity[i].timer \u003e 10 ? 2 : 1;\n          } else if (entity[i].state == S_DEAD) {\n            // dying\n            sprite = entity[i].timer \u003e 0 ? 3 : 4;\n          } else {\n            // stand\n            sprite = 0;\n          }\n\n          drawSprite(\n            sprite_screen_x - BMP_IMP_WIDTH * .5 / transform.y,\n            sprite_screen_y - 8 / transform.y,\n            bmp_imp_bits,\n            bmp_imp_mask,\n            BMP_IMP_WIDTH,\n            BMP_IMP_HEIGHT,\n            sprite,\n            transform.y\n          );\n          break;\n        }\n\n      case E_FIREBALL: {\n          drawSprite(\n            sprite_screen_x - BMP_FIREBALL_WIDTH / 2 / transform.y,\n            sprite_screen_y - BMP_FIREBALL_HEIGHT / 2 / transform.y,\n            bmp_fireball_bits,\n            bmp_fireball_mask,\n            BMP_FIREBALL_WIDTH,\n            BMP_FIREBALL_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_MEDIKIT: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            0,\n            transform.y\n          );\n          break;\n        }\n\n      case E_KEY: {\n          drawSprite(\n            sprite_screen_x - BMP_ITEMS_WIDTH / 2 / transform.y,\n            sprite_screen_y + 5 / transform.y,\n            bmp_items_bits,\n            bmp_items_mask,\n            BMP_ITEMS_WIDTH,\n            BMP_ITEMS_HEIGHT,\n            1,\n            transform.y\n          );\n          break;\n        }\n    }\n  }\n}\n\nvoid renderGun(uint8_t gun_pos, double amount_jogging) {\n  // jogging\n  char x = 48 + sin((double) millis() * JOGGING_SPEED) * 10 * amount_jogging;\n  char y = RENDER_HEIGHT - gun_pos + abs(cos((double) millis() * JOGGING_SPEED)) * 8 * amount_jogging;\n\n  if (gun_pos \u003e GUN_SHOT_POS - 2) {\n    // Gun fire\n    display.drawBitmap(x + 6, y - 11, bmp_fire_bits, BMP_FIRE_WIDTH, BMP_FIRE_HEIGHT, 1);\n  }\n\n  // Don't draw over the hud!\n  uint8_t clip_height = max(0, min(y + BMP_GUN_HEIGHT, RENDER_HEIGHT) - y);\n\n  // Draw the gun (black mask + actual sprite).\n  display.drawBitmap(x, y, bmp_gun_mask, BMP_GUN_WIDTH, clip_height, 0);\n  display.drawBitmap(x, y, bmp_gun_bits, BMP_GUN_WIDTH, clip_height, 1);\n}\n\n// Only needed first time\nvoid renderHud() {\n  drawText(2, 58, F(\"{}\"), 0);        // Health symbol\n  drawText(40, 58, F(\"[]\"), 0);       // Keys symbol\n  updateHud();\n}\n\n// Render values for the HUD\nvoid updateHud() {\n  display.clearRect(12, 58, 15, 6);\n  display.clearRect(50, 58, 5, 6);\n\n  drawText(12, 58, player.health);\n  drawText(50, 58, player.keys);\n}\n\n// Debug stats\nvoid renderStats() {\n  display.clearRect(58, 58, 70, 6);\n  drawText(114, 58, int(getActualFps()));\n  drawText(82, 58, num_entities);\n  // drawText(94, 58, freeMemory());\n}\n\n// Intro screen\nvoid loopIntro() {\n  display.drawBitmap(\n    (SCREEN_WIDTH - BMP_LOGO_WIDTH) / 2,\n    (SCREEN_HEIGHT - BMP_LOGO_HEIGHT) / 3,\n    bmp_logo_bits,\n    BMP_LOGO_WIDTH,\n    BMP_LOGO_HEIGHT,\n    1\n  );\n\n  delay(1000);\n  drawText(SCREEN_WIDTH / 2 - 25, SCREEN_HEIGHT * .8, F(\"PRESS FIRE\"));\n  display.display();\n\n  // wait for fire\n  while (!exit_scene) {\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n    if (input_fire()) jumpTo(GAME_PLAY);\n  };\n}\n\nvoid loopGamePlay() {\n  bool gun_fired = false;\n  bool walkSoundToggle = false;\n  uint8_t gun_pos = 0;\n  double rot_speed;\n  double old_dir_x;\n  double old_plane_x;\n  double view_height;\n  double jogging;\n  uint8_t fade = GRADIENT_COUNT - 1;\n\n  initializeLevel(sto_level_1);\n\n  do {\n    fps();\n\n    // Clear only the 3d view\n    memset(display_buf, 0, SCREEN_WIDTH * (RENDER_HEIGHT / 8));\n\n    #ifdef SNES_CONTROLLER\n    getControllerData();\n    #endif\n\n    // If the player is alive\n    if (player.health \u003e 0) {\n      // Player speed\n      if (input_up()) {\n        player.velocity += (MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else if (input_down()) {\n        player.velocity += (- MOV_SPEED - player.velocity) * .4;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      } else {\n        player.velocity *= .5;\n        jogging = abs(player.velocity) * MOV_SPEED_INV;\n      }\n\n      // Player rotation\n      if (input_right()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(-rot_speed) - player.dir.y * sin(-rot_speed);\n        player.dir.y = old_dir_x * sin(-rot_speed) + player.dir.y * cos(-rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(-rot_speed) - player.plane.y * sin(-rot_speed);\n        player.plane.y = old_plane_x * sin(-rot_speed) + player.plane.y * cos(-rot_speed);\n      } else if (input_left()) {\n        rot_speed = ROT_SPEED * delta;\n        old_dir_x = player.dir.x;\n        player.dir.x = player.dir.x * cos(rot_speed) - player.dir.y * sin(rot_speed);\n        player.dir.y = old_dir_x * sin(rot_speed) + player.dir.y * cos(rot_speed);\n        old_plane_x = player.plane.x;\n        player.plane.x = player.plane.x * cos(rot_speed) - player.plane.y * sin(rot_speed);\n        player.plane.y = old_plane_x * sin(rot_speed) + player.plane.y * cos(rot_speed);\n      }\n\n      view_height = abs(sin((double) millis() * JOGGING_SPEED)) * 6 * jogging;\n\n      if(view_height \u003e 5.9) {\n        if(sound == false) {\n          if(walkSoundToggle) {\n            playSound(walk1_snd, WALK1_SND_LEN);\n            walkSoundToggle = false;\n          } else {\n            playSound(walk2_snd, WALK2_SND_LEN);\n            walkSoundToggle = true;\n          }\n        }\n      }\n      // Update gun\n      if (gun_pos \u003e GUN_TARGET_POS) {\n        // Right after fire\n        gun_pos -= 1;\n      } else if (gun_pos \u003c GUN_TARGET_POS) {\n        // Showing up\n        gun_pos += 2;\n      } else if (!gun_fired \u0026\u0026 input_fire()) {\n        // ready to fire and fire pressed\n        gun_pos = GUN_SHOT_POS;\n        gun_fired = true;\n        fire();\n      } else if (gun_fired \u0026\u0026 !input_fire()) {\n        // just fired and restored position\n        gun_fired = false;\n      }\n    } else {\n      // The player is dead\n      if (view_height \u003e -10) view_height--;\n      else if (input_fire()) jumpTo(INTRO);\n\n      if (gun_pos \u003e 1) gun_pos -= 2;\n    }\n\n    // Player movement\n    if (abs(player.velocity) \u003e 0.003) {\n      updatePosition(\n        sto_level_1,\n        \u0026(player.pos),\n        player.dir.x * player.velocity * delta,\n        player.dir.y * player.velocity * delta\n      );\n    } else {\n      player.velocity = 0;\n    }\n\n    // Update things\n    updateEntities(sto_level_1);\n\n    // Render stuff\n    renderMap(sto_level_1, view_height);\n    renderEntities(view_height);\n    renderGun(gun_pos, jogging);\n\n    // Fade in effect\n    if (fade \u003e 0) {\n      fadeScreen(fade);\n      fade--;\n\n      if (fade == 0) {\n        // Only draw the hud after fade in effect\n        renderHud();\n      }\n    } else {\n      renderStats();\n    }\n\n    // flash screen\n    if (flash_screen \u003e 0) {\n      invert_screen = !invert_screen;\n      flash_screen--;\n    } else if (invert_screen) {\n      invert_screen = 0;\n    }\n\n    // Draw the frame\n    display.invertDisplay(invert_screen);\n    display.display();\n\n    // Exit routine\n    #ifdef SNES_CONTROLLER\n    if (input_start()) {\n    #else\n    if (input_left() \u0026\u0026 input_right()) {\n    #endif\n      jumpTo(INTRO);\n    }\n  } while (!exit_scene);\n}\n\nvoid loop(void) {\n  switch (scene) {\n    case INTRO: {\n        loopIntro();\n        break;\n      }\n    case GAME_PLAY: {\n        loopGamePlay();\n        break;\n      }\n  }\n\n  // fade out effect\n  for (uint8_t i=0; i\u003cGRADIENT_COUNT; i++) {\n    fadeScreen(i, 0);\n    display.display();\n    delay(40);\n  }\n  exit_scene = false;\n}\n\n"}]}}